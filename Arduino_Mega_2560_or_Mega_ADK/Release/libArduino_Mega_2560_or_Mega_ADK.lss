In archive libArduino_Mega_2560_or_Mega_ADK.a:

CDC.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000588  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00002d1b  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING

HID.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000588  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00002d1b  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING

HardwareSerial.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00001a64  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00003f88  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN14HardwareSerial9availableEv 00000026  00000000  00000000  00005a20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text._ZN14HardwareSerial4peekEv 00000038  00000000  00000000  00005a46  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN14HardwareSerial4readEv 00000044  00000000  00000000  00005a7e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN14HardwareSerial5flushEv 00000016  00000000  00000000  00005ac2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN14HardwareSerial5writeEh 00000078  00000000  00000000  00005ad8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._Z10store_charhP11ring_buffer 00000034  00000000  00000000  00005b50  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._Z11serialEventv 00000002  00000000  00000000  00005b84  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .text.__vector_25 00000066  00000000  00000000  00005b86  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._Z12serialEvent1v 00000002  00000000  00000000  00005bec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__vector_36 00000066  00000000  00000000  00005bee  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._Z12serialEvent2v 00000002  00000000  00000000  00005c54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_51 00000066  00000000  00000000  00005c56  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._Z12serialEvent3v 00000002  00000000  00000000  00005cbc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_54 00000066  00000000  00000000  00005cbe  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._Z14serialEventRunv 00000042  00000000  00000000  00005d24  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text.__vector_26 0000007e  00000000  00000000  00005d66  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text.__vector_37 0000007e  00000000  00000000  00005de4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text.__vector_52 0000007e  00000000  00000000  00005e62  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text.__vector_55 0000007e  00000000  00000000  00005ee0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZN14HardwareSerialC2EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh 00000088  00000000  00000000  00005f5e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZN14HardwareSerial5beginEm 000000fe  00000000  00000000  00005fe6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZN14HardwareSerial5beginEmh 00000108  00000000  00000000  000060e4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text._ZN14HardwareSerial3endEv 000000ae  00000000  00000000  000061ec  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text._ZN14HardwareSerialcvbEv 00000004  00000000  00000000  0000629a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text._GLOBAL__I_rx_buffer 000001cc  00000000  00000000  0000629e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .ctors        00000002  00000000  00000000  0000646a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 31 .bss.rx_buffer 00000044  00000000  00000000  0000646c  2**0
                  ALLOC
 32 .bss.tx_buffer 00000044  00000000  00000000  0000646c  2**0
                  ALLOC
 33 .bss.rx_buffer1 00000044  00000000  00000000  0000646c  2**0
                  ALLOC
 34 .bss.tx_buffer1 00000044  00000000  00000000  0000646c  2**0
                  ALLOC
 35 .bss.rx_buffer2 00000044  00000000  00000000  0000646c  2**0
                  ALLOC
 36 .bss.tx_buffer2 00000044  00000000  00000000  0000646c  2**0
                  ALLOC
 37 .bss.rx_buffer3 00000044  00000000  00000000  0000646c  2**0
                  ALLOC
 38 .bss.tx_buffer3 00000044  00000000  00000000  0000646c  2**0
                  ALLOC
 39 .bss.Serial   00000022  00000000  00000000  0000646c  2**0
                  ALLOC
 40 .bss.Serial1  00000022  00000000  00000000  0000646c  2**0
                  ALLOC
 41 .bss.Serial2  00000022  00000000  00000000  0000646c  2**0
                  ALLOC
 42 .bss.Serial3  00000022  00000000  00000000  0000646c  2**0
                  ALLOC
 43 .rodata._ZTV14HardwareSerial 00000010  00000000  00000000  0000646c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 44 .rodata._ZTV6Stream 00000010  00000000  00000000  0000647c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Disassembly of section .text._ZN14HardwareSerial9availableEv:

00000000 <_ZN14HardwareSerial9availableEv>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	fc 01       	movw	r30, r24
   2:	84 85       	ldd	r24, Z+12	; 0x0c
   4:	95 85       	ldd	r25, Z+13	; 0x0d
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   6:	fc 01       	movw	r30, r24
   8:	e0 5c       	subi	r30, 0xC0	; 192
   a:	ff 4f       	sbci	r31, 0xFF	; 255
   c:	20 81       	ld	r18, Z
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   e:	31 81       	ldd	r19, Z+1	; 0x01
  10:	8e 5b       	subi	r24, 0xBE	; 190
  12:	9f 4f       	sbci	r25, 0xFF	; 255
  14:	fc 01       	movw	r30, r24
  16:	80 81       	ld	r24, Z
  18:	91 81       	ldd	r25, Z+1	; 0x01
  1a:	28 1b       	sub	r18, r24
  1c:	39 0b       	sbc	r19, r25
  1e:	2f 73       	andi	r18, 0x3F	; 63
  20:	30 70       	andi	r19, 0x00	; 0
  22:	c9 01       	movw	r24, r18
  24:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial4peekEv:

00000000 <_ZN14HardwareSerial4peekEv>:
   0:	fc 01       	movw	r30, r24
   2:	84 85       	ldd	r24, Z+12	; 0x0c
   4:	95 85       	ldd	r25, Z+13	; 0x0d
   6:	fc 01       	movw	r30, r24
   8:	e0 5c       	subi	r30, 0xC0	; 192
   a:	ff 4f       	sbci	r31, 0xFF	; 255
   c:	40 81       	ld	r20, Z
   e:	51 81       	ldd	r21, Z+1	; 0x01
  10:	fc 01       	movw	r30, r24
  12:	ee 5b       	subi	r30, 0xBE	; 190
  14:	ff 4f       	sbci	r31, 0xFF	; 255
  16:	20 81       	ld	r18, Z
  18:	31 81       	ldd	r19, Z+1	; 0x01
  1a:	42 17       	cp	r20, r18
  1c:	53 07       	cpc	r21, r19
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN14HardwareSerial4peekEv+0x20>
  20:	01 90       	ld	r0, Z+
  22:	f0 81       	ld	r31, Z
  24:	e0 2d       	mov	r30, r0

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  26:	e8 0f       	add	r30, r24
  28:	f9 1f       	adc	r31, r25
  2a:	20 81       	ld	r18, Z
  2c:	30 e0       	ldi	r19, 0x00	; 0
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZN14HardwareSerial4peekEv+0x30>
  30:	2f ef       	ldi	r18, 0xFF	; 255
{
  _rx_buffer = rx_buffer;
  32:	3f ef       	ldi	r19, 0xFF	; 255
  34:	c9 01       	movw	r24, r18
  36:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial4readEv:

00000000 <_ZN14HardwareSerial4readEv>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	fc 01       	movw	r30, r24
   2:	84 85       	ldd	r24, Z+12	; 0x0c
   4:	95 85       	ldd	r25, Z+13	; 0x0d
   6:	fc 01       	movw	r30, r24
   8:	e0 5c       	subi	r30, 0xC0	; 192
   a:	ff 4f       	sbci	r31, 0xFF	; 255
   c:	40 81       	ld	r20, Z
   e:	51 81       	ldd	r21, Z+1	; 0x01
  10:	fc 01       	movw	r30, r24
  12:	ee 5b       	subi	r30, 0xBE	; 190
  14:	ff 4f       	sbci	r31, 0xFF	; 255
  16:	20 81       	ld	r18, Z
  18:	31 81       	ldd	r19, Z+1	; 0x01
  1a:	42 17       	cp	r20, r18
  1c:	53 07       	cpc	r21, r19
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN14HardwareSerial4readEv+0x20>
  20:	a0 81       	ld	r26, Z
  22:	b1 81       	ldd	r27, Z+1	; 0x01
  24:	a8 0f       	add	r26, r24

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  26:	b9 1f       	adc	r27, r25
  28:	2c 91       	ld	r18, X
  2a:	80 81       	ld	r24, Z
  2c:	91 81       	ldd	r25, Z+1	; 0x01
  2e:	01 96       	adiw	r24, 0x01	; 1
  30:	8f 73       	andi	r24, 0x3F	; 63
{
  _rx_buffer = rx_buffer;
  32:	90 70       	andi	r25, 0x00	; 0
  34:	91 83       	std	Z+1, r25	; 0x01
  36:	80 83       	st	Z, r24
  38:	30 e0       	ldi	r19, 0x00	; 0
  _tx_buffer = tx_buffer;
  3a:	00 c0       	rjmp	.+0      	; 0x3c <_ZN14HardwareSerial4readEv+0x3c>
  3c:	2f ef       	ldi	r18, 0xFF	; 255
  3e:	3f ef       	ldi	r19, 0xFF	; 255
  40:	c9 01       	movw	r24, r18
  _ubrrh = ubrrh;
  42:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5flushEv:

00000000 <_ZN14HardwareSerial5flushEv>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	fc 01       	movw	r30, r24
   2:	81 a1       	ldd	r24, Z+33	; 0x21
   4:	88 23       	and	r24, r24
   6:	01 f0       	breq	.+0      	; 0x8 <_ZN14HardwareSerial5flushEv+0x8>
   8:	a4 89       	ldd	r26, Z+20	; 0x14
   a:	b5 89       	ldd	r27, Z+21	; 0x15
   c:	8c 91       	ld	r24, X
   e:	86 ff       	sbrs	r24, 6
  10:	00 c0       	rjmp	.+0      	; 0x12 <_ZN14HardwareSerial5flushEv+0x12>
  12:	11 a2       	std	Z+33, r1	; 0x21
  14:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5writeEh:

00000000 <_ZN14HardwareSerial5writeEh>:
   0:	fc 01       	movw	r30, r24
   2:	26 85       	ldd	r18, Z+14	; 0x0e
   4:	37 85       	ldd	r19, Z+15	; 0x0f
   6:	d9 01       	movw	r26, r18
   8:	a0 5c       	subi	r26, 0xC0	; 192
   a:	bf 4f       	sbci	r27, 0xFF	; 255
   c:	8d 91       	ld	r24, X+
   e:	9c 91       	ld	r25, X
  10:	01 96       	adiw	r24, 0x01	; 1
  12:	8f 73       	andi	r24, 0x3F	; 63
  14:	90 70       	andi	r25, 0x00	; 0
  16:	d9 01       	movw	r26, r18
  18:	ae 5b       	subi	r26, 0xBE	; 190
  1a:	bf 4f       	sbci	r27, 0xFF	; 255
  1c:	4d 91       	ld	r20, X+
  1e:	5c 91       	ld	r21, X
  20:	11 97       	sbiw	r26, 0x01	; 1
  22:	84 17       	cp	r24, r20
  24:	95 07       	cpc	r25, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  26:	01 f0       	breq	.+0      	; 0x28 <_ZN14HardwareSerial5writeEh+0x28>
  28:	d9 01       	movw	r26, r18
  2a:	a0 5c       	subi	r26, 0xC0	; 192
  2c:	bf 4f       	sbci	r27, 0xFF	; 255
  2e:	0d 90       	ld	r0, X+
  30:	bc 91       	ld	r27, X
{
  _rx_buffer = rx_buffer;
  32:	a0 2d       	mov	r26, r0
  34:	a2 0f       	add	r26, r18
  36:	b3 1f       	adc	r27, r19
  38:	6c 93       	st	X, r22
  _tx_buffer = tx_buffer;
  3a:	a6 85       	ldd	r26, Z+14	; 0x0e
  3c:	b7 85       	ldd	r27, Z+15	; 0x0f
  3e:	a0 5c       	subi	r26, 0xC0	; 192
  40:	bf 4f       	sbci	r27, 0xFF	; 255
  _ubrrh = ubrrh;
  42:	11 96       	adiw	r26, 0x01	; 1
  44:	9c 93       	st	X, r25
  46:	8e 93       	st	-X, r24
  48:	a6 89       	ldd	r26, Z+22	; 0x16
  _ubrrl = ubrrl;
  4a:	b7 89       	ldd	r27, Z+23	; 0x17
  4c:	2c 91       	ld	r18, X
  4e:	81 e0       	ldi	r24, 0x01	; 1
  50:	90 e0       	ldi	r25, 0x00	; 0
  _ucsra = ucsra;
  52:	07 8c       	ldd	r0, Z+31	; 0x1f
  54:	00 c0       	rjmp	.+0      	; 0x56 <_ZN14HardwareSerial5writeEh+0x56>
  56:	88 0f       	add	r24, r24
  58:	99 1f       	adc	r25, r25
  _ucsrb = ucsrb;
  5a:	0a 94       	dec	r0
  5c:	02 f4       	brpl	.+0      	; 0x5e <_ZN14HardwareSerial5writeEh+0x5e>
  5e:	28 2b       	or	r18, r24
  60:	2c 93       	st	X, r18
  _ucsrc = ucsrc;
  62:	81 e0       	ldi	r24, 0x01	; 1
  64:	81 a3       	std	Z+33, r24	; 0x21
  66:	04 88       	ldd	r0, Z+20	; 0x14
  68:	f5 89       	ldd	r31, Z+21	; 0x15
  _udr = udr;
  6a:	e0 2d       	mov	r30, r0
  6c:	80 81       	ld	r24, Z
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	80 83       	st	Z, r24
  _rxen = rxen;
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	90 e0       	ldi	r25, 0x00	; 0
  _txen = txen;
  76:	08 95       	ret

Disassembly of section .text._Z10store_charhP11ring_buffer:

00000000 <_Z10store_charhP11ring_buffer>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	fb 01       	movw	r30, r22
   2:	e0 5c       	subi	r30, 0xC0	; 192
   4:	ff 4f       	sbci	r31, 0xFF	; 255
   6:	20 81       	ld	r18, Z
   8:	31 81       	ldd	r19, Z+1	; 0x01
   a:	2f 5f       	subi	r18, 0xFF	; 255
   c:	3f 4f       	sbci	r19, 0xFF	; 255
   e:	2f 73       	andi	r18, 0x3F	; 63
  10:	30 70       	andi	r19, 0x00	; 0
  12:	db 01       	movw	r26, r22
  14:	ae 5b       	subi	r26, 0xBE	; 190
  16:	bf 4f       	sbci	r27, 0xFF	; 255
  18:	4d 91       	ld	r20, X+
  1a:	5c 91       	ld	r21, X
  1c:	11 97       	sbiw	r26, 0x01	; 1
  1e:	24 17       	cp	r18, r20
  20:	35 07       	cpc	r19, r21
  22:	01 f0       	breq	.+0      	; 0x24 <_Z10store_charhP11ring_buffer+0x24>
  24:	a0 81       	ld	r26, Z

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  26:	b1 81       	ldd	r27, Z+1	; 0x01
  28:	a6 0f       	add	r26, r22
  2a:	b7 1f       	adc	r27, r23
  2c:	8c 93       	st	X, r24
  2e:	31 83       	std	Z+1, r19	; 0x01
  30:	20 83       	st	Z, r18
{
  _rx_buffer = rx_buffer;
  32:	08 95       	ret

Disassembly of section .text._Z11serialEventv:

00000000 <_Z11serialEventv>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	08 95       	ret

Disassembly of section .text.__vector_25:

00000000 <__vector_25>:
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  26:	80 91 c0 00 	lds	r24, 0x00C0
  2a:	82 fd       	sbrc	r24, 2
  2c:	00 c0       	rjmp	.+0      	; 0x2e <__vector_25+0x2e>
  2e:	80 91 c6 00 	lds	r24, 0x00C6
{
  _rx_buffer = rx_buffer;
  32:	60 e0       	ldi	r22, 0x00	; 0
  34:	70 e0       	ldi	r23, 0x00	; 0
  36:	0e 94 00 00 	call	0	; 0x0 <__vector_25>
  _tx_buffer = tx_buffer;
  3a:	00 c0       	rjmp	.+0      	; 0x3c <__vector_25+0x3c>
  3c:	80 91 c6 00 	lds	r24, 0x00C6
  40:	ff 91       	pop	r31
  _ubrrh = ubrrh;
  42:	ef 91       	pop	r30
  44:	bf 91       	pop	r27
  46:	af 91       	pop	r26
  48:	9f 91       	pop	r25
  _ubrrl = ubrrl;
  4a:	8f 91       	pop	r24
  4c:	7f 91       	pop	r23
  4e:	6f 91       	pop	r22
  50:	5f 91       	pop	r21
  _ucsra = ucsra;
  52:	4f 91       	pop	r20
  54:	3f 91       	pop	r19
  56:	2f 91       	pop	r18
  58:	0f 90       	pop	r0
  _ucsrb = ucsrb;
  5a:	0b be       	out	0x3b, r0	; 59
  5c:	0f 90       	pop	r0
  5e:	0f be       	out	0x3f, r0	; 63
  60:	0f 90       	pop	r0
  _ucsrc = ucsrc;
  62:	1f 90       	pop	r1
  64:	18 95       	reti

Disassembly of section .text._Z12serialEvent1v:

00000000 <_Z12serialEvent1v>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	08 95       	ret

Disassembly of section .text.__vector_36:

00000000 <__vector_36>:
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  26:	80 91 c8 00 	lds	r24, 0x00C8
  2a:	82 fd       	sbrc	r24, 2
  2c:	00 c0       	rjmp	.+0      	; 0x2e <__vector_36+0x2e>
  2e:	80 91 ce 00 	lds	r24, 0x00CE
{
  _rx_buffer = rx_buffer;
  32:	60 e0       	ldi	r22, 0x00	; 0
  34:	70 e0       	ldi	r23, 0x00	; 0
  36:	0e 94 00 00 	call	0	; 0x0 <__vector_36>
  _tx_buffer = tx_buffer;
  3a:	00 c0       	rjmp	.+0      	; 0x3c <__vector_36+0x3c>
  3c:	80 91 ce 00 	lds	r24, 0x00CE
  40:	ff 91       	pop	r31
  _ubrrh = ubrrh;
  42:	ef 91       	pop	r30
  44:	bf 91       	pop	r27
  46:	af 91       	pop	r26
  48:	9f 91       	pop	r25
  _ubrrl = ubrrl;
  4a:	8f 91       	pop	r24
  4c:	7f 91       	pop	r23
  4e:	6f 91       	pop	r22
  50:	5f 91       	pop	r21
  _ucsra = ucsra;
  52:	4f 91       	pop	r20
  54:	3f 91       	pop	r19
  56:	2f 91       	pop	r18
  58:	0f 90       	pop	r0
  _ucsrb = ucsrb;
  5a:	0b be       	out	0x3b, r0	; 59
  5c:	0f 90       	pop	r0
  5e:	0f be       	out	0x3f, r0	; 63
  60:	0f 90       	pop	r0
  _ucsrc = ucsrc;
  62:	1f 90       	pop	r1
  64:	18 95       	reti

Disassembly of section .text._Z12serialEvent2v:

00000000 <_Z12serialEvent2v>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	08 95       	ret

Disassembly of section .text.__vector_51:

00000000 <__vector_51>:
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  26:	80 91 d0 00 	lds	r24, 0x00D0
  2a:	82 fd       	sbrc	r24, 2
  2c:	00 c0       	rjmp	.+0      	; 0x2e <__vector_51+0x2e>
  2e:	80 91 d6 00 	lds	r24, 0x00D6
{
  _rx_buffer = rx_buffer;
  32:	60 e0       	ldi	r22, 0x00	; 0
  34:	70 e0       	ldi	r23, 0x00	; 0
  36:	0e 94 00 00 	call	0	; 0x0 <__vector_51>
  _tx_buffer = tx_buffer;
  3a:	00 c0       	rjmp	.+0      	; 0x3c <__vector_51+0x3c>
  3c:	80 91 d6 00 	lds	r24, 0x00D6
  40:	ff 91       	pop	r31
  _ubrrh = ubrrh;
  42:	ef 91       	pop	r30
  44:	bf 91       	pop	r27
  46:	af 91       	pop	r26
  48:	9f 91       	pop	r25
  _ubrrl = ubrrl;
  4a:	8f 91       	pop	r24
  4c:	7f 91       	pop	r23
  4e:	6f 91       	pop	r22
  50:	5f 91       	pop	r21
  _ucsra = ucsra;
  52:	4f 91       	pop	r20
  54:	3f 91       	pop	r19
  56:	2f 91       	pop	r18
  58:	0f 90       	pop	r0
  _ucsrb = ucsrb;
  5a:	0b be       	out	0x3b, r0	; 59
  5c:	0f 90       	pop	r0
  5e:	0f be       	out	0x3f, r0	; 63
  60:	0f 90       	pop	r0
  _ucsrc = ucsrc;
  62:	1f 90       	pop	r1
  64:	18 95       	reti

Disassembly of section .text._Z12serialEvent3v:

00000000 <_Z12serialEvent3v>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	08 95       	ret

Disassembly of section .text.__vector_54:

00000000 <__vector_54>:
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  26:	80 91 30 01 	lds	r24, 0x0130
  2a:	82 fd       	sbrc	r24, 2
  2c:	00 c0       	rjmp	.+0      	; 0x2e <__vector_54+0x2e>
  2e:	80 91 36 01 	lds	r24, 0x0136
{
  _rx_buffer = rx_buffer;
  32:	60 e0       	ldi	r22, 0x00	; 0
  34:	70 e0       	ldi	r23, 0x00	; 0
  36:	0e 94 00 00 	call	0	; 0x0 <__vector_54>
  _tx_buffer = tx_buffer;
  3a:	00 c0       	rjmp	.+0      	; 0x3c <__vector_54+0x3c>
  3c:	80 91 36 01 	lds	r24, 0x0136
  40:	ff 91       	pop	r31
  _ubrrh = ubrrh;
  42:	ef 91       	pop	r30
  44:	bf 91       	pop	r27
  46:	af 91       	pop	r26
  48:	9f 91       	pop	r25
  _ubrrl = ubrrl;
  4a:	8f 91       	pop	r24
  4c:	7f 91       	pop	r23
  4e:	6f 91       	pop	r22
  50:	5f 91       	pop	r21
  _ucsra = ucsra;
  52:	4f 91       	pop	r20
  54:	3f 91       	pop	r19
  56:	2f 91       	pop	r18
  58:	0f 90       	pop	r0
  _ucsrb = ucsrb;
  5a:	0b be       	out	0x3b, r0	; 59
  5c:	0f 90       	pop	r0
  5e:	0f be       	out	0x3f, r0	; 63
  60:	0f 90       	pop	r0
  _ucsrc = ucsrc;
  62:	1f 90       	pop	r1
  64:	18 95       	reti

Disassembly of section .text._Z14serialEventRunv:

00000000 <_Z14serialEventRunv>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	80 e0       	ldi	r24, 0x00	; 0
   2:	90 e0       	ldi	r25, 0x00	; 0
   4:	0e 94 00 00 	call	0	; 0x0 <_Z14serialEventRunv>
   8:	00 97       	sbiw	r24, 0x00	; 0
   a:	01 f0       	breq	.+0      	; 0xc <_Z14serialEventRunv+0xc>
   c:	0e 94 00 00 	call	0	; 0x0 <_Z14serialEventRunv>
  10:	80 e0       	ldi	r24, 0x00	; 0
  12:	90 e0       	ldi	r25, 0x00	; 0
  14:	0e 94 00 00 	call	0	; 0x0 <_Z14serialEventRunv>
  18:	00 97       	sbiw	r24, 0x00	; 0
  1a:	01 f0       	breq	.+0      	; 0x1c <_Z14serialEventRunv+0x1c>
  1c:	0e 94 00 00 	call	0	; 0x0 <_Z14serialEventRunv>
  20:	80 e0       	ldi	r24, 0x00	; 0
  22:	90 e0       	ldi	r25, 0x00	; 0
  24:	0e 94 00 00 	call	0	; 0x0 <_Z14serialEventRunv>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  28:	00 97       	sbiw	r24, 0x00	; 0
  2a:	01 f0       	breq	.+0      	; 0x2c <_Z14serialEventRunv+0x2c>
  2c:	0e 94 00 00 	call	0	; 0x0 <_Z14serialEventRunv>
  30:	80 e0       	ldi	r24, 0x00	; 0
{
  _rx_buffer = rx_buffer;
  32:	90 e0       	ldi	r25, 0x00	; 0
  34:	0e 94 00 00 	call	0	; 0x0 <_Z14serialEventRunv>
  38:	00 97       	sbiw	r24, 0x00	; 0
  _tx_buffer = tx_buffer;
  3a:	01 f0       	breq	.+0      	; 0x3c <_Z14serialEventRunv+0x3c>
  3c:	0e 94 00 00 	call	0	; 0x0 <_Z14serialEventRunv>
  40:	08 95       	ret

Disassembly of section .text.__vector_26:

00000000 <__vector_26>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	8f 93       	push	r24
  14:	9f 93       	push	r25
  16:	ef 93       	push	r30
  18:	ff 93       	push	r31
  1a:	20 91 00 00 	lds	r18, 0x0000
  1e:	30 91 00 00 	lds	r19, 0x0000
  22:	80 91 00 00 	lds	r24, 0x0000

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  26:	90 91 00 00 	lds	r25, 0x0000
  2a:	28 17       	cp	r18, r24
  2c:	39 07       	cpc	r19, r25
  2e:	01 f4       	brne	.+0      	; 0x30 <__vector_26+0x30>
  30:	80 91 c1 00 	lds	r24, 0x00C1
{
  _rx_buffer = rx_buffer;
  34:	8f 7d       	andi	r24, 0xDF	; 223
  36:	80 93 c1 00 	sts	0x00C1, r24
  _tx_buffer = tx_buffer;
  3a:	00 c0       	rjmp	.+0      	; 0x3c <__vector_26+0x3c>
  3c:	e0 91 00 00 	lds	r30, 0x0000
  40:	f0 91 00 00 	lds	r31, 0x0000
  _ubrrh = ubrrh;
  44:	e0 50       	subi	r30, 0x00	; 0
  46:	f0 40       	sbci	r31, 0x00	; 0
  48:	20 81       	ld	r18, Z
  _ubrrl = ubrrl;
  4a:	80 91 00 00 	lds	r24, 0x0000
  4e:	90 91 00 00 	lds	r25, 0x0000
  _ucsra = ucsra;
  52:	01 96       	adiw	r24, 0x01	; 1
  54:	8f 73       	andi	r24, 0x3F	; 63
  56:	90 70       	andi	r25, 0x00	; 0
  58:	90 93 00 00 	sts	0x0000, r25
  _ucsrb = ucsrb;
  5c:	80 93 00 00 	sts	0x0000, r24
  60:	20 93 c6 00 	sts	0x00C6, r18
  _ucsrc = ucsrc;
  64:	ff 91       	pop	r31
  66:	ef 91       	pop	r30
  68:	9f 91       	pop	r25
  _udr = udr;
  6a:	8f 91       	pop	r24
  6c:	3f 91       	pop	r19
  6e:	2f 91       	pop	r18
  70:	0f 90       	pop	r0
  _rxen = rxen;
  72:	0b be       	out	0x3b, r0	; 59
  74:	0f 90       	pop	r0
  _txen = txen;
  76:	0f be       	out	0x3f, r0	; 63
  78:	0f 90       	pop	r0
  _rxcie = rxcie;
  7a:	1f 90       	pop	r1
  7c:	18 95       	reti

Disassembly of section .text.__vector_37:

00000000 <__vector_37>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	8f 93       	push	r24
  14:	9f 93       	push	r25
  16:	ef 93       	push	r30
  18:	ff 93       	push	r31
  1a:	20 91 00 00 	lds	r18, 0x0000
  1e:	30 91 00 00 	lds	r19, 0x0000
  22:	80 91 00 00 	lds	r24, 0x0000

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  26:	90 91 00 00 	lds	r25, 0x0000
  2a:	28 17       	cp	r18, r24
  2c:	39 07       	cpc	r19, r25
  2e:	01 f4       	brne	.+0      	; 0x30 <__vector_37+0x30>
  30:	80 91 c9 00 	lds	r24, 0x00C9
{
  _rx_buffer = rx_buffer;
  34:	8f 7d       	andi	r24, 0xDF	; 223
  36:	80 93 c9 00 	sts	0x00C9, r24
  _tx_buffer = tx_buffer;
  3a:	00 c0       	rjmp	.+0      	; 0x3c <__vector_37+0x3c>
  3c:	e0 91 00 00 	lds	r30, 0x0000
  40:	f0 91 00 00 	lds	r31, 0x0000
  _ubrrh = ubrrh;
  44:	e0 50       	subi	r30, 0x00	; 0
  46:	f0 40       	sbci	r31, 0x00	; 0
  48:	20 81       	ld	r18, Z
  _ubrrl = ubrrl;
  4a:	80 91 00 00 	lds	r24, 0x0000
  4e:	90 91 00 00 	lds	r25, 0x0000
  _ucsra = ucsra;
  52:	01 96       	adiw	r24, 0x01	; 1
  54:	8f 73       	andi	r24, 0x3F	; 63
  56:	90 70       	andi	r25, 0x00	; 0
  58:	90 93 00 00 	sts	0x0000, r25
  _ucsrb = ucsrb;
  5c:	80 93 00 00 	sts	0x0000, r24
  60:	20 93 ce 00 	sts	0x00CE, r18
  _ucsrc = ucsrc;
  64:	ff 91       	pop	r31
  66:	ef 91       	pop	r30
  68:	9f 91       	pop	r25
  _udr = udr;
  6a:	8f 91       	pop	r24
  6c:	3f 91       	pop	r19
  6e:	2f 91       	pop	r18
  70:	0f 90       	pop	r0
  _rxen = rxen;
  72:	0b be       	out	0x3b, r0	; 59
  74:	0f 90       	pop	r0
  _txen = txen;
  76:	0f be       	out	0x3f, r0	; 63
  78:	0f 90       	pop	r0
  _rxcie = rxcie;
  7a:	1f 90       	pop	r1
  7c:	18 95       	reti

Disassembly of section .text.__vector_52:

00000000 <__vector_52>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	8f 93       	push	r24
  14:	9f 93       	push	r25
  16:	ef 93       	push	r30
  18:	ff 93       	push	r31
  1a:	20 91 00 00 	lds	r18, 0x0000
  1e:	30 91 00 00 	lds	r19, 0x0000
  22:	80 91 00 00 	lds	r24, 0x0000

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  26:	90 91 00 00 	lds	r25, 0x0000
  2a:	28 17       	cp	r18, r24
  2c:	39 07       	cpc	r19, r25
  2e:	01 f4       	brne	.+0      	; 0x30 <__vector_52+0x30>
  30:	80 91 d1 00 	lds	r24, 0x00D1
{
  _rx_buffer = rx_buffer;
  34:	8f 7d       	andi	r24, 0xDF	; 223
  36:	80 93 d1 00 	sts	0x00D1, r24
  _tx_buffer = tx_buffer;
  3a:	00 c0       	rjmp	.+0      	; 0x3c <__vector_52+0x3c>
  3c:	e0 91 00 00 	lds	r30, 0x0000
  40:	f0 91 00 00 	lds	r31, 0x0000
  _ubrrh = ubrrh;
  44:	e0 50       	subi	r30, 0x00	; 0
  46:	f0 40       	sbci	r31, 0x00	; 0
  48:	20 81       	ld	r18, Z
  _ubrrl = ubrrl;
  4a:	80 91 00 00 	lds	r24, 0x0000
  4e:	90 91 00 00 	lds	r25, 0x0000
  _ucsra = ucsra;
  52:	01 96       	adiw	r24, 0x01	; 1
  54:	8f 73       	andi	r24, 0x3F	; 63
  56:	90 70       	andi	r25, 0x00	; 0
  58:	90 93 00 00 	sts	0x0000, r25
  _ucsrb = ucsrb;
  5c:	80 93 00 00 	sts	0x0000, r24
  60:	20 93 d6 00 	sts	0x00D6, r18
  _ucsrc = ucsrc;
  64:	ff 91       	pop	r31
  66:	ef 91       	pop	r30
  68:	9f 91       	pop	r25
  _udr = udr;
  6a:	8f 91       	pop	r24
  6c:	3f 91       	pop	r19
  6e:	2f 91       	pop	r18
  70:	0f 90       	pop	r0
  _rxen = rxen;
  72:	0b be       	out	0x3b, r0	; 59
  74:	0f 90       	pop	r0
  _txen = txen;
  76:	0f be       	out	0x3f, r0	; 63
  78:	0f 90       	pop	r0
  _rxcie = rxcie;
  7a:	1f 90       	pop	r1
  7c:	18 95       	reti

Disassembly of section .text.__vector_55:

00000000 <__vector_55>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	8f 93       	push	r24
  14:	9f 93       	push	r25
  16:	ef 93       	push	r30
  18:	ff 93       	push	r31
  1a:	20 91 00 00 	lds	r18, 0x0000
  1e:	30 91 00 00 	lds	r19, 0x0000
  22:	80 91 00 00 	lds	r24, 0x0000

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  26:	90 91 00 00 	lds	r25, 0x0000
  2a:	28 17       	cp	r18, r24
  2c:	39 07       	cpc	r19, r25
  2e:	01 f4       	brne	.+0      	; 0x30 <__vector_55+0x30>
  30:	80 91 31 01 	lds	r24, 0x0131
{
  _rx_buffer = rx_buffer;
  34:	8f 7d       	andi	r24, 0xDF	; 223
  36:	80 93 31 01 	sts	0x0131, r24
  _tx_buffer = tx_buffer;
  3a:	00 c0       	rjmp	.+0      	; 0x3c <__vector_55+0x3c>
  3c:	e0 91 00 00 	lds	r30, 0x0000
  40:	f0 91 00 00 	lds	r31, 0x0000
  _ubrrh = ubrrh;
  44:	e0 50       	subi	r30, 0x00	; 0
  46:	f0 40       	sbci	r31, 0x00	; 0
  48:	20 81       	ld	r18, Z
  _ubrrl = ubrrl;
  4a:	80 91 00 00 	lds	r24, 0x0000
  4e:	90 91 00 00 	lds	r25, 0x0000
  _ucsra = ucsra;
  52:	01 96       	adiw	r24, 0x01	; 1
  54:	8f 73       	andi	r24, 0x3F	; 63
  56:	90 70       	andi	r25, 0x00	; 0
  58:	90 93 00 00 	sts	0x0000, r25
  _ucsrb = ucsrb;
  5c:	80 93 00 00 	sts	0x0000, r24
  60:	20 93 36 01 	sts	0x0136, r18
  _ucsrc = ucsrc;
  64:	ff 91       	pop	r31
  66:	ef 91       	pop	r30
  68:	9f 91       	pop	r25
  _udr = udr;
  6a:	8f 91       	pop	r24
  6c:	3f 91       	pop	r19
  6e:	2f 91       	pop	r18
  70:	0f 90       	pop	r0
  _rxen = rxen;
  72:	0b be       	out	0x3b, r0	; 59
  74:	0f 90       	pop	r0
  _txen = txen;
  76:	0f be       	out	0x3f, r0	; 63
  78:	0f 90       	pop	r0
  _rxcie = rxcie;
  7a:	1f 90       	pop	r1
  7c:	18 95       	reti

Disassembly of section .text._ZN14HardwareSerialC2EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh:

00000000 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	df 93       	push	r29
  16:	cf 93       	push	r28
  18:	cd b7       	in	r28, 0x3d	; 61
  1a:	de b7       	in	r29, 0x3e	; 62
  1c:	fc 01       	movw	r30, r24
  1e:	13 82       	std	Z+3, r1	; 0x03
  20:	12 82       	std	Z+2, r1	; 0x02
  22:	88 ee       	ldi	r24, 0xE8	; 232
  24:	93 e0       	ldi	r25, 0x03	; 3

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  26:	a0 e0       	ldi	r26, 0x00	; 0
  28:	b0 e0       	ldi	r27, 0x00	; 0
  2a:	84 83       	std	Z+4, r24	; 0x04
  2c:	95 83       	std	Z+5, r25	; 0x05
  2e:	a6 83       	std	Z+6, r26	; 0x06
  30:	b7 83       	std	Z+7, r27	; 0x07
{
  _rx_buffer = rx_buffer;
  32:	80 e0       	ldi	r24, 0x00	; 0
  34:	90 e0       	ldi	r25, 0x00	; 0
  36:	91 83       	std	Z+1, r25	; 0x01
  38:	80 83       	st	Z, r24
  _tx_buffer = tx_buffer;
  3a:	75 87       	std	Z+13, r23	; 0x0d
  3c:	64 87       	std	Z+12, r22	; 0x0c
  3e:	57 87       	std	Z+15, r21	; 0x0f
  40:	46 87       	std	Z+14, r20	; 0x0e
  _ubrrh = ubrrh;
  42:	31 8b       	std	Z+17, r19	; 0x11
  44:	20 8b       	std	Z+16, r18	; 0x10
  46:	13 8b       	std	Z+19, r17	; 0x13
  48:	02 8b       	std	Z+18, r16	; 0x12
  _ubrrl = ubrrl;
  4a:	f5 8a       	std	Z+21, r15	; 0x15
  4c:	e4 8a       	std	Z+20, r14	; 0x14
  4e:	d7 8a       	std	Z+23, r13	; 0x17
  50:	c6 8a       	std	Z+22, r12	; 0x16
  _ucsra = ucsra;
  52:	b1 8e       	std	Z+25, r11	; 0x19
  54:	a0 8e       	std	Z+24, r10	; 0x18
  56:	93 8e       	std	Z+27, r9	; 0x1b
  58:	82 8e       	std	Z+26, r8	; 0x1a
  _ucsrb = ucsrb;
  5a:	88 89       	ldd	r24, Y+16	; 0x10
  5c:	84 8f       	std	Z+28, r24	; 0x1c
  5e:	89 89       	ldd	r24, Y+17	; 0x11
  60:	85 8f       	std	Z+29, r24	; 0x1d
  _ucsrc = ucsrc;
  62:	8a 89       	ldd	r24, Y+18	; 0x12
  64:	86 8f       	std	Z+30, r24	; 0x1e
  66:	8b 89       	ldd	r24, Y+19	; 0x13
  68:	87 8f       	std	Z+31, r24	; 0x1f
  _udr = udr;
  6a:	8c 89       	ldd	r24, Y+20	; 0x14
  6c:	80 a3       	std	Z+32, r24	; 0x20
  6e:	cf 91       	pop	r28
  70:	df 91       	pop	r29
  _rxen = rxen;
  72:	1f 91       	pop	r17
  74:	0f 91       	pop	r16
  _txen = txen;
  76:	ff 90       	pop	r15
  78:	ef 90       	pop	r14
  _rxcie = rxcie;
  7a:	df 90       	pop	r13
  7c:	cf 90       	pop	r12
  _udrie = udrie;
  7e:	bf 90       	pop	r11
  80:	af 90       	pop	r10
  _u2x = u2x;
  82:	9f 90       	pop	r9
  84:	8f 90       	pop	r8
  86:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5beginEm:

00000000 <_ZN14HardwareSerial5beginEm>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	df 92       	push	r13
   2:	ef 92       	push	r14
   4:	ff 92       	push	r15
   6:	0f 93       	push	r16
   8:	1f 93       	push	r17
   a:	cf 93       	push	r28
   c:	df 93       	push	r29
   e:	ec 01       	movw	r28, r24
  10:	7a 01       	movw	r14, r20
  12:	8b 01       	movw	r16, r22
  14:	dd 24       	eor	r13, r13
  16:	d3 94       	inc	r13
  18:	40 30       	cpi	r20, 0x00	; 0
  1a:	81 ee       	ldi	r24, 0xE1	; 225
  1c:	58 07       	cpc	r21, r24
  1e:	80 e0       	ldi	r24, 0x00	; 0
  20:	68 07       	cpc	r22, r24
  22:	80 e0       	ldi	r24, 0x00	; 0
  24:	78 07       	cpc	r23, r24

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  26:	01 f4       	brne	.+0      	; 0x28 <_ZN14HardwareSerial5beginEm+0x28>
  28:	dd 24       	eor	r13, r13
  2a:	ec 89       	ldd	r30, Y+20	; 0x14
  2c:	fd 89       	ldd	r31, Y+21	; 0x15
  2e:	10 82       	st	Z, r1
  30:	60 e8       	ldi	r22, 0x80	; 128
{
  _rx_buffer = rx_buffer;
  32:	74 e8       	ldi	r23, 0x84	; 132
  34:	8e e1       	ldi	r24, 0x1E	; 30
  36:	90 e0       	ldi	r25, 0x00	; 0
  38:	00 c0       	rjmp	.+0      	; 0x3a <_ZN14HardwareSerial5beginEm+0x3a>
  _tx_buffer = tx_buffer;
  3a:	ec 89       	ldd	r30, Y+20	; 0x14
  3c:	fd 89       	ldd	r31, Y+21	; 0x15
  3e:	81 e0       	ldi	r24, 0x01	; 1
  40:	90 e0       	ldi	r25, 0x00	; 0
  _ubrrh = ubrrh;
  42:	08 a0       	ldd	r0, Y+32	; 0x20
  44:	00 c0       	rjmp	.+0      	; 0x46 <_ZN14HardwareSerial5beginEm+0x46>
  46:	88 0f       	add	r24, r24
  48:	99 1f       	adc	r25, r25
  _ubrrl = ubrrl;
  4a:	0a 94       	dec	r0
  4c:	02 f4       	brpl	.+0      	; 0x4e <_ZN14HardwareSerial5beginEm+0x4e>
  4e:	80 83       	st	Z, r24
  50:	60 e0       	ldi	r22, 0x00	; 0
  _ucsra = ucsra;
  52:	79 e0       	ldi	r23, 0x09	; 9
  54:	8d e3       	ldi	r24, 0x3D	; 61
  56:	90 e0       	ldi	r25, 0x00	; 0
  58:	a8 01       	movw	r20, r16
  _ucsrb = ucsrb;
  5a:	97 01       	movw	r18, r14
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN14HardwareSerial5beginEm>
  60:	21 50       	subi	r18, 0x01	; 1
  _ucsrc = ucsrc;
  62:	30 40       	sbci	r19, 0x00	; 0
  64:	40 40       	sbci	r20, 0x00	; 0
  66:	50 40       	sbci	r21, 0x00	; 0
  68:	56 95       	lsr	r21
  _udr = udr;
  6a:	47 95       	ror	r20
  6c:	37 95       	ror	r19
  6e:	27 95       	ror	r18
  70:	80 e1       	ldi	r24, 0x10	; 16
  _rxen = rxen;
  72:	20 30       	cpi	r18, 0x00	; 0
  74:	38 07       	cpc	r19, r24
  _txen = txen;
  76:	00 f0       	brcs	.+0      	; 0x78 <_ZN14HardwareSerial5beginEm+0x78>
  78:	dd 20       	and	r13, r13
  _rxcie = rxcie;
  7a:	01 f4       	brne	.+0      	; 0x7c <_ZN14HardwareSerial5beginEm+0x7c>
  7c:	e8 89       	ldd	r30, Y+16	; 0x10
  _udrie = udrie;
  7e:	f9 89       	ldd	r31, Y+17	; 0x11
  80:	30 83       	st	Z, r19
  _u2x = u2x;
  82:	ea 89       	ldd	r30, Y+18	; 0x12
  84:	fb 89       	ldd	r31, Y+19	; 0x13
  86:	20 83       	st	Z, r18
  88:	19 a2       	std	Y+33, r1	; 0x21
  8a:	ee 89       	ldd	r30, Y+22	; 0x16
  8c:	ff 89       	ldd	r31, Y+23	; 0x17
  8e:	40 81       	ld	r20, Z
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	9c 01       	movw	r18, r24
  96:	0c 8c       	ldd	r0, Y+28	; 0x1c
  98:	00 c0       	rjmp	.+0      	; 0x9a <_ZN14HardwareSerial5beginEm+0x9a>
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  9e:	0a 94       	dec	r0
  a0:	02 f4       	brpl	.+0      	; 0xa2 <_ZN14HardwareSerial5beginEm+0xa2>
  a2:	42 2b       	or	r20, r18
  a4:	40 83       	st	Z, r20
{
  _rx_buffer = rx_buffer;
  a6:	ee 89       	ldd	r30, Y+22	; 0x16
  a8:	ff 89       	ldd	r31, Y+23	; 0x17
  aa:	40 81       	ld	r20, Z
  ac:	9c 01       	movw	r18, r24
  _tx_buffer = tx_buffer;
  ae:	0d 8c       	ldd	r0, Y+29	; 0x1d
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <_ZN14HardwareSerial5beginEm+0xb2>
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  _ubrrh = ubrrh;
  b6:	0a 94       	dec	r0
  b8:	02 f4       	brpl	.+0      	; 0xba <_ZN14HardwareSerial5beginEm+0xba>
  ba:	42 2b       	or	r20, r18
  bc:	40 83       	st	Z, r20
  _ubrrl = ubrrl;
  be:	ee 89       	ldd	r30, Y+22	; 0x16
  c0:	ff 89       	ldd	r31, Y+23	; 0x17
  c2:	40 81       	ld	r20, Z
  c4:	9c 01       	movw	r18, r24
  _ucsra = ucsra;
  c6:	0e 8c       	ldd	r0, Y+30	; 0x1e
  c8:	00 c0       	rjmp	.+0      	; 0xca <_ZN14HardwareSerial5beginEm+0xca>
  ca:	22 0f       	add	r18, r18
  cc:	33 1f       	adc	r19, r19
  _ucsrb = ucsrb;
  ce:	0a 94       	dec	r0
  d0:	02 f4       	brpl	.+0      	; 0xd2 <_ZN14HardwareSerial5beginEm+0xd2>
  d2:	42 2b       	or	r20, r18
  d4:	40 83       	st	Z, r20
  _ucsrc = ucsrc;
  d6:	ee 89       	ldd	r30, Y+22	; 0x16
  d8:	ff 89       	ldd	r31, Y+23	; 0x17
  da:	20 81       	ld	r18, Z
  dc:	0f 8c       	ldd	r0, Y+31	; 0x1f
  _udr = udr;
  de:	00 c0       	rjmp	.+0      	; 0xe0 <_ZN14HardwareSerial5beginEm+0xe0>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	0a 94       	dec	r0
  _rxen = rxen;
  e6:	02 f4       	brpl	.+0      	; 0xe8 <_ZN14HardwareSerial5beginEm+0xe8>
  _txen = txen;
  e8:	80 95       	com	r24
  _rxcie = rxcie;
  ea:	82 23       	and	r24, r18
  _udrie = udrie;
  ec:	80 83       	st	Z, r24
  _u2x = u2x;
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	1f 91       	pop	r17
  f4:	0f 91       	pop	r16
  f6:	ff 90       	pop	r15
  f8:	ef 90       	pop	r14
  fa:	df 90       	pop	r13
  fc:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5beginEmh:

00000000 <_ZN14HardwareSerial5beginEmh>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	ec 01       	movw	r28, r24
  12:	7a 01       	movw	r14, r20
  14:	8b 01       	movw	r16, r22
  16:	c2 2e       	mov	r12, r18
  18:	dd 24       	eor	r13, r13
  1a:	d3 94       	inc	r13
  1c:	40 30       	cpi	r20, 0x00	; 0
  1e:	81 ee       	ldi	r24, 0xE1	; 225
  20:	58 07       	cpc	r21, r24
  22:	80 e0       	ldi	r24, 0x00	; 0
  24:	68 07       	cpc	r22, r24

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  26:	80 e0       	ldi	r24, 0x00	; 0
  28:	78 07       	cpc	r23, r24
  2a:	01 f4       	brne	.+0      	; 0x2c <_ZN14HardwareSerial5beginEmh+0x2c>
  2c:	dd 24       	eor	r13, r13
  2e:	ec 89       	ldd	r30, Y+20	; 0x14
  30:	fd 89       	ldd	r31, Y+21	; 0x15
{
  _rx_buffer = rx_buffer;
  32:	10 82       	st	Z, r1
  34:	60 e8       	ldi	r22, 0x80	; 128
  36:	74 e8       	ldi	r23, 0x84	; 132
  38:	8e e1       	ldi	r24, 0x1E	; 30
  _tx_buffer = tx_buffer;
  3a:	90 e0       	ldi	r25, 0x00	; 0
  3c:	00 c0       	rjmp	.+0      	; 0x3e <_ZN14HardwareSerial5beginEmh+0x3e>
  3e:	ec 89       	ldd	r30, Y+20	; 0x14
  40:	fd 89       	ldd	r31, Y+21	; 0x15
  _ubrrh = ubrrh;
  42:	81 e0       	ldi	r24, 0x01	; 1
  44:	90 e0       	ldi	r25, 0x00	; 0
  46:	08 a0       	ldd	r0, Y+32	; 0x20
  48:	00 c0       	rjmp	.+0      	; 0x4a <_ZN14HardwareSerial5beginEmh+0x4a>
  _ubrrl = ubrrl;
  4a:	88 0f       	add	r24, r24
  4c:	99 1f       	adc	r25, r25
  4e:	0a 94       	dec	r0
  50:	02 f4       	brpl	.+0      	; 0x52 <_ZN14HardwareSerial5beginEmh+0x52>
  _ucsra = ucsra;
  52:	80 83       	st	Z, r24
  54:	60 e0       	ldi	r22, 0x00	; 0
  56:	79 e0       	ldi	r23, 0x09	; 9
  58:	8d e3       	ldi	r24, 0x3D	; 61
  _ucsrb = ucsrb;
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	a8 01       	movw	r20, r16
  5e:	97 01       	movw	r18, r14
  60:	0e 94 00 00 	call	0	; 0x0 <_ZN14HardwareSerial5beginEmh>
  _ucsrc = ucsrc;
  64:	21 50       	subi	r18, 0x01	; 1
  66:	30 40       	sbci	r19, 0x00	; 0
  68:	40 40       	sbci	r20, 0x00	; 0
  _udr = udr;
  6a:	50 40       	sbci	r21, 0x00	; 0
  6c:	56 95       	lsr	r21
  6e:	47 95       	ror	r20
  70:	37 95       	ror	r19
  _rxen = rxen;
  72:	27 95       	ror	r18
  74:	80 e1       	ldi	r24, 0x10	; 16
  _txen = txen;
  76:	20 30       	cpi	r18, 0x00	; 0
  78:	38 07       	cpc	r19, r24
  _rxcie = rxcie;
  7a:	00 f0       	brcs	.+0      	; 0x7c <_ZN14HardwareSerial5beginEmh+0x7c>
  7c:	dd 20       	and	r13, r13
  _udrie = udrie;
  7e:	01 f4       	brne	.+0      	; 0x80 <_ZN14HardwareSerial5beginEmh+0x80>
  80:	e8 89       	ldd	r30, Y+16	; 0x10
  _u2x = u2x;
  82:	f9 89       	ldd	r31, Y+17	; 0x11
  84:	30 83       	st	Z, r19
  86:	ea 89       	ldd	r30, Y+18	; 0x12
  88:	fb 89       	ldd	r31, Y+19	; 0x13
  8a:	20 83       	st	Z, r18
  8c:	e8 8d       	ldd	r30, Y+24	; 0x18
  8e:	f9 8d       	ldd	r31, Y+25	; 0x19
  90:	c0 82       	st	Z, r12
  92:	ee 89       	ldd	r30, Y+22	; 0x16
  94:	ff 89       	ldd	r31, Y+23	; 0x17
  96:	40 81       	ld	r20, Z
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	9c 01       	movw	r18, r24

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  9e:	0c 8c       	ldd	r0, Y+28	; 0x1c
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <_ZN14HardwareSerial5beginEmh+0xa2>
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
{
  _rx_buffer = rx_buffer;
  a6:	0a 94       	dec	r0
  a8:	02 f4       	brpl	.+0      	; 0xaa <_ZN14HardwareSerial5beginEmh+0xaa>
  aa:	42 2b       	or	r20, r18
  ac:	40 83       	st	Z, r20
  _tx_buffer = tx_buffer;
  ae:	ee 89       	ldd	r30, Y+22	; 0x16
  b0:	ff 89       	ldd	r31, Y+23	; 0x17
  b2:	40 81       	ld	r20, Z
  b4:	9c 01       	movw	r18, r24
  _ubrrh = ubrrh;
  b6:	0d 8c       	ldd	r0, Y+29	; 0x1d
  b8:	00 c0       	rjmp	.+0      	; 0xba <_ZN14HardwareSerial5beginEmh+0xba>
  ba:	22 0f       	add	r18, r18
  bc:	33 1f       	adc	r19, r19
  _ubrrl = ubrrl;
  be:	0a 94       	dec	r0
  c0:	02 f4       	brpl	.+0      	; 0xc2 <_ZN14HardwareSerial5beginEmh+0xc2>
  c2:	42 2b       	or	r20, r18
  c4:	40 83       	st	Z, r20
  _ucsra = ucsra;
  c6:	ee 89       	ldd	r30, Y+22	; 0x16
  c8:	ff 89       	ldd	r31, Y+23	; 0x17
  ca:	40 81       	ld	r20, Z
  cc:	9c 01       	movw	r18, r24
  _ucsrb = ucsrb;
  ce:	0e 8c       	ldd	r0, Y+30	; 0x1e
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <_ZN14HardwareSerial5beginEmh+0xd2>
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  _ucsrc = ucsrc;
  d6:	0a 94       	dec	r0
  d8:	02 f4       	brpl	.+0      	; 0xda <_ZN14HardwareSerial5beginEmh+0xda>
  da:	42 2b       	or	r20, r18
  dc:	40 83       	st	Z, r20
  _udr = udr;
  de:	ee 89       	ldd	r30, Y+22	; 0x16
  e0:	ff 89       	ldd	r31, Y+23	; 0x17
  e2:	20 81       	ld	r18, Z
  e4:	0f 8c       	ldd	r0, Y+31	; 0x1f
  _rxen = rxen;
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <_ZN14HardwareSerial5beginEmh+0xe8>
  _txen = txen;
  e8:	88 0f       	add	r24, r24
  _rxcie = rxcie;
  ea:	99 1f       	adc	r25, r25
  _udrie = udrie;
  ec:	0a 94       	dec	r0
  _u2x = u2x;
  ee:	02 f4       	brpl	.+0      	; 0xf0 <_ZN14HardwareSerial5beginEmh+0xf0>
  f0:	80 95       	com	r24
  f2:	82 23       	and	r24, r18
  f4:	80 83       	st	Z, r24
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	1f 91       	pop	r17
  fc:	0f 91       	pop	r16
  fe:	ff 90       	pop	r15
 100:	ef 90       	pop	r14
 102:	df 90       	pop	r13
 104:	cf 90       	pop	r12
 106:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial3endEv:

00000000 <_ZN14HardwareSerial3endEv>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	86 85       	ldd	r24, Z+14	; 0x0e
   8:	97 85       	ldd	r25, Z+15	; 0x0f
   a:	dc 01       	movw	r26, r24
   c:	a0 5c       	subi	r26, 0xC0	; 192
   e:	bf 4f       	sbci	r27, 0xFF	; 255
  10:	8e 5b       	subi	r24, 0xBE	; 190
  12:	9f 4f       	sbci	r25, 0xFF	; 255
  14:	4d 91       	ld	r20, X+
  16:	5c 91       	ld	r21, X
  18:	11 97       	sbiw	r26, 0x01	; 1
  1a:	ec 01       	movw	r28, r24
  1c:	28 81       	ld	r18, Y
  1e:	39 81       	ldd	r19, Y+1	; 0x01
  20:	42 17       	cp	r20, r18
  22:	53 07       	cpc	r21, r19
  24:	01 f4       	brne	.+0      	; 0x26 <_ZN14HardwareSerial3endEv+0x26>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  26:	a6 89       	ldd	r26, Z+22	; 0x16
  28:	b7 89       	ldd	r27, Z+23	; 0x17
  2a:	4c 91       	ld	r20, X
  2c:	81 e0       	ldi	r24, 0x01	; 1
  2e:	90 e0       	ldi	r25, 0x00	; 0
  30:	9c 01       	movw	r18, r24
{
  _rx_buffer = rx_buffer;
  32:	04 8c       	ldd	r0, Z+28	; 0x1c
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN14HardwareSerial3endEv+0x36>
  36:	22 0f       	add	r18, r18
  38:	33 1f       	adc	r19, r19
  _tx_buffer = tx_buffer;
  3a:	0a 94       	dec	r0
  3c:	02 f4       	brpl	.+0      	; 0x3e <_ZN14HardwareSerial3endEv+0x3e>
  3e:	20 95       	com	r18
  40:	24 23       	and	r18, r20
  _ubrrh = ubrrh;
  42:	2c 93       	st	X, r18
  44:	a6 89       	ldd	r26, Z+22	; 0x16
  46:	b7 89       	ldd	r27, Z+23	; 0x17
  48:	4c 91       	ld	r20, X
  _ubrrl = ubrrl;
  4a:	9c 01       	movw	r18, r24
  4c:	05 8c       	ldd	r0, Z+29	; 0x1d
  4e:	00 c0       	rjmp	.+0      	; 0x50 <_ZN14HardwareSerial3endEv+0x50>
  50:	22 0f       	add	r18, r18
  _ucsra = ucsra;
  52:	33 1f       	adc	r19, r19
  54:	0a 94       	dec	r0
  56:	02 f4       	brpl	.+0      	; 0x58 <_ZN14HardwareSerial3endEv+0x58>
  58:	20 95       	com	r18
  _ucsrb = ucsrb;
  5a:	24 23       	and	r18, r20
  5c:	2c 93       	st	X, r18
  5e:	a6 89       	ldd	r26, Z+22	; 0x16
  60:	b7 89       	ldd	r27, Z+23	; 0x17
  _ucsrc = ucsrc;
  62:	4c 91       	ld	r20, X
  64:	9c 01       	movw	r18, r24
  66:	06 8c       	ldd	r0, Z+30	; 0x1e
  68:	00 c0       	rjmp	.+0      	; 0x6a <_ZN14HardwareSerial3endEv+0x6a>
  _udr = udr;
  6a:	22 0f       	add	r18, r18
  6c:	33 1f       	adc	r19, r19
  6e:	0a 94       	dec	r0
  70:	02 f4       	brpl	.+0      	; 0x72 <_ZN14HardwareSerial3endEv+0x72>
  _rxen = rxen;
  72:	20 95       	com	r18
  74:	24 23       	and	r18, r20
  _txen = txen;
  76:	2c 93       	st	X, r18
  78:	a6 89       	ldd	r26, Z+22	; 0x16
  _rxcie = rxcie;
  7a:	b7 89       	ldd	r27, Z+23	; 0x17
  7c:	2c 91       	ld	r18, X
  _udrie = udrie;
  7e:	07 8c       	ldd	r0, Z+31	; 0x1f
  80:	00 c0       	rjmp	.+0      	; 0x82 <_ZN14HardwareSerial3endEv+0x82>
  _u2x = u2x;
  82:	88 0f       	add	r24, r24
  84:	99 1f       	adc	r25, r25
  86:	0a 94       	dec	r0
  88:	02 f4       	brpl	.+0      	; 0x8a <_ZN14HardwareSerial3endEv+0x8a>
  8a:	80 95       	com	r24
  8c:	82 23       	and	r24, r18
  8e:	8c 93       	st	X, r24
  90:	84 85       	ldd	r24, Z+12	; 0x0c
  92:	95 85       	ldd	r25, Z+13	; 0x0d
  94:	fc 01       	movw	r30, r24
  96:	ee 5b       	subi	r30, 0xBE	; 190
  98:	ff 4f       	sbci	r31, 0xFF	; 255
  9a:	20 81       	ld	r18, Z
  9c:	31 81       	ldd	r19, Z+1	; 0x01

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  9e:	80 5c       	subi	r24, 0xC0	; 192
  a0:	9f 4f       	sbci	r25, 0xFF	; 255
  a2:	fc 01       	movw	r30, r24
  a4:	31 83       	std	Z+1, r19	; 0x01
{
  _rx_buffer = rx_buffer;
  a6:	20 83       	st	Z, r18
  a8:	df 91       	pop	r29
  aa:	cf 91       	pop	r28
  ac:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerialcvbEv:

00000000 <_ZN14HardwareSerialcvbEv>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	81 e0       	ldi	r24, 0x01	; 1
   2:	08 95       	ret

Disassembly of section .text._GLOBAL__I_rx_buffer:

00000000 <_GLOBAL__I_rx_buffer>:
   0:	1f 93       	push	r17
   2:	cf 93       	push	r28
   4:	df 93       	push	r29
   6:	10 92 00 00 	sts	0x0000, r1
   a:	10 92 00 00 	sts	0x0000, r1
   e:	88 ee       	ldi	r24, 0xE8	; 232
  10:	93 e0       	ldi	r25, 0x03	; 3
  12:	a0 e0       	ldi	r26, 0x00	; 0
  14:	b0 e0       	ldi	r27, 0x00	; 0
  16:	80 93 00 00 	sts	0x0000, r24
  1a:	90 93 00 00 	sts	0x0000, r25
  1e:	a0 93 00 00 	sts	0x0000, r26
  22:	b0 93 00 00 	sts	0x0000, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  26:	e0 e0       	ldi	r30, 0x00	; 0
  28:	f0 e0       	ldi	r31, 0x00	; 0
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	30 e0       	ldi	r19, 0x00	; 0
  2e:	32 93       	st	-Z, r19
  30:	22 93       	st	-Z, r18
{
  _rx_buffer = rx_buffer;
  32:	40 e0       	ldi	r20, 0x00	; 0
  34:	50 e0       	ldi	r21, 0x00	; 0
  36:	55 87       	std	Z+13, r21	; 0x0d
  38:	44 87       	std	Z+12, r20	; 0x0c
  _tx_buffer = tx_buffer;
  3a:	40 e0       	ldi	r20, 0x00	; 0
  3c:	50 e0       	ldi	r21, 0x00	; 0
  3e:	57 87       	std	Z+15, r21	; 0x0f
  40:	46 87       	std	Z+14, r20	; 0x0e
  _ubrrh = ubrrh;
  42:	45 ec       	ldi	r20, 0xC5	; 197
  44:	50 e0       	ldi	r21, 0x00	; 0
  46:	51 8b       	std	Z+17, r21	; 0x11
  48:	40 8b       	std	Z+16, r20	; 0x10
  _ubrrl = ubrrl;
  4a:	44 ec       	ldi	r20, 0xC4	; 196
  4c:	50 e0       	ldi	r21, 0x00	; 0
  4e:	53 8b       	std	Z+19, r21	; 0x13
  50:	42 8b       	std	Z+18, r20	; 0x12
  _ucsra = ucsra;
  52:	40 ec       	ldi	r20, 0xC0	; 192
  54:	50 e0       	ldi	r21, 0x00	; 0
  56:	55 8b       	std	Z+21, r21	; 0x15
  58:	44 8b       	std	Z+20, r20	; 0x14
  _ucsrb = ucsrb;
  5a:	41 ec       	ldi	r20, 0xC1	; 193
  5c:	50 e0       	ldi	r21, 0x00	; 0
  5e:	57 8b       	std	Z+23, r21	; 0x17
  60:	46 8b       	std	Z+22, r20	; 0x16
  _ucsrc = ucsrc;
  62:	42 ec       	ldi	r20, 0xC2	; 194
  64:	50 e0       	ldi	r21, 0x00	; 0
  66:	51 8f       	std	Z+25, r21	; 0x19
  68:	40 8f       	std	Z+24, r20	; 0x18
  _udr = udr;
  6a:	46 ec       	ldi	r20, 0xC6	; 198
  6c:	50 e0       	ldi	r21, 0x00	; 0
  6e:	53 8f       	std	Z+27, r21	; 0x1b
  70:	42 8f       	std	Z+26, r20	; 0x1a
  _rxen = rxen;
  72:	14 e0       	ldi	r17, 0x04	; 4
  74:	14 8f       	std	Z+28, r17	; 0x1c
  _txen = txen;
  76:	73 e0       	ldi	r23, 0x03	; 3
  78:	75 8f       	std	Z+29, r23	; 0x1d
  _rxcie = rxcie;
  7a:	67 e0       	ldi	r22, 0x07	; 7
  7c:	66 8f       	std	Z+30, r22	; 0x1e
  _udrie = udrie;
  7e:	55 e0       	ldi	r21, 0x05	; 5
  80:	57 8f       	std	Z+31, r21	; 0x1f
  _u2x = u2x;
  82:	41 e0       	ldi	r20, 0x01	; 1
  84:	40 a3       	std	Z+32, r20	; 0x20
  86:	10 92 00 00 	sts	0x0000, r1
  8a:	10 92 00 00 	sts	0x0000, r1
  8e:	80 93 00 00 	sts	0x0000, r24
  92:	90 93 00 00 	sts	0x0000, r25
  96:	a0 93 00 00 	sts	0x0000, r26
  9a:	b0 93 00 00 	sts	0x0000, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  9e:	e0 e0       	ldi	r30, 0x00	; 0
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	32 93       	st	-Z, r19
  a4:	22 93       	st	-Z, r18
{
  _rx_buffer = rx_buffer;
  a6:	c0 e0       	ldi	r28, 0x00	; 0
  a8:	d0 e0       	ldi	r29, 0x00	; 0
  aa:	d5 87       	std	Z+13, r29	; 0x0d
  ac:	c4 87       	std	Z+12, r28	; 0x0c
  _tx_buffer = tx_buffer;
  ae:	c0 e0       	ldi	r28, 0x00	; 0
  b0:	d0 e0       	ldi	r29, 0x00	; 0
  b2:	d7 87       	std	Z+15, r29	; 0x0f
  b4:	c6 87       	std	Z+14, r28	; 0x0e
  _ubrrh = ubrrh;
  b6:	cd ec       	ldi	r28, 0xCD	; 205
  b8:	d0 e0       	ldi	r29, 0x00	; 0
  ba:	d1 8b       	std	Z+17, r29	; 0x11
  bc:	c0 8b       	std	Z+16, r28	; 0x10
  _ubrrl = ubrrl;
  be:	cc ec       	ldi	r28, 0xCC	; 204
  c0:	d0 e0       	ldi	r29, 0x00	; 0
  c2:	d3 8b       	std	Z+19, r29	; 0x13
  c4:	c2 8b       	std	Z+18, r28	; 0x12
  _ucsra = ucsra;
  c6:	c8 ec       	ldi	r28, 0xC8	; 200
  c8:	d0 e0       	ldi	r29, 0x00	; 0
  ca:	d5 8b       	std	Z+21, r29	; 0x15
  cc:	c4 8b       	std	Z+20, r28	; 0x14
  _ucsrb = ucsrb;
  ce:	c9 ec       	ldi	r28, 0xC9	; 201
  d0:	d0 e0       	ldi	r29, 0x00	; 0
  d2:	d7 8b       	std	Z+23, r29	; 0x17
  d4:	c6 8b       	std	Z+22, r28	; 0x16
  _ucsrc = ucsrc;
  d6:	ca ec       	ldi	r28, 0xCA	; 202
  d8:	d0 e0       	ldi	r29, 0x00	; 0
  da:	d1 8f       	std	Z+25, r29	; 0x19
  dc:	c0 8f       	std	Z+24, r28	; 0x18
  _udr = udr;
  de:	ce ec       	ldi	r28, 0xCE	; 206
  e0:	d0 e0       	ldi	r29, 0x00	; 0
  e2:	d3 8f       	std	Z+27, r29	; 0x1b
  e4:	c2 8f       	std	Z+26, r28	; 0x1a
  _rxen = rxen;
  e6:	14 8f       	std	Z+28, r17	; 0x1c
  _txen = txen;
  e8:	75 8f       	std	Z+29, r23	; 0x1d
  _rxcie = rxcie;
  ea:	66 8f       	std	Z+30, r22	; 0x1e
  _udrie = udrie;
  ec:	57 8f       	std	Z+31, r21	; 0x1f
  _u2x = u2x;
  ee:	40 a3       	std	Z+32, r20	; 0x20
  f0:	10 92 00 00 	sts	0x0000, r1
  f4:	10 92 00 00 	sts	0x0000, r1
  f8:	80 93 00 00 	sts	0x0000, r24
  fc:	90 93 00 00 	sts	0x0000, r25
 100:	a0 93 00 00 	sts	0x0000, r26
 104:	b0 93 00 00 	sts	0x0000, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
 108:	e0 e0       	ldi	r30, 0x00	; 0
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	32 93       	st	-Z, r19
 10e:	22 93       	st	-Z, r18
{
  _rx_buffer = rx_buffer;
 110:	c0 e0       	ldi	r28, 0x00	; 0
 112:	d0 e0       	ldi	r29, 0x00	; 0
 114:	d5 87       	std	Z+13, r29	; 0x0d
 116:	c4 87       	std	Z+12, r28	; 0x0c
  _tx_buffer = tx_buffer;
 118:	c0 e0       	ldi	r28, 0x00	; 0
 11a:	d0 e0       	ldi	r29, 0x00	; 0
 11c:	d7 87       	std	Z+15, r29	; 0x0f
 11e:	c6 87       	std	Z+14, r28	; 0x0e
  _ubrrh = ubrrh;
 120:	c5 ed       	ldi	r28, 0xD5	; 213
 122:	d0 e0       	ldi	r29, 0x00	; 0
 124:	d1 8b       	std	Z+17, r29	; 0x11
 126:	c0 8b       	std	Z+16, r28	; 0x10
  _ubrrl = ubrrl;
 128:	c4 ed       	ldi	r28, 0xD4	; 212
 12a:	d0 e0       	ldi	r29, 0x00	; 0
 12c:	d3 8b       	std	Z+19, r29	; 0x13
 12e:	c2 8b       	std	Z+18, r28	; 0x12
  _ucsra = ucsra;
 130:	c0 ed       	ldi	r28, 0xD0	; 208
 132:	d0 e0       	ldi	r29, 0x00	; 0
 134:	d5 8b       	std	Z+21, r29	; 0x15
 136:	c4 8b       	std	Z+20, r28	; 0x14
  _ucsrb = ucsrb;
 138:	c1 ed       	ldi	r28, 0xD1	; 209
 13a:	d0 e0       	ldi	r29, 0x00	; 0
 13c:	d7 8b       	std	Z+23, r29	; 0x17
 13e:	c6 8b       	std	Z+22, r28	; 0x16
  _ucsrc = ucsrc;
 140:	c2 ed       	ldi	r28, 0xD2	; 210
 142:	d0 e0       	ldi	r29, 0x00	; 0
 144:	d1 8f       	std	Z+25, r29	; 0x19
 146:	c0 8f       	std	Z+24, r28	; 0x18
  _udr = udr;
 148:	c6 ed       	ldi	r28, 0xD6	; 214
 14a:	d0 e0       	ldi	r29, 0x00	; 0
 14c:	d3 8f       	std	Z+27, r29	; 0x1b
 14e:	c2 8f       	std	Z+26, r28	; 0x1a
  _rxen = rxen;
 150:	14 8f       	std	Z+28, r17	; 0x1c
  _txen = txen;
 152:	75 8f       	std	Z+29, r23	; 0x1d
  _rxcie = rxcie;
 154:	66 8f       	std	Z+30, r22	; 0x1e
  _udrie = udrie;
 156:	57 8f       	std	Z+31, r21	; 0x1f
  _u2x = u2x;
 158:	40 a3       	std	Z+32, r20	; 0x20
 15a:	10 92 00 00 	sts	0x0000, r1
 15e:	10 92 00 00 	sts	0x0000, r1
 162:	80 93 00 00 	sts	0x0000, r24
 166:	90 93 00 00 	sts	0x0000, r25
 16a:	a0 93 00 00 	sts	0x0000, r26
 16e:	b0 93 00 00 	sts	0x0000, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
 172:	e0 e0       	ldi	r30, 0x00	; 0
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	32 93       	st	-Z, r19
 178:	22 93       	st	-Z, r18
{
  _rx_buffer = rx_buffer;
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	95 87       	std	Z+13, r25	; 0x0d
 180:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	97 87       	std	Z+15, r25	; 0x0f
 188:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
 18a:	85 e3       	ldi	r24, 0x35	; 53
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	91 8b       	std	Z+17, r25	; 0x11
 190:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
 192:	84 e3       	ldi	r24, 0x34	; 52
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	93 8b       	std	Z+19, r25	; 0x13
 198:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
 19a:	80 e3       	ldi	r24, 0x30	; 48
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	95 8b       	std	Z+21, r25	; 0x15
 1a0:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
 1a2:	81 e3       	ldi	r24, 0x31	; 49
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	97 8b       	std	Z+23, r25	; 0x17
 1a8:	86 8b       	std	Z+22, r24	; 0x16
  _ucsrc = ucsrc;
 1aa:	82 e3       	ldi	r24, 0x32	; 50
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	91 8f       	std	Z+25, r25	; 0x19
 1b0:	80 8f       	std	Z+24, r24	; 0x18
  _udr = udr;
 1b2:	86 e3       	ldi	r24, 0x36	; 54
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	93 8f       	std	Z+27, r25	; 0x1b
 1b8:	82 8f       	std	Z+26, r24	; 0x1a
  _rxen = rxen;
 1ba:	14 8f       	std	Z+28, r17	; 0x1c
  _txen = txen;
 1bc:	75 8f       	std	Z+29, r23	; 0x1d
  _rxcie = rxcie;
 1be:	66 8f       	std	Z+30, r22	; 0x1e
  _udrie = udrie;
 1c0:	57 8f       	std	Z+31, r21	; 0x1f
  _u2x = u2x;
 1c2:	40 a3       	std	Z+32, r20	; 0x20
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	08 95       	ret

IPAddress.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000a50  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000037e2  00000000  00000000  00000a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZNK9IPAddress7printToER5Print 00000086  00000000  00000000  00004266  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN9IPAddressC2Ev 00000014  00000000  00000000  000042ec  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN9IPAddressC2Ehhhh 00000018  00000000  00000000  00004300  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN9IPAddressC2Em 00000014  00000000  00000000  00004318  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN9IPAddressC2EPKh 00000020  00000000  00000000  0000432c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN9IPAddressaSEPKh 00000020  00000000  00000000  0000434c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .text._ZN9IPAddressaSEm 0000000c  00000000  00000000  0000436c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .text._ZN9IPAddresseqEPKh 00000020  00000000  00000000  00004378  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._GLOBAL__I__ZN9IPAddressC2Ev 0000001e  00000000  00000000  00004398  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .ctors        00000002  00000000  00000000  000043b6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 15 .rodata._ZTV9IPAddress 00000006  00000000  00000000  000043b8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 16 .bss._ZL11INADDR_NONE 00000006  00000000  00000000  000043be  2**0
                  ALLOC
 17 .rodata._ZTV9Printable 00000006  00000000  00000000  000043be  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Disassembly of section .text._ZNK9IPAddress7printToER5Print:

00000000 <_ZNK9IPAddress7printToER5Print>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
{
    _address[0] = first_octet;
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
    _address[1] = second_octet;
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
    _address[2] = third_octet;
  14:	cf 93       	push	r28
  16:	df 93       	push	r29
    _address[3] = fourth_octet;
  18:	4c 01       	movw	r8, r24
  1a:	7b 01       	movw	r14, r22
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
  1c:	82 e0       	ldi	r24, 0x02	; 2
  1e:	a8 2e       	mov	r10, r24
  20:	b1 2c       	mov	r11, r1
  22:	a8 0c       	add	r10, r8
  24:	b9 1c       	adc	r11, r9
  26:	c0 e0       	ldi	r28, 0x00	; 0
  28:	d0 e0       	ldi	r29, 0x00	; 0
  2a:	cc 24       	eor	r12, r12
  2c:	dd 24       	eor	r13, r13
  2e:	f5 01       	movw	r30, r10
  30:	61 91       	ld	r22, Z+
  32:	5f 01       	movw	r10, r30
  34:	c7 01       	movw	r24, r14
  36:	4a e0       	ldi	r20, 0x0A	; 10
  38:	50 e0       	ldi	r21, 0x00	; 0
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
  3e:	8c 01       	movw	r16, r24
  40:	c7 01       	movw	r24, r14
  42:	6e e2       	ldi	r22, 0x2E	; 46
  44:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
  48:	08 0f       	add	r16, r24
  4a:	19 1f       	adc	r17, r25
  4c:	c0 0e       	add	r12, r16
  4e:	d1 1e       	adc	r13, r17
  50:	21 96       	adiw	r28, 0x01	; 1
  52:	c3 30       	cpi	r28, 0x03	; 3
  54:	d1 05       	cpc	r29, r1
  56:	01 f4       	brne	.+0      	; 0x58 <_ZNK9IPAddress7printToER5Print+0x58>
  58:	c7 01       	movw	r24, r14
  5a:	f4 01       	movw	r30, r8
  5c:	65 81       	ldd	r22, Z+5	; 0x05
  5e:	4a e0       	ldi	r20, 0x0A	; 10
  60:	50 e0       	ldi	r21, 0x00	; 0
  62:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
  66:	c8 0e       	add	r12, r24
  68:	d9 1e       	adc	r13, r25
  6a:	c6 01       	movw	r24, r12
  6c:	df 91       	pop	r29
  6e:	cf 91       	pop	r28
  70:	1f 91       	pop	r17
  72:	0f 91       	pop	r16
  74:	ff 90       	pop	r15
  76:	ef 90       	pop	r14
  78:	df 90       	pop	r13
  7a:	cf 90       	pop	r12
  7c:	bf 90       	pop	r11
  7e:	af 90       	pop	r10
  80:	9f 90       	pop	r9
  82:	8f 90       	pop	r8
  84:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2Ev:

00000000 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	12 82       	std	Z+2, r1	; 0x02
{
    _address[0] = first_octet;
   c:	13 82       	std	Z+3, r1	; 0x03
   e:	14 82       	std	Z+4, r1	; 0x04
    _address[1] = second_octet;
  10:	15 82       	std	Z+5, r1	; 0x05
  12:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2Ehhhh:

00000000 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	0f 93       	push	r16
   2:	fc 01       	movw	r30, r24
   4:	80 e0       	ldi	r24, 0x00	; 0
   6:	90 e0       	ldi	r25, 0x00	; 0
   8:	91 83       	std	Z+1, r25	; 0x01
   a:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
   c:	62 83       	std	Z+2, r22	; 0x02
   e:	43 83       	std	Z+3, r20	; 0x03
    _address[1] = second_octet;
  10:	24 83       	std	Z+4, r18	; 0x04
  12:	05 83       	std	Z+5, r16	; 0x05
    _address[2] = third_octet;
  14:	0f 91       	pop	r16
  16:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2Em:

00000000 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	42 83       	std	Z+2, r20	; 0x02
{
    _address[0] = first_octet;
   c:	53 83       	std	Z+3, r21	; 0x03
   e:	64 83       	std	Z+4, r22	; 0x04
    _address[1] = second_octet;
  10:	75 83       	std	Z+5, r23	; 0x05
  12:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2EPKh:

00000000 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	db 01       	movw	r26, r22
{
    _address[0] = first_octet;
   c:	2d 91       	ld	r18, X+
   e:	3d 91       	ld	r19, X+
    _address[1] = second_octet;
  10:	4d 91       	ld	r20, X+
  12:	5c 91       	ld	r21, X
    _address[2] = third_octet;
  14:	13 97       	sbiw	r26, 0x03	; 3
  16:	22 83       	std	Z+2, r18	; 0x02
    _address[3] = fourth_octet;
  18:	33 83       	std	Z+3, r19	; 0x03
  1a:	44 83       	std	Z+4, r20	; 0x04
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
  1c:	55 83       	std	Z+5, r21	; 0x05
  1e:	08 95       	ret

Disassembly of section .text._ZN9IPAddressaSEPKh:

00000000 <_ZN9IPAddressaSEPKh>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	eb 01       	movw	r28, r22
   8:	88 81       	ld	r24, Y
   a:	99 81       	ldd	r25, Y+1	; 0x01
{
    _address[0] = first_octet;
   c:	aa 81       	ldd	r26, Y+2	; 0x02
   e:	bb 81       	ldd	r27, Y+3	; 0x03
    _address[1] = second_octet;
  10:	82 83       	std	Z+2, r24	; 0x02
  12:	93 83       	std	Z+3, r25	; 0x03
    _address[2] = third_octet;
  14:	a4 83       	std	Z+4, r26	; 0x04
  16:	b5 83       	std	Z+5, r27	; 0x05
    _address[3] = fourth_octet;
  18:	cf 01       	movw	r24, r30
  1a:	df 91       	pop	r29
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
  1c:	cf 91       	pop	r28
  1e:	08 95       	ret

Disassembly of section .text._ZN9IPAddressaSEm:

00000000 <_ZN9IPAddressaSEm>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	fc 01       	movw	r30, r24
   2:	42 83       	std	Z+2, r20	; 0x02
   4:	53 83       	std	Z+3, r21	; 0x03
   6:	64 83       	std	Z+4, r22	; 0x04
   8:	75 83       	std	Z+5, r23	; 0x05
   a:	08 95       	ret

Disassembly of section .text._ZN9IPAddresseqEPKh:

00000000 <_ZN9IPAddresseqEPKh>:
   0:	9b 01       	movw	r18, r22
   2:	bc 01       	movw	r22, r24
   4:	6e 5f       	subi	r22, 0xFE	; 254
   6:	7f 4f       	sbci	r23, 0xFF	; 255
   8:	c9 01       	movw	r24, r18
   a:	44 e0       	ldi	r20, 0x04	; 4
{
    _address[0] = first_octet;
   c:	50 e0       	ldi	r21, 0x00	; 0
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresseqEPKh>
    _address[1] = second_octet;
  12:	9c 01       	movw	r18, r24
    _address[2] = third_octet;
  14:	81 e0       	ldi	r24, 0x01	; 1
  16:	21 15       	cp	r18, r1
    _address[3] = fourth_octet;
  18:	31 05       	cpc	r19, r1
  1a:	01 f0       	breq	.+0      	; 0x1c <_ZN9IPAddresseqEPKh+0x1c>
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
  1c:	80 e0       	ldi	r24, 0x00	; 0
  1e:	08 95       	ret

Disassembly of section .text._GLOBAL__I__ZN9IPAddressC2Ev:

00000000 <_GLOBAL__I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	80 e0       	ldi	r24, 0x00	; 0
   2:	90 e0       	ldi	r25, 0x00	; 0
   4:	90 93 00 00 	sts	0x0000, r25
   8:	80 93 00 00 	sts	0x0000, r24
{
    _address[0] = first_octet;
   c:	10 92 00 00 	sts	0x0000, r1
    _address[1] = second_octet;
  10:	10 92 00 00 	sts	0x0000, r1
    _address[2] = third_octet;
  14:	10 92 00 00 	sts	0x0000, r1
    _address[3] = fourth_octet;
  18:	10 92 00 00 	sts	0x0000, r1
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
  1c:	08 95       	ret

Print.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000042  2**0
                  ALLOC
  3 .stab         000015fc  00000000  00000000  00000044  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00003d9c  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN5Print5writeEPKhj 00000054  00000000  00000000  000053dc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN5Print5writeEPKc 00000032  00000000  00000000  00005430  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN5Print5printEPK19__FlashStringHelper 00000046  00000000  00000000  00005462  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN5Print5printERK6String 00000066  00000000  00000000  000054a8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN5Print5printEPKc 00000006  00000000  00000000  0000550e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN5Print5printEc 00000010  00000000  00000000  00005514  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .text._ZN5Print5printERK9Printable 00000016  00000000  00000000  00005524  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .text._ZN5Print7printlnEv 0000002a  00000000  00000000  0000553a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN5Print7printlnEPK19__FlashStringHelper 00000026  00000000  00000000  00005564  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN5Print7printlnERK6String 00000026  00000000  00000000  0000558a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN5Print7printlnEPKc 00000026  00000000  00000000  000055b0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN5Print7printlnEc 00000026  00000000  00000000  000055d6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN5Print7printlnERK9Printable 00000026  00000000  00000000  000055fc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN5Print11printNumberEmh 000000b4  00000000  00000000  00005622  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN5Print5printEmi 0000001e  00000000  00000000  000056d6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN5Print7printlnEmi 00000026  00000000  00000000  000056f4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN5Print5printEji 0000000e  00000000  00000000  0000571a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN5Print7printlnEji 0000002e  00000000  00000000  00005728  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZN5Print5printEhi 00000010  00000000  00000000  00005756  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZN5Print7printlnEhi 00000030  00000000  00000000  00005766  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZN5Print5printEli 00000076  00000000  00000000  00005796  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZN5Print7printlnEli 00000026  00000000  00000000  0000580c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text._ZN5Print5printEii 00000014  00000000  00000000  00005832  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text._ZN5Print7printlnEii 00000036  00000000  00000000  00005846  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .text._ZN5Print10printFloatEdh 000001f8  00000000  00000000  0000587c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .text._ZN5Print5printEdi 00000006  00000000  00000000  00005a74  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .text._ZN5Print7printlnEdi 00000026  00000000  00000000  00005a7a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 32 .rodata._ZTV5Print 00000008  00000000  00000000  00005aa0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Disassembly of section .text._ZN5Print5writeEPKhj:

00000000 <_ZN5Print5writeEPKhj>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	6c 01       	movw	r12, r24
  12:	7b 01       	movw	r14, r22
  14:	8a 01       	movw	r16, r20
  16:	c0 e0       	ldi	r28, 0x00	; 0
  18:	d0 e0       	ldi	r29, 0x00	; 0
  return n;
}
  1a:	00 c0       	rjmp	.+0      	; 0x1c <_ZN5Print5writeEPKhj+0x1c>
  1c:	d7 01       	movw	r26, r14
  1e:	6d 91       	ld	r22, X+
  20:	7d 01       	movw	r14, r26
  22:	d6 01       	movw	r26, r12
  24:	ed 91       	ld	r30, X+
  26:	fc 91       	ld	r31, X
  28:	01 90       	ld	r0, Z+
  2a:	f0 81       	ld	r31, Z
  2c:	e0 2d       	mov	r30, r0
  2e:	c6 01       	movw	r24, r12
  30:	19 95       	eicall
  32:	c8 0f       	add	r28, r24
  34:	d9 1f       	adc	r29, r25
  36:	01 50       	subi	r16, 0x01	; 1
  38:	10 40       	sbci	r17, 0x00	; 0
  3a:	01 15       	cp	r16, r1
  3c:	11 05       	cpc	r17, r1
  3e:	01 f4       	brne	.+0      	; 0x40 <_ZN5Print5writeEPKhj+0x40>
  40:	ce 01       	movw	r24, r28
  42:	df 91       	pop	r29
  44:	cf 91       	pop	r28
  46:	1f 91       	pop	r17
  48:	0f 91       	pop	r16
  4a:	ff 90       	pop	r15
  4c:	ef 90       	pop	r14
  4e:	df 90       	pop	r13
  50:	cf 90       	pop	r12
  52:	08 95       	ret

Disassembly of section .text._ZN5Print5writeEPKc:

00000000 <_ZN5Print5writeEPKc>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	61 15       	cp	r22, r1
   2:	71 05       	cpc	r23, r1
   4:	01 f0       	breq	.+0      	; 0x6 <_ZN5Print5writeEPKc+0x6>
   6:	db 01       	movw	r26, r22
   8:	0d 90       	ld	r0, X+
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	00 20       	and	r0, r0
   c:	01 f4       	brne	.+0      	; 0xe <_ZN5Print5writeEPKc+0xe>
   e:	ad 01       	movw	r20, r26
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	41 50       	subi	r20, 0x01	; 1
  12:	50 40       	sbci	r21, 0x00	; 0
  14:	46 1b       	sub	r20, r22
  16:	57 0b       	sbc	r21, r23
  18:	dc 01       	movw	r26, r24
  return n;
}
  1a:	ed 91       	ld	r30, X+
  1c:	fc 91       	ld	r31, X
  1e:	02 80       	ldd	r0, Z+2	; 0x02
  20:	f3 81       	ldd	r31, Z+3	; 0x03
  22:	e0 2d       	mov	r30, r0
  24:	19 95       	eicall
  26:	9c 01       	movw	r18, r24
  28:	00 c0       	rjmp	.+0      	; 0x2a <_ZN5Print5writeEPKc+0x2a>
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	30 e0       	ldi	r19, 0x00	; 0
  2e:	c9 01       	movw	r24, r18
  30:	08 95       	ret

Disassembly of section .text._ZN5Print5printEPK19__FlashStringHelper:

00000000 <_ZN5Print5printEPK19__FlashStringHelper>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	df 93       	push	r29
   c:	7c 01       	movw	r14, r24
   e:	06 2f       	mov	r16, r22
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	17 2f       	mov	r17, r23
  12:	c0 e0       	ldi	r28, 0x00	; 0
  14:	d0 e0       	ldi	r29, 0x00	; 0
  16:	f8 01       	movw	r30, r16
  18:	0f 5f       	subi	r16, 0xFF	; 255
  return n;
}
  1a:	1f 4f       	sbci	r17, 0xFF	; 255
  1c:	64 91       	lpm	r22, Z+
  1e:	66 23       	and	r22, r22
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN5Print5printEPK19__FlashStringHelper+0x22>
  22:	f7 01       	movw	r30, r14
  24:	a0 81       	ld	r26, Z
  26:	b1 81       	ldd	r27, Z+1	; 0x01
  28:	ed 91       	ld	r30, X+
  2a:	fc 91       	ld	r31, X
  2c:	c7 01       	movw	r24, r14
  2e:	19 95       	eicall
  30:	c8 0f       	add	r28, r24
  32:	d9 1f       	adc	r29, r25
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN5Print5printEPK19__FlashStringHelper+0x36>
  36:	ce 01       	movw	r24, r28
  38:	df 91       	pop	r29
  3a:	cf 91       	pop	r28
  3c:	1f 91       	pop	r17
  3e:	0f 91       	pop	r16
  40:	ff 90       	pop	r15
  42:	ef 90       	pop	r14
  44:	08 95       	ret

Disassembly of section .text._ZN5Print5printERK6String:

00000000 <_ZN5Print5printERK6String>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	7c 01       	movw	r14, r24
  16:	6b 01       	movw	r12, r22
  18:	c0 e0       	ldi	r28, 0x00	; 0
  return n;
}
  1a:	d0 e0       	ldi	r29, 0x00	; 0
  1c:	00 e0       	ldi	r16, 0x00	; 0
  1e:	10 e0       	ldi	r17, 0x00	; 0
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN5Print5printERK6String+0x22>
  22:	d7 01       	movw	r26, r14
  24:	ed 91       	ld	r30, X+
  26:	fc 91       	ld	r31, X
  28:	a0 80       	ld	r10, Z
  2a:	b1 80       	ldd	r11, Z+1	; 0x01
  2c:	c6 01       	movw	r24, r12
  2e:	be 01       	movw	r22, r28
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printERK6String>
  34:	68 2f       	mov	r22, r24
  36:	c7 01       	movw	r24, r14
  38:	f5 01       	movw	r30, r10
  3a:	19 95       	eicall
  3c:	08 0f       	add	r16, r24
  3e:	19 1f       	adc	r17, r25
  40:	21 96       	adiw	r28, 0x01	; 1
  42:	f6 01       	movw	r30, r12
  44:	84 81       	ldd	r24, Z+4	; 0x04
  46:	95 81       	ldd	r25, Z+5	; 0x05
  48:	c8 17       	cp	r28, r24
  4a:	d9 07       	cpc	r29, r25
  4c:	00 f0       	brcs	.+0      	; 0x4e <_ZN5Print5printERK6String+0x4e>
  4e:	c8 01       	movw	r24, r16
  50:	df 91       	pop	r29
  52:	cf 91       	pop	r28
  54:	1f 91       	pop	r17
  56:	0f 91       	pop	r16
  58:	ff 90       	pop	r15
  5a:	ef 90       	pop	r14
  5c:	df 90       	pop	r13
  5e:	cf 90       	pop	r12
  60:	bf 90       	pop	r11
  62:	af 90       	pop	r10
  64:	08 95       	ret

Disassembly of section .text._ZN5Print5printEPKc:

00000000 <_ZN5Print5printEPKc>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEPKc>
   4:	08 95       	ret

Disassembly of section .text._ZN5Print5printEc:

00000000 <_ZN5Print5printEc>:
   0:	dc 01       	movw	r26, r24
   2:	ed 91       	ld	r30, X+
   4:	fc 91       	ld	r31, X
   6:	01 90       	ld	r0, Z+
   8:	f0 81       	ld	r31, Z
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	e0 2d       	mov	r30, r0
   c:	19 95       	eicall
   e:	08 95       	ret

Disassembly of section .text._ZN5Print5printERK9Printable:

00000000 <_ZN5Print5printERK9Printable>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	9c 01       	movw	r18, r24
   2:	cb 01       	movw	r24, r22
   4:	db 01       	movw	r26, r22
   6:	ed 91       	ld	r30, X+
   8:	fc 91       	ld	r31, X
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	01 90       	ld	r0, Z+
   c:	f0 81       	ld	r31, Z
   e:	e0 2d       	mov	r30, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	b9 01       	movw	r22, r18
  12:	19 95       	eicall
  14:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEv:

00000000 <_ZN5Print7printlnEv>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	6d e0       	ldi	r22, 0x0D	; 13
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEv>
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	8c 01       	movw	r16, r24
  12:	ce 01       	movw	r24, r28
  14:	6a e0       	ldi	r22, 0x0A	; 10
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEv>
  return n;
}
  1a:	08 0f       	add	r16, r24
  1c:	19 1f       	adc	r17, r25
  1e:	c8 01       	movw	r24, r16
  20:	df 91       	pop	r29
  22:	cf 91       	pop	r28
  24:	1f 91       	pop	r17
  26:	0f 91       	pop	r16
  28:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEPK19__FlashStringHelper:

00000000 <_ZN5Print7printlnEPK19__FlashStringHelper>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPK19__FlashStringHelper>
   e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ce 01       	movw	r24, r28
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPK19__FlashStringHelper>
  16:	08 0f       	add	r16, r24
  18:	19 1f       	adc	r17, r25
  return n;
}
  1a:	c8 01       	movw	r24, r16
  1c:	df 91       	pop	r29
  1e:	cf 91       	pop	r28
  20:	1f 91       	pop	r17
  22:	0f 91       	pop	r16
  24:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnERK6String:

00000000 <_ZN5Print7printlnERK6String>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK6String>
   e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ce 01       	movw	r24, r28
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK6String>
  16:	08 0f       	add	r16, r24
  18:	19 1f       	adc	r17, r25
  return n;
}
  1a:	c8 01       	movw	r24, r16
  1c:	df 91       	pop	r29
  1e:	cf 91       	pop	r28
  20:	1f 91       	pop	r17
  22:	0f 91       	pop	r16
  24:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEPKc:

00000000 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPKc>
   e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ce 01       	movw	r24, r28
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPKc>
  16:	08 0f       	add	r16, r24
  18:	19 1f       	adc	r17, r25
  return n;
}
  1a:	c8 01       	movw	r24, r16
  1c:	df 91       	pop	r29
  1e:	cf 91       	pop	r28
  20:	1f 91       	pop	r17
  22:	0f 91       	pop	r16
  24:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEc:

00000000 <_ZN5Print7printlnEc>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEc>
   e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ce 01       	movw	r24, r28
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEc>
  16:	08 0f       	add	r16, r24
  18:	19 1f       	adc	r17, r25
  return n;
}
  1a:	c8 01       	movw	r24, r16
  1c:	df 91       	pop	r29
  1e:	cf 91       	pop	r28
  20:	1f 91       	pop	r17
  22:	0f 91       	pop	r16
  24:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnERK9Printable:

00000000 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK9Printable>
   e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ce 01       	movw	r24, r28
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK9Printable>
  16:	08 0f       	add	r16, r24
  18:	19 1f       	adc	r17, r25
  return n;
}
  1a:	c8 01       	movw	r24, r16
  1c:	df 91       	pop	r29
  1e:	cf 91       	pop	r28
  20:	1f 91       	pop	r17
  22:	0f 91       	pop	r16
  24:	08 95       	ret

Disassembly of section .text._ZN5Print11printNumberEmh:

00000000 <_ZN5Print11printNumberEmh>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	df 93       	push	r29
  16:	cf 93       	push	r28
  18:	cd b7       	in	r28, 0x3d	; 61
  return n;
}
  1a:	de b7       	in	r29, 0x3e	; 62
  1c:	a1 97       	sbiw	r28, 0x21	; 33
  1e:	0f b6       	in	r0, 0x3f	; 63
  20:	f8 94       	cli
  22:	de bf       	out	0x3e, r29	; 62
  24:	0f be       	out	0x3f, r0	; 63
  26:	cd bf       	out	0x3d, r28	; 61
  28:	6c 01       	movw	r12, r24
  2a:	04 2f       	mov	r16, r20
  2c:	e5 2f       	mov	r30, r21
  2e:	cb 01       	movw	r24, r22
  30:	12 2f       	mov	r17, r18
  32:	19 a2       	std	Y+33, r1	; 0x21
  34:	22 30       	cpi	r18, 0x02	; 2
  36:	00 f4       	brcc	.+0      	; 0x38 <_ZN5Print11printNumberEmh+0x38>
  38:	1a e0       	ldi	r17, 0x0A	; 10
  3a:	21 e2       	ldi	r18, 0x21	; 33
  3c:	e2 2e       	mov	r14, r18
  3e:	f1 2c       	mov	r15, r1
  40:	ec 0e       	add	r14, r28
  42:	fd 1e       	adc	r15, r29
  44:	81 2e       	mov	r8, r17
  46:	99 24       	eor	r9, r9
  48:	aa 24       	eor	r10, r10
  4a:	bb 24       	eor	r11, r11
  4c:	00 c0       	rjmp	.+0      	; 0x4e <_ZN5Print11printNumberEmh+0x4e>
  4e:	02 2f       	mov	r16, r18
  50:	e3 2f       	mov	r30, r19
  52:	ca 01       	movw	r24, r20
  54:	60 2f       	mov	r22, r16
  56:	7e 2f       	mov	r23, r30
  58:	a5 01       	movw	r20, r10
  5a:	94 01       	movw	r18, r8
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print11printNumberEmh>
  60:	12 9f       	mul	r17, r18
  62:	80 2d       	mov	r24, r0
  64:	11 24       	eor	r1, r1
  66:	08 1b       	sub	r16, r24
  68:	08 94       	sec
  6a:	e1 08       	sbc	r14, r1
  6c:	f1 08       	sbc	r15, r1
  6e:	0a 30       	cpi	r16, 0x0A	; 10
  70:	04 f4       	brge	.+0      	; 0x72 <_ZN5Print11printNumberEmh+0x72>
  72:	00 5d       	subi	r16, 0xD0	; 208
  74:	00 c0       	rjmp	.+0      	; 0x76 <_ZN5Print11printNumberEmh+0x76>
  76:	09 5c       	subi	r16, 0xC9	; 201
  78:	f7 01       	movw	r30, r14
  7a:	00 83       	st	Z, r16
  7c:	21 15       	cp	r18, r1
  7e:	31 05       	cpc	r19, r1
  80:	41 05       	cpc	r20, r1
  82:	51 05       	cpc	r21, r1
  84:	01 f4       	brne	.+0      	; 0x86 <_ZN5Print11printNumberEmh+0x86>
  86:	c6 01       	movw	r24, r12
  88:	b7 01       	movw	r22, r14
  8a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print11printNumberEmh>
  8e:	a1 96       	adiw	r28, 0x21	; 33
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	f8 94       	cli
  94:	de bf       	out	0x3e, r29	; 62
  96:	0f be       	out	0x3f, r0	; 63
  98:	cd bf       	out	0x3d, r28	; 61
  9a:	cf 91       	pop	r28
  9c:	df 91       	pop	r29
  9e:	1f 91       	pop	r17
  a0:	0f 91       	pop	r16
  a2:	ff 90       	pop	r15
  a4:	ef 90       	pop	r14
  a6:	df 90       	pop	r13
  a8:	cf 90       	pop	r12
  aa:	bf 90       	pop	r11
  ac:	af 90       	pop	r10
  ae:	9f 90       	pop	r9
  b0:	8f 90       	pop	r8
  b2:	08 95       	ret

Disassembly of section .text._ZN5Print5printEmi:

00000000 <_ZN5Print5printEmi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	21 15       	cp	r18, r1
   2:	31 05       	cpc	r19, r1
   4:	01 f4       	brne	.+0      	; 0x6 <_ZN5Print5printEmi+0x6>
   6:	dc 01       	movw	r26, r24
   8:	ed 91       	ld	r30, X+
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	fc 91       	ld	r31, X
   c:	01 90       	ld	r0, Z+
   e:	f0 81       	ld	r31, Z
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	e0 2d       	mov	r30, r0
  12:	64 2f       	mov	r22, r20
  14:	19 95       	eicall
  16:	08 95       	ret
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEmi>
  return n;
}
  1c:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEmi:

00000000 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEmi>
   e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ce 01       	movw	r24, r28
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEmi>
  16:	08 0f       	add	r16, r24
  18:	19 1f       	adc	r17, r25
  return n;
}
  1a:	c8 01       	movw	r24, r16
  1c:	df 91       	pop	r29
  1e:	cf 91       	pop	r28
  20:	1f 91       	pop	r17
  22:	0f 91       	pop	r16
  24:	08 95       	ret

Disassembly of section .text._ZN5Print5printEji:

00000000 <_ZN5Print5printEji>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	9a 01       	movw	r18, r20
   2:	ab 01       	movw	r20, r22
   4:	60 e0       	ldi	r22, 0x00	; 0
   6:	70 e0       	ldi	r23, 0x00	; 0
   8:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEji>
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   c:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEji:

00000000 <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	9a 01       	movw	r18, r20
   c:	ab 01       	movw	r20, r22
   e:	60 e0       	ldi	r22, 0x00	; 0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	70 e0       	ldi	r23, 0x00	; 0
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEji>
  16:	8c 01       	movw	r16, r24
  18:	ce 01       	movw	r24, r28
  return n;
}
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEji>
  1e:	08 0f       	add	r16, r24
  20:	19 1f       	adc	r17, r25
  22:	c8 01       	movw	r24, r16
  24:	df 91       	pop	r29
  26:	cf 91       	pop	r28
  28:	1f 91       	pop	r17
  2a:	0f 91       	pop	r16
  2c:	08 95       	ret

Disassembly of section .text._ZN5Print5printEhi:

00000000 <_ZN5Print5printEhi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	9a 01       	movw	r18, r20
   2:	46 2f       	mov	r20, r22
   4:	50 e0       	ldi	r21, 0x00	; 0
   6:	60 e0       	ldi	r22, 0x00	; 0
   8:	70 e0       	ldi	r23, 0x00	; 0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEhi>
   e:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEhi:

00000000 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	9a 01       	movw	r18, r20
   c:	46 2f       	mov	r20, r22
   e:	50 e0       	ldi	r21, 0x00	; 0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	60 e0       	ldi	r22, 0x00	; 0
  12:	70 e0       	ldi	r23, 0x00	; 0
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEhi>
  18:	8c 01       	movw	r16, r24
  return n;
}
  1a:	ce 01       	movw	r24, r28
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEhi>
  20:	08 0f       	add	r16, r24
  22:	19 1f       	adc	r17, r25
  24:	c8 01       	movw	r24, r16
  26:	df 91       	pop	r29
  28:	cf 91       	pop	r28
  2a:	1f 91       	pop	r17
  2c:	0f 91       	pop	r16
  2e:	08 95       	ret

Disassembly of section .text._ZN5Print5printEli:

00000000 <_ZN5Print5printEli>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ec 01       	movw	r28, r24
  12:	7a 01       	movw	r14, r20
  14:	8b 01       	movw	r16, r22
  16:	21 15       	cp	r18, r1
  18:	31 05       	cpc	r19, r1
  return n;
}
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZN5Print5printEli+0x1c>
  1c:	e8 81       	ld	r30, Y
  1e:	f9 81       	ldd	r31, Y+1	; 0x01
  20:	01 90       	ld	r0, Z+
  22:	f0 81       	ld	r31, Z
  24:	e0 2d       	mov	r30, r0
  26:	64 2f       	mov	r22, r20
  28:	19 95       	eicall
  2a:	00 c0       	rjmp	.+0      	; 0x2c <_ZN5Print5printEli+0x2c>
  2c:	2a 30       	cpi	r18, 0x0A	; 10
  2e:	31 05       	cpc	r19, r1
  30:	01 f4       	brne	.+0      	; 0x32 <_ZN5Print5printEli+0x32>
  32:	77 ff       	sbrs	r23, 7
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN5Print5printEli+0x36>
  36:	6d e2       	ldi	r22, 0x2D	; 45
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEli>
  3c:	6c 01       	movw	r12, r24
  3e:	44 27       	eor	r20, r20
  40:	55 27       	eor	r21, r21
  42:	ba 01       	movw	r22, r20
  44:	4e 19       	sub	r20, r14
  46:	5f 09       	sbc	r21, r15
  48:	60 0b       	sbc	r22, r16
  4a:	71 0b       	sbc	r23, r17
  4c:	ce 01       	movw	r24, r28
  4e:	2a e0       	ldi	r18, 0x0A	; 10
  50:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEli>
  54:	c8 0e       	add	r12, r24
  56:	d9 1e       	adc	r13, r25
  58:	00 c0       	rjmp	.+0      	; 0x5a <_ZN5Print5printEli+0x5a>
  5a:	2a e0       	ldi	r18, 0x0A	; 10
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEli>
  60:	6c 01       	movw	r12, r24
  62:	c6 01       	movw	r24, r12
  64:	df 91       	pop	r29
  66:	cf 91       	pop	r28
  68:	1f 91       	pop	r17
  6a:	0f 91       	pop	r16
  6c:	ff 90       	pop	r15
  6e:	ef 90       	pop	r14
  70:	df 90       	pop	r13
  72:	cf 90       	pop	r12
  74:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEli:

00000000 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEli>
   e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ce 01       	movw	r24, r28
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEli>
  16:	08 0f       	add	r16, r24
  18:	19 1f       	adc	r17, r25
  return n;
}
  1a:	c8 01       	movw	r24, r16
  1c:	df 91       	pop	r29
  1e:	cf 91       	pop	r28
  20:	1f 91       	pop	r17
  22:	0f 91       	pop	r16
  24:	08 95       	ret

Disassembly of section .text._ZN5Print5printEii:

00000000 <_ZN5Print5printEii>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	9a 01       	movw	r18, r20
   2:	fb 01       	movw	r30, r22
   4:	af 01       	movw	r20, r30
   6:	66 27       	eor	r22, r22
   8:	57 fd       	sbrc	r21, 7
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	60 95       	com	r22
   c:	76 2f       	mov	r23, r22
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEii>
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  12:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEii:

00000000 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	9a 01       	movw	r18, r20
   c:	cb 01       	movw	r24, r22
   e:	ac 01       	movw	r20, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	66 27       	eor	r22, r22
  12:	57 fd       	sbrc	r21, 7
  14:	60 95       	com	r22
  16:	76 2f       	mov	r23, r22
  18:	ce 01       	movw	r24, r28
  return n;
}
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEii>
  1e:	8c 01       	movw	r16, r24
  20:	ce 01       	movw	r24, r28
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEii>
  26:	08 0f       	add	r16, r24
  28:	19 1f       	adc	r17, r25
  2a:	c8 01       	movw	r24, r16
  2c:	df 91       	pop	r29
  2e:	cf 91       	pop	r28
  30:	1f 91       	pop	r17
  32:	0f 91       	pop	r16
  34:	08 95       	ret

Disassembly of section .text._ZN5Print10printFloatEdh:

00000000 <_ZN5Print10printFloatEdh>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	6f 92       	push	r6
   2:	7f 92       	push	r7
   4:	8f 92       	push	r8
   6:	9f 92       	push	r9
   8:	af 92       	push	r10
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
   e:	df 92       	push	r13
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ef 92       	push	r14
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  18:	cf 93       	push	r28
  return n;
}
  1a:	df 93       	push	r29
  1c:	ec 01       	movw	r28, r24
  1e:	5a 01       	movw	r10, r20
  20:	6b 01       	movw	r12, r22
  22:	82 2e       	mov	r8, r18
  24:	cb 01       	movw	r24, r22
  26:	ba 01       	movw	r22, r20
  28:	a6 01       	movw	r20, r12
  2a:	95 01       	movw	r18, r10
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  30:	88 23       	and	r24, r24
  32:	01 f0       	breq	.+0      	; 0x34 <_ZN5Print10printFloatEdh+0x34>
  34:	ce 01       	movw	r24, r28
  36:	60 e0       	ldi	r22, 0x00	; 0
  38:	70 e0       	ldi	r23, 0x00	; 0
  3a:	00 c0       	rjmp	.+0      	; 0x3c <_ZN5Print10printFloatEdh+0x3c>
  3c:	86 01       	movw	r16, r12
  3e:	75 01       	movw	r14, r10
  40:	e8 94       	clt
  42:	17 f9       	bld	r17, 7
  44:	c8 01       	movw	r24, r16
  46:	b7 01       	movw	r22, r14
  48:	2f ef       	ldi	r18, 0xFF	; 255
  4a:	3f ef       	ldi	r19, 0xFF	; 255
  4c:	4f e7       	ldi	r20, 0x7F	; 127
  4e:	5f e7       	ldi	r21, 0x7F	; 127
  50:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  54:	88 23       	and	r24, r24
  56:	01 f4       	brne	.+0      	; 0x58 <_ZN5Print10printFloatEdh+0x58>
  58:	c8 01       	movw	r24, r16
  5a:	b7 01       	movw	r22, r14
  5c:	2f ef       	ldi	r18, 0xFF	; 255
  5e:	3f ef       	ldi	r19, 0xFF	; 255
  60:	4f e7       	ldi	r20, 0x7F	; 127
  62:	5f e7       	ldi	r21, 0x7F	; 127
  64:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  68:	18 16       	cp	r1, r24
  6a:	04 f4       	brge	.+0      	; 0x6c <_ZN5Print10printFloatEdh+0x6c>
  6c:	ce 01       	movw	r24, r28
  6e:	60 e0       	ldi	r22, 0x00	; 0
  70:	70 e0       	ldi	r23, 0x00	; 0
  72:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  76:	5c 01       	movw	r10, r24
  78:	00 c0       	rjmp	.+0      	; 0x7a <_ZN5Print10printFloatEdh+0x7a>
  7a:	c6 01       	movw	r24, r12
  7c:	b5 01       	movw	r22, r10
  7e:	2f ef       	ldi	r18, 0xFF	; 255
  80:	3f ef       	ldi	r19, 0xFF	; 255
  82:	4f e7       	ldi	r20, 0x7F	; 127
  84:	5f e4       	ldi	r21, 0x4F	; 79
  86:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  8a:	18 16       	cp	r1, r24
  8c:	04 f0       	brlt	.+0      	; 0x8e <_ZN5Print10printFloatEdh+0x8e>
  8e:	c6 01       	movw	r24, r12
  90:	b5 01       	movw	r22, r10
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	3f ef       	ldi	r19, 0xFF	; 255
  96:	4f e7       	ldi	r20, 0x7F	; 127
  98:	5f ec       	ldi	r21, 0xCF	; 207
  9a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  9e:	87 ff       	sbrs	r24, 7
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <_ZN5Print10printFloatEdh+0xa2>
  a2:	ce 01       	movw	r24, r28
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	70 e0       	ldi	r23, 0x00	; 0
  a8:	00 c0       	rjmp	.+0      	; 0xaa <_ZN5Print10printFloatEdh+0xaa>
  aa:	c6 01       	movw	r24, r12
  ac:	b5 01       	movw	r22, r10
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	a9 01       	movw	r20, r18
  b4:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  b8:	87 ff       	sbrs	r24, 7
  ba:	00 c0       	rjmp	.+0      	; 0xbc <_ZN5Print10printFloatEdh+0xbc>
  bc:	ce 01       	movw	r24, r28
  be:	6d e2       	ldi	r22, 0x2D	; 45
  c0:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  c4:	3c 01       	movw	r6, r24
  c6:	d7 fa       	bst	r13, 7
  c8:	d0 94       	com	r13
  ca:	d7 f8       	bld	r13, 7
  cc:	d0 94       	com	r13
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <_ZN5Print10printFloatEdh+0xd0>
  d0:	66 24       	eor	r6, r6
  d2:	77 24       	eor	r7, r7
  d4:	10 e0       	ldi	r17, 0x00	; 0
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	2f e3       	ldi	r18, 0x3F	; 63
  de:	00 c0       	rjmp	.+0      	; 0xe0 <_ZN5Print10printFloatEdh+0xe0>
  e0:	da 01       	movw	r26, r20
  e2:	f9 01       	movw	r30, r18
  e4:	6b 2f       	mov	r22, r27
  e6:	74 2f       	mov	r23, r20
  e8:	8f 2f       	mov	r24, r31
  ea:	92 2f       	mov	r25, r18
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	40 e2       	ldi	r20, 0x20	; 32
  f2:	51 e4       	ldi	r21, 0x41	; 65
  f4:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  f8:	56 2f       	mov	r21, r22
  fa:	47 2f       	mov	r20, r23
  fc:	38 2f       	mov	r19, r24
  fe:	29 2f       	mov	r18, r25
 100:	1f 5f       	subi	r17, 0xFF	; 255
 102:	18 15       	cp	r17, r8
 104:	00 f0       	brcs	.+0      	; 0x106 <_ZN5Print10printFloatEdh+0x106>
 106:	c6 01       	movw	r24, r12
 108:	b5 01       	movw	r22, r10
 10a:	da 01       	movw	r26, r20
 10c:	f9 01       	movw	r30, r18
 10e:	2b 2f       	mov	r18, r27
 110:	34 2f       	mov	r19, r20
 112:	4f 2f       	mov	r20, r31
 114:	5e 2f       	mov	r21, r30
 116:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 11a:	d6 2e       	mov	r13, r22
 11c:	f7 2e       	mov	r15, r23
 11e:	08 2f       	mov	r16, r24
 120:	c9 2e       	mov	r12, r25
 122:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 126:	16 2f       	mov	r17, r22
 128:	e7 2e       	mov	r14, r23
 12a:	5c 01       	movw	r10, r24
 12c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 130:	9b 01       	movw	r18, r22
 132:	ac 01       	movw	r20, r24
 134:	6d 2d       	mov	r22, r13
 136:	7f 2d       	mov	r23, r15
 138:	80 2f       	mov	r24, r16
 13a:	9c 2d       	mov	r25, r12
 13c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 140:	6b 01       	movw	r12, r22
 142:	f8 2e       	mov	r15, r24
 144:	09 2f       	mov	r16, r25
 146:	ce 01       	movw	r24, r28
 148:	41 2f       	mov	r20, r17
 14a:	5e 2d       	mov	r21, r14
 14c:	b5 01       	movw	r22, r10
 14e:	2a e0       	ldi	r18, 0x0A	; 10
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 156:	5c 01       	movw	r10, r24
 158:	a6 0c       	add	r10, r6
 15a:	b7 1c       	adc	r11, r7
 15c:	88 20       	and	r8, r8
 15e:	01 f0       	breq	.+0      	; 0x160 <_ZN5Print10printFloatEdh+0x160>
 160:	ce 01       	movw	r24, r28
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 16a:	a8 0e       	add	r10, r24
 16c:	b9 1e       	adc	r11, r25
 16e:	00 c0       	rjmp	.+0      	; 0x170 <_ZN5Print10printFloatEdh+0x170>
 170:	6c 2d       	mov	r22, r12
 172:	7d 2d       	mov	r23, r13
 174:	8f 2d       	mov	r24, r15
 176:	90 2f       	mov	r25, r16
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	40 e2       	ldi	r20, 0x20	; 32
 17e:	51 e4       	ldi	r21, 0x41	; 65
 180:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 184:	d6 2e       	mov	r13, r22
 186:	c7 2e       	mov	r12, r23
 188:	98 2e       	mov	r9, r24
 18a:	79 2e       	mov	r7, r25
 18c:	a6 01       	movw	r20, r12
 18e:	65 2f       	mov	r22, r21
 190:	74 2f       	mov	r23, r20
 192:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 196:	7b 01       	movw	r14, r22
 198:	00 27       	eor	r16, r16
 19a:	f7 fc       	sbrc	r15, 7
 19c:	00 95       	com	r16
 19e:	10 2f       	mov	r17, r16
 1a0:	ce 01       	movw	r24, r28
 1a2:	b8 01       	movw	r22, r16
 1a4:	a7 01       	movw	r20, r14
 1a6:	2a e0       	ldi	r18, 0x0A	; 10
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 1ae:	a8 0e       	add	r10, r24
 1b0:	b9 1e       	adc	r11, r25
 1b2:	c8 01       	movw	r24, r16
 1b4:	b7 01       	movw	r22, r14
 1b6:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 1ba:	9b 01       	movw	r18, r22
 1bc:	ac 01       	movw	r20, r24
 1be:	d6 01       	movw	r26, r12
 1c0:	6b 2f       	mov	r22, r27
 1c2:	7a 2f       	mov	r23, r26
 1c4:	89 2d       	mov	r24, r9
 1c6:	97 2d       	mov	r25, r7
 1c8:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 1cc:	6b 01       	movw	r12, r22
 1ce:	f8 2e       	mov	r15, r24
 1d0:	09 2f       	mov	r16, r25
 1d2:	8a 94       	dec	r8
 1d4:	88 20       	and	r8, r8
 1d6:	01 f4       	brne	.+0      	; 0x1d8 <_ZN5Print10printFloatEdh+0x1d8>
 1d8:	c5 01       	movw	r24, r10
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	ff 90       	pop	r15
 1e4:	ef 90       	pop	r14
 1e6:	df 90       	pop	r13
 1e8:	cf 90       	pop	r12
 1ea:	bf 90       	pop	r11
 1ec:	af 90       	pop	r10
 1ee:	9f 90       	pop	r9
 1f0:	8f 90       	pop	r8
 1f2:	7f 90       	pop	r7
 1f4:	6f 90       	pop	r6
 1f6:	08 95       	ret

Disassembly of section .text._ZN5Print5printEdi:

00000000 <_ZN5Print5printEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEdi>
   4:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEdi:

00000000 <_ZN5Print7printlnEdi>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEdi>
   e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ce 01       	movw	r24, r28
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEdi>
  16:	08 0f       	add	r16, r24
  18:	19 1f       	adc	r17, r25
  return n;
}
  1a:	c8 01       	movw	r24, r16
  1c:	df 91       	pop	r29
  1e:	cf 91       	pop	r28
  20:	1f 91       	pop	r17
  22:	0f 91       	pop	r16
  24:	08 95       	ret

Stream.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000001  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000035  2**0
                  ALLOC
  3 .stab         00001230  00000000  00000000  00000038  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00003270  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN6Stream9timedReadEv 00000058  00000000  00000000  000044d8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN6Stream9timedPeekEv 00000058  00000000  00000000  00004530  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN6Stream13peekNextDigitEv 00000038  00000000  00000000  00004588  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN6Stream10setTimeoutEm 0000000c  00000000  00000000  000045c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text._ZN6Stream9findUntilEPcjS0_j 000000c8  00000000  00000000  000045cc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN6Stream9findUntilEPcS0_ 0000003a  00000000  00000000  00004694  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN6Stream4findEPc 0000000a  00000000  00000000  000046ce  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN6Stream4findEPcj 00000016  00000000  00000000  000046d8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN6Stream8parseIntEc 000000e2  00000000  00000000  000046ee  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN6Stream8parseIntEv 00000008  00000000  00000000  000047d0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN6Stream10parseFloatEc 0000014a  00000000  00000000  000047d8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN6Stream10parseFloatEv 00000008  00000000  00000000  00004922  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN6Stream9readBytesEPcj 00000046  00000000  00000000  0000492a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN6Stream14readBytesUntilEcPcj 00000068  00000000  00000000  00004970  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN6Stream10readStringEv 00000034  00000000  00000000  000049d8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN6Stream15readStringUntilEc 00000052  00000000  00000000  00004a0c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text._ZN6Stream9timedReadEv:

00000000 <_ZN6Stream9timedReadEv>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
   a:	68 87       	std	Y+8, r22	; 0x08
   c:	79 87       	std	Y+9, r23	; 0x09
   e:	8a 87       	std	Y+10, r24	; 0x0a
  10:	9b 87       	std	Y+11, r25	; 0x0b
  String ret;
  12:	e8 81       	ld	r30, Y
  14:	f9 81       	ldd	r31, Y+1	; 0x01
  16:	06 80       	ldd	r0, Z+6	; 0x06
  18:	f7 81       	ldd	r31, Z+7	; 0x07
  int c = timedRead();
  1a:	e0 2d       	mov	r30, r0
  1c:	ce 01       	movw	r24, r28
  1e:	19 95       	eicall
  20:	9c 01       	movw	r18, r24
  while (c >= 0 && c != terminator)
  22:	97 ff       	sbrs	r25, 7
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN6Stream9timedReadEv+0x26>
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
  2a:	28 85       	ldd	r18, Y+8	; 0x08
  2c:	39 85       	ldd	r19, Y+9	; 0x09
  2e:	4a 85       	ldd	r20, Y+10	; 0x0a
  30:	5b 85       	ldd	r21, Y+11	; 0x0b
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
  32:	62 1b       	sub	r22, r18
  34:	73 0b       	sbc	r23, r19
  36:	84 0b       	sbc	r24, r20
  {
    ret += (char)c;
    c = timedRead();
  38:	95 0b       	sbc	r25, r21
  3a:	2c 81       	ldd	r18, Y+4	; 0x04
  3c:	3d 81       	ldd	r19, Y+5	; 0x05
  3e:	4e 81       	ldd	r20, Y+6	; 0x06
  40:	5f 81       	ldd	r21, Y+7	; 0x07
  }
  return ret;
}
  42:	62 17       	cp	r22, r18
  44:	73 07       	cpc	r23, r19
  46:	84 07       	cpc	r24, r20
  48:	95 07       	cpc	r25, r21
  4a:	00 f0       	brcs	.+0      	; 0x4c <_ZN6Stream9timedReadEv+0x4c>
  4c:	2f ef       	ldi	r18, 0xFF	; 255
  4e:	3f ef       	ldi	r19, 0xFF	; 255
  50:	c9 01       	movw	r24, r18
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	08 95       	ret

Disassembly of section .text._ZN6Stream9timedPeekEv:

00000000 <_ZN6Stream9timedPeekEv>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedPeekEv>
   a:	68 87       	std	Y+8, r22	; 0x08
   c:	79 87       	std	Y+9, r23	; 0x09
   e:	8a 87       	std	Y+10, r24	; 0x0a
  10:	9b 87       	std	Y+11, r25	; 0x0b
  String ret;
  12:	e8 81       	ld	r30, Y
  14:	f9 81       	ldd	r31, Y+1	; 0x01
  16:	00 84       	ldd	r0, Z+8	; 0x08
  18:	f1 85       	ldd	r31, Z+9	; 0x09
  int c = timedRead();
  1a:	e0 2d       	mov	r30, r0
  1c:	ce 01       	movw	r24, r28
  1e:	19 95       	eicall
  20:	9c 01       	movw	r18, r24
  while (c >= 0 && c != terminator)
  22:	97 ff       	sbrs	r25, 7
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN6Stream9timedPeekEv+0x26>
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedPeekEv>
  2a:	28 85       	ldd	r18, Y+8	; 0x08
  2c:	39 85       	ldd	r19, Y+9	; 0x09
  2e:	4a 85       	ldd	r20, Y+10	; 0x0a
  30:	5b 85       	ldd	r21, Y+11	; 0x0b
  32:	62 1b       	sub	r22, r18
  34:	73 0b       	sbc	r23, r19
  36:	84 0b       	sbc	r24, r20
  {
    ret += (char)c;
    c = timedRead();
  38:	95 0b       	sbc	r25, r21
  3a:	2c 81       	ldd	r18, Y+4	; 0x04
  3c:	3d 81       	ldd	r19, Y+5	; 0x05
  3e:	4e 81       	ldd	r20, Y+6	; 0x06
  40:	5f 81       	ldd	r21, Y+7	; 0x07
  }
  return ret;
}
  42:	62 17       	cp	r22, r18
  44:	73 07       	cpc	r23, r19
  46:	84 07       	cpc	r24, r20
  48:	95 07       	cpc	r25, r21
  4a:	00 f0       	brcs	.+0      	; 0x4c <_ZN6Stream9timedPeekEv+0x4c>
  4c:	2f ef       	ldi	r18, 0xFF	; 255
  4e:	3f ef       	ldi	r19, 0xFF	; 255
  50:	c9 01       	movw	r24, r18
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	08 95       	ret

Disassembly of section .text._ZN6Stream13peekNextDigitEv:

00000000 <_ZN6Stream13peekNextDigitEv>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	ce 01       	movw	r24, r28
   8:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream13peekNextDigitEv>
   c:	9c 01       	movw	r18, r24
   e:	97 fd       	sbrc	r25, 7
  10:	00 c0       	rjmp	.+0      	; 0x12 <_ZN6Stream13peekNextDigitEv+0x12>
  String ret;
  12:	8d 32       	cpi	r24, 0x2D	; 45
  14:	91 05       	cpc	r25, r1
  16:	01 f0       	breq	.+0      	; 0x18 <_ZN6Stream13peekNextDigitEv+0x18>
  18:	c0 97       	sbiw	r24, 0x30	; 48
  int c = timedRead();
  1a:	8a 30       	cpi	r24, 0x0A	; 10
  1c:	91 05       	cpc	r25, r1
  1e:	00 f0       	brcs	.+0      	; 0x20 <_ZN6Stream13peekNextDigitEv+0x20>
  20:	e8 81       	ld	r30, Y
  while (c >= 0 && c != terminator)
  22:	f9 81       	ldd	r31, Y+1	; 0x01
  24:	06 80       	ldd	r0, Z+6	; 0x06
  26:	f7 81       	ldd	r31, Z+7	; 0x07
  28:	e0 2d       	mov	r30, r0
  2a:	ce 01       	movw	r24, r28
  2c:	19 95       	eicall
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZN6Stream13peekNextDigitEv+0x30>
  30:	c9 01       	movw	r24, r18
  32:	df 91       	pop	r29
  34:	cf 91       	pop	r28
  36:	08 95       	ret

Disassembly of section .text._ZN6Stream10setTimeoutEm:

00000000 <_ZN6Stream10setTimeoutEm>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   0:	fc 01       	movw	r30, r24
   2:	44 83       	std	Z+4, r20	; 0x04
   4:	55 83       	std	Z+5, r21	; 0x05
   6:	66 83       	std	Z+6, r22	; 0x06
   8:	77 83       	std	Z+7, r23	; 0x07
   a:	08 95       	ret

Disassembly of section .text._ZN6Stream9findUntilEPcjS0_j:

00000000 <_ZN6Stream9findUntilEPcjS0_j>:
   0:	6f 92       	push	r6
   2:	7f 92       	push	r7
   4:	8f 92       	push	r8
   6:	9f 92       	push	r9
   8:	af 92       	push	r10
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
   e:	df 92       	push	r13
  10:	ef 92       	push	r14
  String ret;
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  18:	cf 93       	push	r28
  int c = timedRead();
  1a:	df 93       	push	r29
  1c:	3c 01       	movw	r6, r24
  1e:	6b 01       	movw	r12, r22
  20:	4a 01       	movw	r8, r20
  while (c >= 0 && c != terminator)
  22:	59 01       	movw	r10, r18
  24:	78 01       	movw	r14, r16
  26:	fb 01       	movw	r30, r22
  28:	80 81       	ld	r24, Z
  2a:	88 23       	and	r24, r24
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZN6Stream9findUntilEPcjS0_j+0x2e>
  2e:	00 e0       	ldi	r16, 0x00	; 0
  30:	10 e0       	ldi	r17, 0x00	; 0
  32:	c0 e0       	ldi	r28, 0x00	; 0
  34:	d0 e0       	ldi	r29, 0x00	; 0
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZN6Stream9findUntilEPcjS0_j+0x38>
  {
    ret += (char)c;
    c = timedRead();
  38:	f6 01       	movw	r30, r12
  3a:	ec 0f       	add	r30, r28
  3c:	fd 1f       	adc	r31, r29
  3e:	20 81       	ld	r18, Z
  40:	33 27       	eor	r19, r19
  }
  return ret;
}
  42:	27 fd       	sbrc	r18, 7
  44:	30 95       	com	r19
  46:	82 17       	cp	r24, r18
  48:	93 07       	cpc	r25, r19
  4a:	01 f0       	breq	.+0      	; 0x4c <_ZN6Stream9findUntilEPcjS0_j+0x4c>
  4c:	c0 e0       	ldi	r28, 0x00	; 0
  4e:	d0 e0       	ldi	r29, 0x00	; 0
  50:	f6 01       	movw	r30, r12
  52:	ec 0f       	add	r30, r28
  54:	fd 1f       	adc	r31, r29
  56:	20 81       	ld	r18, Z
  58:	33 27       	eor	r19, r19
  5a:	27 fd       	sbrc	r18, 7
  5c:	30 95       	com	r19
  5e:	82 17       	cp	r24, r18
  60:	93 07       	cpc	r25, r19
  62:	01 f4       	brne	.+0      	; 0x64 <_ZN6Stream9findUntilEPcjS0_j+0x64>
  64:	21 96       	adiw	r28, 0x01	; 1
  66:	c8 15       	cp	r28, r8
  68:	d9 05       	cpc	r29, r9
  6a:	00 f4       	brcc	.+0      	; 0x6c <_ZN6Stream9findUntilEPcjS0_j+0x6c>
  6c:	e1 14       	cp	r14, r1
  6e:	f1 04       	cpc	r15, r1
  70:	01 f0       	breq	.+0      	; 0x72 <_ZN6Stream9findUntilEPcjS0_j+0x72>
  72:	f5 01       	movw	r30, r10
  74:	e0 0f       	add	r30, r16
  76:	f1 1f       	adc	r31, r17
  78:	20 81       	ld	r18, Z
  7a:	33 27       	eor	r19, r19
  7c:	27 fd       	sbrc	r18, 7
  7e:	30 95       	com	r19
  80:	82 17       	cp	r24, r18
  82:	93 07       	cpc	r25, r19
  84:	01 f4       	brne	.+0      	; 0x86 <_ZN6Stream9findUntilEPcjS0_j+0x86>
  86:	0f 5f       	subi	r16, 0xFF	; 255
  88:	1f 4f       	sbci	r17, 0xFF	; 255
  8a:	0e 15       	cp	r16, r14
  8c:	1f 05       	cpc	r17, r15
  8e:	00 f0       	brcs	.+0      	; 0x90 <_ZN6Stream9findUntilEPcjS0_j+0x90>
  90:	00 c0       	rjmp	.+0      	; 0x92 <_ZN6Stream9findUntilEPcjS0_j+0x92>
  92:	00 e0       	ldi	r16, 0x00	; 0
  94:	10 e0       	ldi	r17, 0x00	; 0
  96:	c3 01       	movw	r24, r6
  98:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9findUntilEPcjS0_j>
  9c:	18 16       	cp	r1, r24
  9e:	19 06       	cpc	r1, r25
  a0:	04 f0       	brlt	.+0      	; 0xa2 <_ZN6Stream9findUntilEPcjS0_j+0xa2>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <_ZN6Stream9findUntilEPcjS0_j+0xa4>
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <_ZN6Stream9findUntilEPcjS0_j+0xa8>
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	df 91       	pop	r29
  ac:	cf 91       	pop	r28
  ae:	1f 91       	pop	r17
  b0:	0f 91       	pop	r16
  b2:	ff 90       	pop	r15
  b4:	ef 90       	pop	r14
  b6:	df 90       	pop	r13
  b8:	cf 90       	pop	r12
  ba:	bf 90       	pop	r11
  bc:	af 90       	pop	r10
  be:	9f 90       	pop	r9
  c0:	8f 90       	pop	r8
  c2:	7f 90       	pop	r7
  c4:	6f 90       	pop	r6
  c6:	08 95       	ret

Disassembly of section .text._ZN6Stream9findUntilEPcS0_:

00000000 <_ZN6Stream9findUntilEPcS0_>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	9a 01       	movw	r18, r20
   a:	fb 01       	movw	r30, r22
   c:	01 90       	ld	r0, Z+
   e:	00 20       	and	r0, r0
  10:	01 f4       	brne	.+0      	; 0x12 <_ZN6Stream9findUntilEPcS0_+0x12>
  String ret;
  12:	31 97       	sbiw	r30, 0x01	; 1
  14:	e6 1b       	sub	r30, r22
  16:	f7 0b       	sbc	r31, r23
  18:	ea 01       	movw	r28, r20
  int c = timedRead();
  1a:	09 90       	ld	r0, Y+
  1c:	00 20       	and	r0, r0
  1e:	01 f4       	brne	.+0      	; 0x20 <_ZN6Stream9findUntilEPcS0_+0x20>
  20:	8e 01       	movw	r16, r28
  while (c >= 0 && c != terminator)
  22:	01 50       	subi	r16, 0x01	; 1
  24:	10 40       	sbci	r17, 0x00	; 0
  26:	04 1b       	sub	r16, r20
  28:	15 0b       	sbc	r17, r21
  2a:	af 01       	movw	r20, r30
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9findUntilEPcS0_>
  30:	df 91       	pop	r29
  32:	cf 91       	pop	r28
  34:	1f 91       	pop	r17
  36:	0f 91       	pop	r16
  {
    ret += (char)c;
    c = timedRead();
  38:	08 95       	ret

Disassembly of section .text._ZN6Stream4findEPc:

00000000 <_ZN6Stream4findEPc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   0:	40 e0       	ldi	r20, 0x00	; 0
   2:	50 e0       	ldi	r21, 0x00	; 0
   4:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream4findEPc>
   8:	08 95       	ret

Disassembly of section .text._ZN6Stream4findEPcj:

00000000 <_ZN6Stream4findEPcj>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	20 e0       	ldi	r18, 0x00	; 0
   6:	30 e0       	ldi	r19, 0x00	; 0
   8:	00 e0       	ldi	r16, 0x00	; 0
   a:	10 e0       	ldi	r17, 0x00	; 0
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream4findEPcj>
  10:	1f 91       	pop	r17
  String ret;
  12:	0f 91       	pop	r16
  14:	08 95       	ret

Disassembly of section .text._ZN6Stream8parseIntEc:

00000000 <_ZN6Stream8parseIntEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   0:	9f 92       	push	r9
   2:	af 92       	push	r10
   4:	bf 92       	push	r11
   6:	cf 92       	push	r12
   8:	df 92       	push	r13
   a:	ef 92       	push	r14
   c:	ff 92       	push	r15
   e:	0f 93       	push	r16
  10:	1f 93       	push	r17
  String ret;
  12:	cf 93       	push	r28
  14:	df 93       	push	r29
  16:	6c 01       	movw	r12, r24
  18:	a6 2e       	mov	r10, r22
  int c = timedRead();
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntEc>
  1e:	ec 01       	movw	r28, r24
  20:	97 fd       	sbrc	r25, 7
  while (c >= 0 && c != terminator)
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN6Stream8parseIntEc+0x24>
  24:	ee 24       	eor	r14, r14
  26:	ff 24       	eor	r15, r15
  28:	87 01       	movw	r16, r14
  2a:	99 24       	eor	r9, r9
  2c:	bb 24       	eor	r11, r11
  2e:	a7 fc       	sbrc	r10, 7
  30:	b0 94       	com	r11
  32:	ca 15       	cp	r28, r10
  34:	db 05       	cpc	r29, r11
  36:	01 f0       	breq	.+0      	; 0x38 <_ZN6Stream8parseIntEc+0x38>
  {
    ret += (char)c;
    c = timedRead();
  38:	cd 32       	cpi	r28, 0x2D	; 45
  3a:	d1 05       	cpc	r29, r1
  3c:	01 f0       	breq	.+0      	; 0x3e <_ZN6Stream8parseIntEc+0x3e>
  3e:	ce 01       	movw	r24, r28
  40:	c0 97       	sbiw	r24, 0x30	; 48
  }
  return ret;
}
  42:	8a 30       	cpi	r24, 0x0A	; 10
  44:	91 05       	cpc	r25, r1
  46:	00 f4       	brcc	.+0      	; 0x48 <_ZN6Stream8parseIntEc+0x48>
  48:	c8 01       	movw	r24, r16
  4a:	b7 01       	movw	r22, r14
  4c:	2a e0       	ldi	r18, 0x0A	; 10
  4e:	30 e0       	ldi	r19, 0x00	; 0
  50:	40 e0       	ldi	r20, 0x00	; 0
  52:	50 e0       	ldi	r21, 0x00	; 0
  54:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntEc>
  58:	7b 01       	movw	r14, r22
  5a:	8c 01       	movw	r16, r24
  5c:	ce 01       	movw	r24, r28
  5e:	aa 27       	eor	r26, r26
  60:	97 fd       	sbrc	r25, 7
  62:	a0 95       	com	r26
  64:	ba 2f       	mov	r27, r26
  66:	e8 0e       	add	r14, r24
  68:	f9 1e       	adc	r15, r25
  6a:	0a 1f       	adc	r16, r26
  6c:	1b 1f       	adc	r17, r27
  6e:	80 ed       	ldi	r24, 0xD0	; 208
  70:	9f ef       	ldi	r25, 0xFF	; 255
  72:	af ef       	ldi	r26, 0xFF	; 255
  74:	bf ef       	ldi	r27, 0xFF	; 255
  76:	e8 0e       	add	r14, r24
  78:	f9 1e       	adc	r15, r25
  7a:	0a 1f       	adc	r16, r26
  7c:	1b 1f       	adc	r17, r27
  7e:	00 c0       	rjmp	.+0      	; 0x80 <_ZN6Stream8parseIntEc+0x80>
  80:	99 24       	eor	r9, r9
  82:	93 94       	inc	r9
  84:	d6 01       	movw	r26, r12
  86:	ed 91       	ld	r30, X+
  88:	fc 91       	ld	r31, X
  8a:	06 80       	ldd	r0, Z+6	; 0x06
  8c:	f7 81       	ldd	r31, Z+7	; 0x07
  8e:	e0 2d       	mov	r30, r0
  90:	c6 01       	movw	r24, r12
  92:	19 95       	eicall
  94:	c6 01       	movw	r24, r12
  96:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntEc>
  9a:	ec 01       	movw	r28, r24
  9c:	c0 97       	sbiw	r24, 0x30	; 48
  9e:	8a 30       	cpi	r24, 0x0A	; 10
  a0:	91 05       	cpc	r25, r1
  a2:	00 f0       	brcs	.+0      	; 0xa4 <_ZN6Stream8parseIntEc+0xa4>
  a4:	ca 15       	cp	r28, r10
  a6:	db 05       	cpc	r29, r11
  a8:	01 f0       	breq	.+0      	; 0xaa <_ZN6Stream8parseIntEc+0xaa>
  aa:	99 20       	and	r9, r9
  ac:	01 f0       	breq	.+0      	; 0xae <_ZN6Stream8parseIntEc+0xae>
  ae:	10 95       	com	r17
  b0:	00 95       	com	r16
  b2:	f0 94       	com	r15
  b4:	e0 94       	com	r14
  b6:	e1 1c       	adc	r14, r1
  b8:	f1 1c       	adc	r15, r1
  ba:	01 1d       	adc	r16, r1
  bc:	11 1d       	adc	r17, r1
  be:	00 c0       	rjmp	.+0      	; 0xc0 <_ZN6Stream8parseIntEc+0xc0>
  c0:	ee 24       	eor	r14, r14
  c2:	ff 24       	eor	r15, r15
  c4:	87 01       	movw	r16, r14
  c6:	b7 01       	movw	r22, r14
  c8:	c8 01       	movw	r24, r16
  ca:	df 91       	pop	r29
  cc:	cf 91       	pop	r28
  ce:	1f 91       	pop	r17
  d0:	0f 91       	pop	r16
  d2:	ff 90       	pop	r15
  d4:	ef 90       	pop	r14
  d6:	df 90       	pop	r13
  d8:	cf 90       	pop	r12
  da:	bf 90       	pop	r11
  dc:	af 90       	pop	r10
  de:	9f 90       	pop	r9
  e0:	08 95       	ret

Disassembly of section .text._ZN6Stream8parseIntEv:

00000000 <_ZN6Stream8parseIntEv>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   0:	61 e0       	ldi	r22, 0x01	; 1
   2:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntEv>
   6:	08 95       	ret

Disassembly of section .text._ZN6Stream10parseFloatEc:

00000000 <_ZN6Stream10parseFloatEc>:
   0:	6f 92       	push	r6
   2:	7f 92       	push	r7
   4:	8f 92       	push	r8
   6:	9f 92       	push	r9
   8:	af 92       	push	r10
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
   e:	df 92       	push	r13
  10:	ef 92       	push	r14
  String ret;
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  18:	cf 93       	push	r28
  int c = timedRead();
  1a:	df 93       	push	r29
  1c:	ec 01       	movw	r28, r24
  1e:	76 2e       	mov	r7, r22
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  while (c >= 0 && c != terminator)
  24:	d8 2e       	mov	r13, r24
  26:	87 fd       	sbrc	r24, 7
  28:	00 c0       	rjmp	.+0      	; 0x2a <_ZN6Stream10parseFloatEc+0x2a>
  2a:	bb 24       	eor	r11, r11
  2c:	aa 24       	eor	r10, r10
  2e:	90 e8       	ldi	r25, 0x80	; 128
  30:	99 2e       	mov	r9, r25
  32:	8f e3       	ldi	r24, 0x3F	; 63
  34:	88 2e       	mov	r8, r24
  36:	ee 24       	eor	r14, r14
  {
    ret += (char)c;
    c = timedRead();
  38:	ff 24       	eor	r15, r15
  3a:	87 01       	movw	r16, r14
  3c:	cc 24       	eor	r12, r12
  3e:	66 24       	eor	r6, r6
  40:	d7 14       	cp	r13, r7
  }
  return ret;
}
  42:	01 f0       	breq	.+0      	; 0x44 <_ZN6Stream10parseFloatEc+0x44>
  44:	8d 2d       	mov	r24, r13
  46:	8d 32       	cpi	r24, 0x2D	; 45
  48:	01 f0       	breq	.+0      	; 0x4a <_ZN6Stream10parseFloatEc+0x4a>
  4a:	8e 32       	cpi	r24, 0x2E	; 46
  4c:	01 f0       	breq	.+0      	; 0x4e <_ZN6Stream10parseFloatEc+0x4e>
  4e:	80 53       	subi	r24, 0x30	; 48
  50:	8a 30       	cpi	r24, 0x0A	; 10
  52:	00 f4       	brcc	.+0      	; 0x54 <_ZN6Stream10parseFloatEc+0x54>
  54:	c8 01       	movw	r24, r16
  56:	b7 01       	movw	r22, r14
  58:	2a e0       	ldi	r18, 0x0A	; 10
  5a:	30 e0       	ldi	r19, 0x00	; 0
  5c:	40 e0       	ldi	r20, 0x00	; 0
  5e:	50 e0       	ldi	r21, 0x00	; 0
  60:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  64:	7b 01       	movw	r14, r22
  66:	8c 01       	movw	r16, r24
  68:	8d 2d       	mov	r24, r13
  6a:	99 27       	eor	r25, r25
  6c:	87 fd       	sbrc	r24, 7
  6e:	90 95       	com	r25
  70:	a9 2f       	mov	r26, r25
  72:	b9 2f       	mov	r27, r25
  74:	e8 0e       	add	r14, r24
  76:	f9 1e       	adc	r15, r25
  78:	0a 1f       	adc	r16, r26
  7a:	1b 1f       	adc	r17, r27
  7c:	80 ed       	ldi	r24, 0xD0	; 208
  7e:	9f ef       	ldi	r25, 0xFF	; 255
  80:	af ef       	ldi	r26, 0xFF	; 255
  82:	bf ef       	ldi	r27, 0xFF	; 255
  84:	e8 0e       	add	r14, r24
  86:	f9 1e       	adc	r15, r25
  88:	0a 1f       	adc	r16, r26
  8a:	1b 1f       	adc	r17, r27
  8c:	cc 20       	and	r12, r12
  8e:	01 f0       	breq	.+0      	; 0x90 <_ZN6Stream10parseFloatEc+0x90>
  90:	a5 01       	movw	r20, r10
  92:	94 01       	movw	r18, r8
  94:	65 2f       	mov	r22, r21
  96:	7a 2d       	mov	r23, r10
  98:	83 2f       	mov	r24, r19
  9a:	98 2d       	mov	r25, r8
  9c:	2d ec       	ldi	r18, 0xCD	; 205
  9e:	3c ec       	ldi	r19, 0xCC	; 204
  a0:	4c ec       	ldi	r20, 0xCC	; 204
  a2:	5d e3       	ldi	r21, 0x3D	; 61
  a4:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  a8:	b6 2e       	mov	r11, r22
  aa:	a7 2e       	mov	r10, r23
  ac:	98 2e       	mov	r9, r24
  ae:	89 2e       	mov	r8, r25
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <_ZN6Stream10parseFloatEc+0xb2>
  b2:	66 24       	eor	r6, r6
  b4:	63 94       	inc	r6
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <_ZN6Stream10parseFloatEc+0xb8>
  b8:	cc 24       	eor	r12, r12
  ba:	c3 94       	inc	r12
  bc:	e8 81       	ld	r30, Y
  be:	f9 81       	ldd	r31, Y+1	; 0x01
  c0:	06 80       	ldd	r0, Z+6	; 0x06
  c2:	f7 81       	ldd	r31, Z+7	; 0x07
  c4:	e0 2d       	mov	r30, r0
  c6:	ce 01       	movw	r24, r28
  c8:	19 95       	eicall
  ca:	ce 01       	movw	r24, r28
  cc:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  d0:	d8 2e       	mov	r13, r24
  d2:	98 2f       	mov	r25, r24
  d4:	90 53       	subi	r25, 0x30	; 48
  d6:	9a 30       	cpi	r25, 0x0A	; 10
  d8:	00 f4       	brcc	.+0      	; 0xda <_ZN6Stream10parseFloatEc+0xda>
  da:	00 c0       	rjmp	.+0      	; 0xdc <_ZN6Stream10parseFloatEc+0xdc>
  dc:	8e 32       	cpi	r24, 0x2E	; 46
  de:	01 f4       	brne	.+0      	; 0xe0 <_ZN6Stream10parseFloatEc+0xe0>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <_ZN6Stream10parseFloatEc+0xe2>
  e2:	87 15       	cp	r24, r7
  e4:	01 f4       	brne	.+0      	; 0xe6 <_ZN6Stream10parseFloatEc+0xe6>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <_ZN6Stream10parseFloatEc+0xe8>
  e8:	66 20       	and	r6, r6
  ea:	01 f0       	breq	.+0      	; 0xec <_ZN6Stream10parseFloatEc+0xec>
  ec:	10 95       	com	r17
  ee:	00 95       	com	r16
  f0:	f0 94       	com	r15
  f2:	e0 94       	com	r14
  f4:	e1 1c       	adc	r14, r1
  f6:	f1 1c       	adc	r15, r1
  f8:	01 1d       	adc	r16, r1
  fa:	11 1d       	adc	r17, r1
  fc:	cc 20       	and	r12, r12
  fe:	01 f0       	breq	.+0      	; 0x100 <_ZN6Stream10parseFloatEc+0x100>
 100:	c8 01       	movw	r24, r16
 102:	b7 01       	movw	r22, r14
 104:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
 108:	d5 01       	movw	r26, r10
 10a:	f4 01       	movw	r30, r8
 10c:	2b 2f       	mov	r18, r27
 10e:	3a 2d       	mov	r19, r10
 110:	4f 2f       	mov	r20, r31
 112:	58 2d       	mov	r21, r8
 114:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
 118:	00 c0       	rjmp	.+0      	; 0x11a <_ZN6Stream10parseFloatEc+0x11a>
 11a:	c8 01       	movw	r24, r16
 11c:	b7 01       	movw	r22, r14
 11e:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
 122:	00 c0       	rjmp	.+0      	; 0x124 <_ZN6Stream10parseFloatEc+0x124>
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	1f 91       	pop	r17
 132:	0f 91       	pop	r16
 134:	ff 90       	pop	r15
 136:	ef 90       	pop	r14
 138:	df 90       	pop	r13
 13a:	cf 90       	pop	r12
 13c:	bf 90       	pop	r11
 13e:	af 90       	pop	r10
 140:	9f 90       	pop	r9
 142:	8f 90       	pop	r8
 144:	7f 90       	pop	r7
 146:	6f 90       	pop	r6
 148:	08 95       	ret

Disassembly of section .text._ZN6Stream10parseFloatEv:

00000000 <_ZN6Stream10parseFloatEv>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   0:	61 e0       	ldi	r22, 0x01	; 1
   2:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEv>
   6:	08 95       	ret

Disassembly of section .text._ZN6Stream9readBytesEPcj:

00000000 <_ZN6Stream9readBytesEPcj>:
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	6c 01       	movw	r12, r24
  String ret;
  12:	eb 01       	movw	r28, r22
  14:	7a 01       	movw	r14, r20
  16:	00 e0       	ldi	r16, 0x00	; 0
  18:	10 e0       	ldi	r17, 0x00	; 0
  int c = timedRead();
  1a:	00 c0       	rjmp	.+0      	; 0x1c <_ZN6Stream9readBytesEPcj+0x1c>
  1c:	c6 01       	movw	r24, r12
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9readBytesEPcj>
  while (c >= 0 && c != terminator)
  22:	97 fd       	sbrc	r25, 7
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN6Stream9readBytesEPcj+0x26>
  26:	89 93       	st	Y+, r24
  28:	0f 5f       	subi	r16, 0xFF	; 255
  2a:	1f 4f       	sbci	r17, 0xFF	; 255
  2c:	0e 15       	cp	r16, r14
  2e:	1f 05       	cpc	r17, r15
  30:	00 f0       	brcs	.+0      	; 0x32 <_ZN6Stream9readBytesEPcj+0x32>
  32:	c8 01       	movw	r24, r16
  34:	df 91       	pop	r29
  36:	cf 91       	pop	r28
  {
    ret += (char)c;
    c = timedRead();
  38:	1f 91       	pop	r17
  3a:	0f 91       	pop	r16
  3c:	ff 90       	pop	r15
  3e:	ef 90       	pop	r14
  40:	df 90       	pop	r13
  }
  return ret;
}
  42:	cf 90       	pop	r12
  44:	08 95       	ret

Disassembly of section .text._ZN6Stream14readBytesUntilEcPcj:

00000000 <_ZN6Stream14readBytesUntilEcPcj>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  String ret;
  12:	df 93       	push	r29
  14:	5c 01       	movw	r10, r24
  16:	ea 01       	movw	r28, r20
  18:	79 01       	movw	r14, r18
  int c = timedRead();
  1a:	21 15       	cp	r18, r1
  1c:	31 05       	cpc	r19, r1
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN6Stream14readBytesUntilEcPcj+0x20>
  20:	00 e0       	ldi	r16, 0x00	; 0
  while (c >= 0 && c != terminator)
  22:	10 e0       	ldi	r17, 0x00	; 0
  24:	c6 2e       	mov	r12, r22
  26:	dd 24       	eor	r13, r13
  28:	c7 fc       	sbrc	r12, 7
  2a:	d0 94       	com	r13
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZN6Stream14readBytesUntilEcPcj+0x2e>
  2e:	c5 01       	movw	r24, r10
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream14readBytesUntilEcPcj>
  34:	97 fd       	sbrc	r25, 7
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZN6Stream14readBytesUntilEcPcj+0x38>
  {
    ret += (char)c;
    c = timedRead();
  38:	8c 15       	cp	r24, r12
  3a:	9d 05       	cpc	r25, r13
  3c:	01 f0       	breq	.+0      	; 0x3e <_ZN6Stream14readBytesUntilEcPcj+0x3e>
  3e:	89 93       	st	Y+, r24
  40:	0f 5f       	subi	r16, 0xFF	; 255
  }
  return ret;
}
  42:	1f 4f       	sbci	r17, 0xFF	; 255
  44:	0e 15       	cp	r16, r14
  46:	1f 05       	cpc	r17, r15
  48:	00 f0       	brcs	.+0      	; 0x4a <_ZN6Stream14readBytesUntilEcPcj+0x4a>
  4a:	00 c0       	rjmp	.+0      	; 0x4c <_ZN6Stream14readBytesUntilEcPcj+0x4c>
  4c:	00 e0       	ldi	r16, 0x00	; 0
  4e:	10 e0       	ldi	r17, 0x00	; 0
  50:	c8 01       	movw	r24, r16
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	1f 91       	pop	r17
  58:	0f 91       	pop	r16
  5a:	ff 90       	pop	r15
  5c:	ef 90       	pop	r14
  5e:	df 90       	pop	r13
  60:	cf 90       	pop	r12
  62:	bf 90       	pop	r11
  64:	af 90       	pop	r10
  66:	08 95       	ret

Disassembly of section .text._ZN6Stream10readStringEv:

00000000 <_ZN6Stream10readStringEv>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	8c 01       	movw	r16, r24
   a:	eb 01       	movw	r28, r22
   c:	60 e0       	ldi	r22, 0x00	; 0
   e:	70 e0       	ldi	r23, 0x00	; 0
  10:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10readStringEv>
  String ret;
  14:	00 c0       	rjmp	.+0      	; 0x16 <_ZN6Stream10readStringEv+0x16>
  16:	c8 01       	movw	r24, r16
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10readStringEv>
  int c = timedRead();
  1c:	ce 01       	movw	r24, r28
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10readStringEv>
  while (c >= 0 && c != terminator)
  22:	bc 01       	movw	r22, r24
  24:	97 ff       	sbrs	r25, 7
  26:	00 c0       	rjmp	.+0      	; 0x28 <_ZN6Stream10readStringEv+0x28>
  28:	c8 01       	movw	r24, r16
  2a:	df 91       	pop	r29
  2c:	cf 91       	pop	r28
  2e:	1f 91       	pop	r17
  30:	0f 91       	pop	r16
  32:	08 95       	ret

Disassembly of section .text._ZN6Stream15readStringUntilEc:

00000000 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	7c 01       	movw	r14, r24
   e:	eb 01       	movw	r28, r22
  10:	04 2f       	mov	r16, r20
  String ret;
  12:	60 e0       	ldi	r22, 0x00	; 0
  14:	70 e0       	ldi	r23, 0x00	; 0
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream15readStringUntilEc>
  int c = timedRead();
  1a:	ce 01       	movw	r24, r28
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream15readStringUntilEc>
  20:	bc 01       	movw	r22, r24
  while (c >= 0 && c != terminator)
  22:	11 27       	eor	r17, r17
  24:	07 fd       	sbrc	r16, 7
  26:	10 95       	com	r17
  28:	77 fd       	sbrc	r23, 7
  2a:	00 c0       	rjmp	.+0      	; 0x2c <_ZN6Stream15readStringUntilEc+0x2c>
  2c:	60 17       	cp	r22, r16
  2e:	71 07       	cpc	r23, r17
  30:	01 f0       	breq	.+0      	; 0x32 <_ZN6Stream15readStringUntilEc+0x32>
  32:	c7 01       	movw	r24, r14
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream15readStringUntilEc>
  {
    ret += (char)c;
    c = timedRead();
  38:	ce 01       	movw	r24, r28
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream15readStringUntilEc>
  3e:	bc 01       	movw	r22, r24
  40:	00 c0       	rjmp	.+0      	; 0x42 <_ZN6Stream15readStringUntilEc+0x42>
  }
  return ret;
}
  42:	c7 01       	movw	r24, r14
  44:	df 91       	pop	r29
  46:	cf 91       	pop	r28
  48:	1f 91       	pop	r17
  4a:	0f 91       	pop	r16
  4c:	ff 90       	pop	r15
  4e:	ef 90       	pop	r14
  50:	08 95       	ret

Tone.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000f78  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00003069  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._Z4tonehjm 000005e4  00000000  00000000  00004015  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._Z12disableTimerh 00000066  00000000  00000000  000045f9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._Z6noToneh 0000002c  00000000  00000000  0000465f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.__vector_13 000000c0  00000000  00000000  0000468b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .bss.timer0_toggle_count 00000004  00000000  00000000  0000474b  2**0
                  ALLOC
 10 .bss.timer0_pin_port 00000002  00000000  00000000  0000474b  2**0
                  ALLOC
 11 .bss.timer0_pin_mask 00000001  00000000  00000000  0000474b  2**0
                  ALLOC
 12 .bss.timer1_toggle_count 00000004  00000000  00000000  0000474b  2**0
                  ALLOC
 13 .bss.timer1_pin_port 00000002  00000000  00000000  0000474b  2**0
                  ALLOC
 14 .bss.timer1_pin_mask 00000001  00000000  00000000  0000474b  2**0
                  ALLOC
 15 .bss.timer2_toggle_count 00000004  00000000  00000000  0000474b  2**0
                  ALLOC
 16 .bss.timer2_pin_port 00000002  00000000  00000000  0000474b  2**0
                  ALLOC
 17 .bss.timer2_pin_mask 00000001  00000000  00000000  0000474b  2**0
                  ALLOC
 18 .bss.timer3_toggle_count 00000004  00000000  00000000  0000474b  2**0
                  ALLOC
 19 .bss.timer3_pin_port 00000002  00000000  00000000  0000474b  2**0
                  ALLOC
 20 .bss.timer3_pin_mask 00000001  00000000  00000000  0000474b  2**0
                  ALLOC
 21 .bss.timer4_toggle_count 00000004  00000000  00000000  0000474b  2**0
                  ALLOC
 22 .bss.timer4_pin_port 00000002  00000000  00000000  0000474b  2**0
                  ALLOC
 23 .bss.timer4_pin_mask 00000001  00000000  00000000  0000474b  2**0
                  ALLOC
 24 .bss.timer5_toggle_count 00000004  00000000  00000000  0000474b  2**0
                  ALLOC
 25 .bss.timer5_pin_port 00000002  00000000  00000000  0000474b  2**0
                  ALLOC
 26 .bss.timer5_pin_mask 00000001  00000000  00000000  0000474b  2**0
                  ALLOC
 27 .data._ZL9tone_pins 00000001  00000000  00000000  0000474b  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 28 .progmem.data 00000001  00000000  00000000  0000474c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text._Z4tonehjm:

00000000 <_Z4tonehjm>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
   0:	2f 92       	push	r2
   2:	3f 92       	push	r3
   4:	4f 92       	push	r4
   6:	5f 92       	push	r5
   8:	6f 92       	push	r6
   a:	7f 92       	push	r7
   c:	8f 92       	push	r8
   e:	9f 92       	push	r9
  10:	af 92       	push	r10
  12:	bf 92       	push	r11
  14:	df 92       	push	r13
  16:	ef 92       	push	r14
  18:	ff 92       	push	r15
  1a:	0f 93       	push	r16
  1c:	1f 93       	push	r17
  1e:	df 93       	push	r29
  20:	cf 93       	push	r28
  22:	00 d0       	rcall	.+0      	; 0x24 <_Z4tonehjm+0x24>
  24:	0f 92       	push	r0

  if (timer2_toggle_count != 0)
  26:	cd b7       	in	r28, 0x3d	; 61
  28:	de b7       	in	r29, 0x3e	; 62
  2a:	1b 01       	movw	r2, r22
  2c:	29 83       	std	Y+1, r18	; 0x01
  2e:	3a 83       	std	Y+2, r19	; 0x02
  30:	4b 83       	std	Y+3, r20	; 0x03
  32:	5c 83       	std	Y+4, r21	; 0x04
  34:	90 91 00 00 	lds	r25, 0x0000
  38:	98 17       	cp	r25, r24
  3a:	01 f0       	breq	.+0      	; 0x3c <_Z4tonehjm+0x3c>
  3c:	9f 3f       	cpi	r25, 0xFF	; 255
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
  3e:	01 f0       	breq	.+0      	; 0x40 <_Z4tonehjm+0x40>
  40:	00 c0       	rjmp	.+0      	; 0x42 <_Z4tonehjm+0x42>
  42:	00 c0       	rjmp	.+0      	; 0x44 <_Z4tonehjm+0x44>
  44:	e0 e0       	ldi	r30, 0x00	; 0
  46:	f0 e0       	ldi	r31, 0x00	; 0
  48:	d4 90       	lpm	r13, Z+
  4a:	00 c0       	rjmp	.+0      	; 0x4c <_Z4tonehjm+0x4c>
  4c:	80 93 00 00 	sts	0x0000, r24

    if (timer2_toggle_count > 0)
  50:	e0 e0       	ldi	r30, 0x00	; 0
  52:	f0 e0       	ldi	r31, 0x00	; 0
  54:	d4 90       	lpm	r13, Z+
  56:	9d 2d       	mov	r25, r13
  58:	9f 3f       	cpi	r25, 0xFF	; 255
  5a:	01 f4       	brne	.+0      	; 0x5c <_Z4tonehjm+0x5c>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <_Z4tonehjm+0x5e>
  5e:	92 30       	cpi	r25, 0x02	; 2
  60:	01 f4       	brne	.+0      	; 0x62 <_Z4tonehjm+0x62>
  62:	00 c0       	rjmp	.+0      	; 0x64 <_Z4tonehjm+0x64>
  64:	93 30       	cpi	r25, 0x03	; 3
  66:	04 f4       	brge	.+0      	; 0x68 <_Z4tonehjm+0x68>
  68:	dd 20       	and	r13, r13
      timer2_toggle_count--;
  6a:	01 f0       	breq	.+0      	; 0x6c <_Z4tonehjm+0x6c>
  6c:	91 30       	cpi	r25, 0x01	; 1
  6e:	01 f0       	breq	.+0      	; 0x70 <_Z4tonehjm+0x70>
  70:	00 c0       	rjmp	.+0      	; 0x72 <_Z4tonehjm+0x72>
  72:	00 c0       	rjmp	.+0      	; 0x74 <_Z4tonehjm+0x74>
  74:	ad 2d       	mov	r26, r13
  76:	a4 30       	cpi	r26, 0x04	; 4
  78:	01 f4       	brne	.+0      	; 0x7a <_Z4tonehjm+0x7a>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <_Z4tonehjm+0x7c>
  7c:	a4 30       	cpi	r26, 0x04	; 4
  7e:	04 f4       	brge	.+0      	; 0x80 <_Z4tonehjm+0x80>
  80:	00 c0       	rjmp	.+0      	; 0x82 <_Z4tonehjm+0x82>
  82:	a5 30       	cpi	r26, 0x05	; 5
  84:	01 f0       	breq	.+0      	; 0x86 <_Z4tonehjm+0x86>
  86:	00 c0       	rjmp	.+0      	; 0x88 <_Z4tonehjm+0x88>
  88:	00 c0       	rjmp	.+0      	; 0x8a <_Z4tonehjm+0x8a>
  8a:	14 bc       	out	0x24, r1	; 36
  8c:	15 bc       	out	0x25, r1	; 37
  8e:	94 b5       	in	r25, 0x24	; 36
  90:	92 60       	ori	r25, 0x02	; 2
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
  92:	94 bd       	out	0x24, r25	; 36
  94:	95 b5       	in	r25, 0x25	; 37
  96:	91 60       	ori	r25, 0x01	; 1
  98:	95 bd       	out	0x25, r25	; 37
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
  9a:	28 2f       	mov	r18, r24
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	f9 01       	movw	r30, r18
  a0:	e0 50       	subi	r30, 0x00	; 0
  a2:	f0 40       	sbci	r31, 0x00	; 0
  a4:	e4 91       	lpm	r30, Z+
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	ee 0f       	add	r30, r30
  aa:	ff 1f       	adc	r31, r31
  ac:	e0 50       	subi	r30, 0x00	; 0
  ae:	f0 40       	sbci	r31, 0x00	; 0
  b0:	45 91       	lpm	r20, Z+
  b2:	54 91       	lpm	r21, Z+
  b4:	40 93 00 00 	sts	0x0000, r20
  b8:	50 93 00 00 	sts	0x0000, r21
  bc:	20 50       	subi	r18, 0x00	; 0
  be:	30 40       	sbci	r19, 0x00	; 0
  c0:	f9 01       	movw	r30, r18
  c2:	24 91       	lpm	r18, Z+
  c4:	20 93 00 00 	sts	0x0000, r18
  c8:	00 c0       	rjmp	.+0      	; 0xca <_Z4tonehjm+0xca>
  ca:	10 92 80 00 	sts	0x0080, r1
  ce:	10 92 81 00 	sts	0x0081, r1
  d2:	90 91 81 00 	lds	r25, 0x0081
  d6:	98 60       	ori	r25, 0x08	; 8
  d8:	90 93 81 00 	sts	0x0081, r25
  dc:	90 91 81 00 	lds	r25, 0x0081
  e0:	91 60       	ori	r25, 0x01	; 1
  e2:	90 93 81 00 	sts	0x0081, r25
  e6:	28 2f       	mov	r18, r24
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	f9 01       	movw	r30, r18
  ec:	e0 50       	subi	r30, 0x00	; 0
  ee:	f0 40       	sbci	r31, 0x00	; 0
  f0:	e4 91       	lpm	r30, Z+
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	ee 0f       	add	r30, r30
  f6:	ff 1f       	adc	r31, r31
  f8:	e0 50       	subi	r30, 0x00	; 0
  fa:	f0 40       	sbci	r31, 0x00	; 0
  fc:	45 91       	lpm	r20, Z+
  fe:	54 91       	lpm	r21, Z+
 100:	40 93 00 00 	sts	0x0000, r20
 104:	50 93 00 00 	sts	0x0000, r21
 108:	20 50       	subi	r18, 0x00	; 0
 10a:	30 40       	sbci	r19, 0x00	; 0
 10c:	f9 01       	movw	r30, r18
 10e:	24 91       	lpm	r18, Z+
 110:	20 93 00 00 	sts	0x0000, r18
 114:	00 c0       	rjmp	.+0      	; 0x116 <_Z4tonehjm+0x116>
 116:	10 92 b0 00 	sts	0x00B0, r1
 11a:	10 92 b1 00 	sts	0x00B1, r1
 11e:	90 91 b0 00 	lds	r25, 0x00B0
 122:	92 60       	ori	r25, 0x02	; 2
 124:	90 93 b0 00 	sts	0x00B0, r25
 128:	90 91 b1 00 	lds	r25, 0x00B1
 12c:	91 60       	ori	r25, 0x01	; 1
 12e:	90 93 b1 00 	sts	0x00B1, r25
 132:	28 2f       	mov	r18, r24
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	f9 01       	movw	r30, r18
 138:	e0 50       	subi	r30, 0x00	; 0
 13a:	f0 40       	sbci	r31, 0x00	; 0
 13c:	e4 91       	lpm	r30, Z+
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	ee 0f       	add	r30, r30
 142:	ff 1f       	adc	r31, r31
 144:	e0 50       	subi	r30, 0x00	; 0
 146:	f0 40       	sbci	r31, 0x00	; 0
 148:	45 91       	lpm	r20, Z+
 14a:	54 91       	lpm	r21, Z+
 14c:	40 93 00 00 	sts	0x0000, r20
 150:	50 93 00 00 	sts	0x0000, r21
 154:	20 50       	subi	r18, 0x00	; 0
 156:	30 40       	sbci	r19, 0x00	; 0
 158:	f9 01       	movw	r30, r18
 15a:	24 91       	lpm	r18, Z+
 15c:	20 93 00 00 	sts	0x0000, r18
 160:	00 c0       	rjmp	.+0      	; 0x162 <_Z4tonehjm+0x162>
 162:	10 92 90 00 	sts	0x0090, r1
 166:	10 92 91 00 	sts	0x0091, r1
 16a:	90 91 91 00 	lds	r25, 0x0091
 16e:	98 60       	ori	r25, 0x08	; 8
 170:	90 93 91 00 	sts	0x0091, r25
 174:	90 91 91 00 	lds	r25, 0x0091
 178:	91 60       	ori	r25, 0x01	; 1
 17a:	90 93 91 00 	sts	0x0091, r25
 17e:	28 2f       	mov	r18, r24
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	f9 01       	movw	r30, r18
 184:	e0 50       	subi	r30, 0x00	; 0
 186:	f0 40       	sbci	r31, 0x00	; 0
 188:	e4 91       	lpm	r30, Z+
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	ee 0f       	add	r30, r30
 18e:	ff 1f       	adc	r31, r31
 190:	e0 50       	subi	r30, 0x00	; 0
 192:	f0 40       	sbci	r31, 0x00	; 0
 194:	45 91       	lpm	r20, Z+
 196:	54 91       	lpm	r21, Z+
 198:	40 93 00 00 	sts	0x0000, r20
 19c:	50 93 00 00 	sts	0x0000, r21
 1a0:	20 50       	subi	r18, 0x00	; 0
 1a2:	30 40       	sbci	r19, 0x00	; 0
 1a4:	f9 01       	movw	r30, r18
 1a6:	24 91       	lpm	r18, Z+
 1a8:	20 93 00 00 	sts	0x0000, r18
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <_Z4tonehjm+0x1ae>
 1ae:	10 92 a0 00 	sts	0x00A0, r1
 1b2:	10 92 a1 00 	sts	0x00A1, r1
 1b6:	90 91 a1 00 	lds	r25, 0x00A1
 1ba:	98 60       	ori	r25, 0x08	; 8
 1bc:	90 93 a1 00 	sts	0x00A1, r25
 1c0:	90 91 a1 00 	lds	r25, 0x00A1
 1c4:	91 60       	ori	r25, 0x01	; 1
 1c6:	90 93 a1 00 	sts	0x00A1, r25
 1ca:	28 2f       	mov	r18, r24
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	f9 01       	movw	r30, r18
 1d0:	e0 50       	subi	r30, 0x00	; 0
 1d2:	f0 40       	sbci	r31, 0x00	; 0
 1d4:	e4 91       	lpm	r30, Z+
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	ee 0f       	add	r30, r30
 1da:	ff 1f       	adc	r31, r31
 1dc:	e0 50       	subi	r30, 0x00	; 0
 1de:	f0 40       	sbci	r31, 0x00	; 0
 1e0:	45 91       	lpm	r20, Z+
 1e2:	54 91       	lpm	r21, Z+
 1e4:	40 93 00 00 	sts	0x0000, r20
 1e8:	50 93 00 00 	sts	0x0000, r21
 1ec:	20 50       	subi	r18, 0x00	; 0
 1ee:	30 40       	sbci	r19, 0x00	; 0
 1f0:	f9 01       	movw	r30, r18
 1f2:	24 91       	lpm	r18, Z+
 1f4:	20 93 00 00 	sts	0x0000, r18
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <_Z4tonehjm+0x1fa>
 1fa:	10 92 20 01 	sts	0x0120, r1
 1fe:	10 92 21 01 	sts	0x0121, r1
 202:	90 91 21 01 	lds	r25, 0x0121
 206:	98 60       	ori	r25, 0x08	; 8
 208:	90 93 21 01 	sts	0x0121, r25
 20c:	90 91 21 01 	lds	r25, 0x0121
 210:	91 60       	ori	r25, 0x01	; 1
 212:	90 93 21 01 	sts	0x0121, r25
 216:	28 2f       	mov	r18, r24
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	f9 01       	movw	r30, r18
 21c:	e0 50       	subi	r30, 0x00	; 0
 21e:	f0 40       	sbci	r31, 0x00	; 0
 220:	e4 91       	lpm	r30, Z+
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	ee 0f       	add	r30, r30
 226:	ff 1f       	adc	r31, r31
 228:	e0 50       	subi	r30, 0x00	; 0
 22a:	f0 40       	sbci	r31, 0x00	; 0
 22c:	45 91       	lpm	r20, Z+
 22e:	54 91       	lpm	r21, Z+
 230:	40 93 00 00 	sts	0x0000, r20
 234:	50 93 00 00 	sts	0x0000, r21
 238:	20 50       	subi	r18, 0x00	; 0
 23a:	30 40       	sbci	r19, 0x00	; 0
 23c:	f9 01       	movw	r30, r18
 23e:	24 91       	lpm	r18, Z+
 240:	20 93 00 00 	sts	0x0000, r18
 244:	00 c0       	rjmp	.+0      	; 0x246 <_Z4tonehjm+0x246>
 246:	d7 fc       	sbrc	r13, 7
 248:	00 c0       	rjmp	.+0      	; 0x24a <_Z4tonehjm+0x24a>
 24a:	61 e0       	ldi	r22, 0x01	; 1
 24c:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 250:	dd 20       	and	r13, r13
 252:	01 f0       	breq	.+0      	; 0x254 <_Z4tonehjm+0x254>
 254:	fd 2d       	mov	r31, r13
 256:	f2 30       	cpi	r31, 0x02	; 2
 258:	01 f0       	breq	.+0      	; 0x25a <_Z4tonehjm+0x25a>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <_Z4tonehjm+0x25c>
 25c:	41 01       	movw	r8, r2
 25e:	aa 24       	eor	r10, r10
 260:	bb 24       	eor	r11, r11
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	72 e1       	ldi	r23, 0x12	; 18
 266:	8a e7       	ldi	r24, 0x7A	; 122
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	a5 01       	movw	r20, r10
 26c:	94 01       	movw	r18, r8
 26e:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 272:	29 01       	movw	r4, r18
 274:	3a 01       	movw	r6, r20
 276:	79 01       	movw	r14, r18
 278:	8a 01       	movw	r16, r20
 27a:	08 94       	sec
 27c:	e1 08       	sbc	r14, r1
 27e:	f1 08       	sbc	r15, r1
 280:	01 09       	sbc	r16, r1
 282:	11 09       	sbc	r17, r1
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	e8 16       	cp	r14, r24
 288:	f1 04       	cpc	r15, r1
 28a:	01 05       	cpc	r16, r1
 28c:	11 05       	cpc	r17, r1
 28e:	01 f0       	breq	.+0      	; 0x290 <_Z4tonehjm+0x290>
 290:	00 f4       	brcc	.+0      	; 0x292 <_Z4tonehjm+0x292>
 292:	00 c0       	rjmp	.+0      	; 0x294 <_Z4tonehjm+0x294>
 294:	60 e4       	ldi	r22, 0x40	; 64
 296:	72 e4       	ldi	r23, 0x42	; 66
 298:	8f e0       	ldi	r24, 0x0F	; 15
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	a5 01       	movw	r20, r10
 29e:	94 01       	movw	r18, r8
 2a0:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 2a4:	79 01       	movw	r14, r18
 2a6:	8a 01       	movw	r16, r20
 2a8:	08 94       	sec
 2aa:	e1 08       	sbc	r14, r1
 2ac:	f1 08       	sbc	r15, r1
 2ae:	01 09       	sbc	r16, r1
 2b0:	11 09       	sbc	r17, r1
 2b2:	9d 2d       	mov	r25, r13
 2b4:	92 30       	cpi	r25, 0x02	; 2
 2b6:	01 f4       	brne	.+0      	; 0x2b8 <_Z4tonehjm+0x2b8>
 2b8:	af ef       	ldi	r26, 0xFF	; 255
 2ba:	ea 16       	cp	r14, r26
 2bc:	f1 04       	cpc	r15, r1
 2be:	01 05       	cpc	r16, r1
 2c0:	11 05       	cpc	r17, r1
 2c2:	01 f0       	breq	.+0      	; 0x2c4 <_Z4tonehjm+0x2c4>
 2c4:	00 f4       	brcc	.+0      	; 0x2c6 <_Z4tonehjm+0x2c6>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <_Z4tonehjm+0x2c8>
 2c8:	60 e9       	ldi	r22, 0x90	; 144
 2ca:	70 ed       	ldi	r23, 0xD0	; 208
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	a5 01       	movw	r20, r10
 2d2:	94 01       	movw	r18, r8
 2d4:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 2d8:	79 01       	movw	r14, r18
 2da:	8a 01       	movw	r16, r20
 2dc:	08 94       	sec
 2de:	e1 08       	sbc	r14, r1
 2e0:	f1 08       	sbc	r15, r1
 2e2:	01 09       	sbc	r16, r1
 2e4:	11 09       	sbc	r17, r1
 2e6:	83 e0       	ldi	r24, 0x03	; 3
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <_Z4tonehjm+0x2ea>
 2ea:	82 e0       	ldi	r24, 0x02	; 2
 2ec:	bf ef       	ldi	r27, 0xFF	; 255
 2ee:	eb 16       	cp	r14, r27
 2f0:	f1 04       	cpc	r15, r1
 2f2:	01 05       	cpc	r16, r1
 2f4:	11 05       	cpc	r17, r1
 2f6:	01 f0       	breq	.+0      	; 0x2f8 <_Z4tonehjm+0x2f8>
 2f8:	00 f4       	brcc	.+0      	; 0x2fa <_Z4tonehjm+0x2fa>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <_Z4tonehjm+0x2fc>
 2fc:	68 e4       	ldi	r22, 0x48	; 72
 2fe:	78 ee       	ldi	r23, 0xE8	; 232
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	a5 01       	movw	r20, r10
 306:	94 01       	movw	r18, r8
 308:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 30c:	79 01       	movw	r14, r18
 30e:	8a 01       	movw	r16, r20
 310:	08 94       	sec
 312:	e1 08       	sbc	r14, r1
 314:	f1 08       	sbc	r15, r1
 316:	01 09       	sbc	r16, r1
 318:	11 09       	sbc	r17, r1
 31a:	dd 20       	and	r13, r13
 31c:	01 f0       	breq	.+0      	; 0x31e <_Z4tonehjm+0x31e>
 31e:	ed 2d       	mov	r30, r13
 320:	e2 30       	cpi	r30, 0x02	; 2
 322:	01 f4       	brne	.+0      	; 0x324 <_Z4tonehjm+0x324>
 324:	ff ef       	ldi	r31, 0xFF	; 255
 326:	ef 16       	cp	r14, r31
 328:	f1 04       	cpc	r15, r1
 32a:	01 05       	cpc	r16, r1
 32c:	11 05       	cpc	r17, r1
 32e:	01 f0       	breq	.+0      	; 0x330 <_Z4tonehjm+0x330>
 330:	00 f4       	brcc	.+0      	; 0x332 <_Z4tonehjm+0x332>
 332:	00 c0       	rjmp	.+0      	; 0x334 <_Z4tonehjm+0x334>
 334:	64 e2       	ldi	r22, 0x24	; 36
 336:	74 ef       	ldi	r23, 0xF4	; 244
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	a5 01       	movw	r20, r10
 33e:	94 01       	movw	r18, r8
 340:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 344:	79 01       	movw	r14, r18
 346:	8a 01       	movw	r16, r20
 348:	08 94       	sec
 34a:	e1 08       	sbc	r14, r1
 34c:	f1 08       	sbc	r15, r1
 34e:	01 09       	sbc	r16, r1
 350:	11 09       	sbc	r17, r1
 352:	85 e0       	ldi	r24, 0x05	; 5
 354:	00 c0       	rjmp	.+0      	; 0x356 <_Z4tonehjm+0x356>
 356:	83 e0       	ldi	r24, 0x03	; 3
 358:	00 c0       	rjmp	.+0      	; 0x35a <_Z4tonehjm+0x35a>
 35a:	84 e0       	ldi	r24, 0x04	; 4
 35c:	9f ef       	ldi	r25, 0xFF	; 255
 35e:	e9 16       	cp	r14, r25
 360:	f1 04       	cpc	r15, r1
 362:	01 05       	cpc	r16, r1
 364:	11 05       	cpc	r17, r1
 366:	01 f0       	breq	.+0      	; 0x368 <_Z4tonehjm+0x368>
 368:	00 f0       	brcs	.+0      	; 0x36a <_Z4tonehjm+0x36a>
 36a:	62 e1       	ldi	r22, 0x12	; 18
 36c:	7a e7       	ldi	r23, 0x7A	; 122
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	a5 01       	movw	r20, r10
 374:	94 01       	movw	r18, r8
 376:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 37a:	79 01       	movw	r14, r18
 37c:	8a 01       	movw	r16, r20
 37e:	08 94       	sec
 380:	e1 08       	sbc	r14, r1
 382:	f1 08       	sbc	r15, r1
 384:	01 09       	sbc	r16, r1
 386:	11 09       	sbc	r17, r1
 388:	dd 20       	and	r13, r13
 38a:	01 f4       	brne	.+0      	; 0x38c <_Z4tonehjm+0x38c>
 38c:	84 e0       	ldi	r24, 0x04	; 4
 38e:	00 c0       	rjmp	.+0      	; 0x390 <_Z4tonehjm+0x390>
 390:	86 e0       	ldi	r24, 0x06	; 6
 392:	af ef       	ldi	r26, 0xFF	; 255
 394:	ea 16       	cp	r14, r26
 396:	f1 04       	cpc	r15, r1
 398:	01 05       	cpc	r16, r1
 39a:	11 05       	cpc	r17, r1
 39c:	01 f0       	breq	.+0      	; 0x39e <_Z4tonehjm+0x39e>
 39e:	00 f0       	brcs	.+0      	; 0x3a0 <_Z4tonehjm+0x3a0>
 3a0:	83 01       	movw	r16, r6
 3a2:	72 01       	movw	r14, r4
 3a4:	9a e0       	ldi	r25, 0x0A	; 10
 3a6:	16 95       	lsr	r17
 3a8:	07 95       	ror	r16
 3aa:	f7 94       	ror	r15
 3ac:	e7 94       	ror	r14
 3ae:	9a 95       	dec	r25
 3b0:	01 f4       	brne	.+0      	; 0x3b2 <_Z4tonehjm+0x3b2>
 3b2:	08 94       	sec
 3b4:	e1 08       	sbc	r14, r1
 3b6:	f1 08       	sbc	r15, r1
 3b8:	01 09       	sbc	r16, r1
 3ba:	11 09       	sbc	r17, r1
 3bc:	dd 20       	and	r13, r13
 3be:	01 f0       	breq	.+0      	; 0x3c0 <_Z4tonehjm+0x3c0>
 3c0:	87 e0       	ldi	r24, 0x07	; 7
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <_Z4tonehjm+0x3c4>
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	dd 20       	and	r13, r13
 3c8:	01 f0       	breq	.+0      	; 0x3ca <_Z4tonehjm+0x3ca>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <_Z4tonehjm+0x3cc>
 3cc:	85 e0       	ldi	r24, 0x05	; 5
 3ce:	85 bd       	out	0x25, r24	; 37
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <_Z4tonehjm+0x3d2>
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <_Z4tonehjm+0x3d6>
 3d6:	84 e0       	ldi	r24, 0x04	; 4
 3d8:	80 93 b1 00 	sts	0x00B1, r24
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <_Z4tonehjm+0x3de>
 3de:	41 01       	movw	r8, r2
 3e0:	aa 24       	eor	r10, r10
 3e2:	bb 24       	eor	r11, r11
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	72 e1       	ldi	r23, 0x12	; 18
 3e8:	8a e7       	ldi	r24, 0x7A	; 122
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	a5 01       	movw	r20, r10
 3ee:	94 01       	movw	r18, r8
 3f0:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 3f4:	79 01       	movw	r14, r18
 3f6:	8a 01       	movw	r16, r20
 3f8:	08 94       	sec
 3fa:	e1 08       	sbc	r14, r1
 3fc:	f1 08       	sbc	r15, r1
 3fe:	01 09       	sbc	r16, r1
 400:	11 09       	sbc	r17, r1
 402:	b0 e0       	ldi	r27, 0x00	; 0
 404:	eb 16       	cp	r14, r27
 406:	b0 e0       	ldi	r27, 0x00	; 0
 408:	fb 06       	cpc	r15, r27
 40a:	b1 e0       	ldi	r27, 0x01	; 1
 40c:	0b 07       	cpc	r16, r27
 40e:	b0 e0       	ldi	r27, 0x00	; 0
 410:	1b 07       	cpc	r17, r27
 412:	00 f0       	brcs	.+0      	; 0x414 <_Z4tonehjm+0x414>
 414:	68 e4       	ldi	r22, 0x48	; 72
 416:	78 ee       	ldi	r23, 0xE8	; 232
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	a5 01       	movw	r20, r10
 41e:	94 01       	movw	r18, r8
 420:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 424:	79 01       	movw	r14, r18
 426:	8a 01       	movw	r16, r20
 428:	08 94       	sec
 42a:	e1 08       	sbc	r14, r1
 42c:	f1 08       	sbc	r15, r1
 42e:	01 09       	sbc	r16, r1
 430:	11 09       	sbc	r17, r1
 432:	93 e0       	ldi	r25, 0x03	; 3
 434:	00 c0       	rjmp	.+0      	; 0x436 <_Z4tonehjm+0x436>
 436:	91 e0       	ldi	r25, 0x01	; 1
 438:	ed 2d       	mov	r30, r13
 43a:	e1 30       	cpi	r30, 0x01	; 1
 43c:	01 f4       	brne	.+0      	; 0x43e <_Z4tonehjm+0x43e>
 43e:	80 91 81 00 	lds	r24, 0x0081
 442:	88 7f       	andi	r24, 0xF8	; 248
 444:	89 2b       	or	r24, r25
 446:	80 93 81 00 	sts	0x0081, r24
 44a:	00 c0       	rjmp	.+0      	; 0x44c <_Z4tonehjm+0x44c>
 44c:	fd 2d       	mov	r31, r13
 44e:	f3 30       	cpi	r31, 0x03	; 3
 450:	01 f4       	brne	.+0      	; 0x452 <_Z4tonehjm+0x452>
 452:	80 91 91 00 	lds	r24, 0x0091
 456:	88 7f       	andi	r24, 0xF8	; 248
 458:	89 2b       	or	r24, r25
 45a:	80 93 91 00 	sts	0x0091, r24
 45e:	00 c0       	rjmp	.+0      	; 0x460 <_Z4tonehjm+0x460>
 460:	8d 2d       	mov	r24, r13
 462:	84 30       	cpi	r24, 0x04	; 4
 464:	01 f4       	brne	.+0      	; 0x466 <_Z4tonehjm+0x466>
 466:	80 91 a1 00 	lds	r24, 0x00A1
 46a:	88 7f       	andi	r24, 0xF8	; 248
 46c:	89 2b       	or	r24, r25
 46e:	80 93 a1 00 	sts	0x00A1, r24
 472:	00 c0       	rjmp	.+0      	; 0x474 <_Z4tonehjm+0x474>
 474:	ad 2d       	mov	r26, r13
 476:	a5 30       	cpi	r26, 0x05	; 5
 478:	01 f4       	brne	.+0      	; 0x47a <_Z4tonehjm+0x47a>
 47a:	80 91 21 01 	lds	r24, 0x0121
 47e:	88 7f       	andi	r24, 0xF8	; 248
 480:	89 2b       	or	r24, r25
 482:	80 93 21 01 	sts	0x0121, r24
 486:	89 81       	ldd	r24, Y+1	; 0x01
 488:	9a 81       	ldd	r25, Y+2	; 0x02
 48a:	ab 81       	ldd	r26, Y+3	; 0x03
 48c:	bc 81       	ldd	r27, Y+4	; 0x04
 48e:	00 97       	sbiw	r24, 0x00	; 0
 490:	a1 05       	cpc	r26, r1
 492:	b1 05       	cpc	r27, r1
 494:	01 f0       	breq	.+0      	; 0x496 <_Z4tonehjm+0x496>
 496:	b1 01       	movw	r22, r2
 498:	66 0f       	add	r22, r22
 49a:	77 1f       	adc	r23, r23
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	29 81       	ldd	r18, Y+1	; 0x01
 4a2:	3a 81       	ldd	r19, Y+2	; 0x02
 4a4:	4b 81       	ldd	r20, Y+3	; 0x03
 4a6:	5c 81       	ldd	r21, Y+4	; 0x04
 4a8:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 4ac:	28 ee       	ldi	r18, 0xE8	; 232
 4ae:	33 e0       	ldi	r19, 0x03	; 3
 4b0:	40 e0       	ldi	r20, 0x00	; 0
 4b2:	50 e0       	ldi	r21, 0x00	; 0
 4b4:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <_Z4tonehjm+0x4ba>
 4ba:	2f ef       	ldi	r18, 0xFF	; 255
 4bc:	3f ef       	ldi	r19, 0xFF	; 255
 4be:	4f ef       	ldi	r20, 0xFF	; 255
 4c0:	5f ef       	ldi	r21, 0xFF	; 255
 4c2:	9d 2d       	mov	r25, r13
 4c4:	92 30       	cpi	r25, 0x02	; 2
 4c6:	01 f0       	breq	.+0      	; 0x4c8 <_Z4tonehjm+0x4c8>
 4c8:	93 30       	cpi	r25, 0x03	; 3
 4ca:	04 f4       	brge	.+0      	; 0x4cc <_Z4tonehjm+0x4cc>
 4cc:	dd 20       	and	r13, r13
 4ce:	01 f0       	breq	.+0      	; 0x4d0 <_Z4tonehjm+0x4d0>
 4d0:	91 30       	cpi	r25, 0x01	; 1
 4d2:	01 f0       	breq	.+0      	; 0x4d4 <_Z4tonehjm+0x4d4>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <_Z4tonehjm+0x4d6>
 4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <_Z4tonehjm+0x4d8>
 4d8:	ad 2d       	mov	r26, r13
 4da:	a4 30       	cpi	r26, 0x04	; 4
 4dc:	01 f4       	brne	.+0      	; 0x4de <_Z4tonehjm+0x4de>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <_Z4tonehjm+0x4e0>
 4e0:	a4 30       	cpi	r26, 0x04	; 4
 4e2:	04 f0       	brlt	.+0      	; 0x4e4 <_Z4tonehjm+0x4e4>
 4e4:	a5 30       	cpi	r26, 0x05	; 5
 4e6:	01 f0       	breq	.+0      	; 0x4e8 <_Z4tonehjm+0x4e8>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <_Z4tonehjm+0x4ea>
 4ea:	00 c0       	rjmp	.+0      	; 0x4ec <_Z4tonehjm+0x4ec>
 4ec:	e7 bc       	out	0x27, r14	; 39
 4ee:	20 93 00 00 	sts	0x0000, r18
 4f2:	30 93 00 00 	sts	0x0000, r19
 4f6:	40 93 00 00 	sts	0x0000, r20
 4fa:	50 93 00 00 	sts	0x0000, r21
 4fe:	80 91 6e 00 	lds	r24, 0x006E
 502:	82 60       	ori	r24, 0x02	; 2
 504:	80 93 6e 00 	sts	0x006E, r24
 508:	00 c0       	rjmp	.+0      	; 0x50a <_Z4tonehjm+0x50a>
 50a:	f0 92 89 00 	sts	0x0089, r15
 50e:	e0 92 88 00 	sts	0x0088, r14
 512:	20 93 00 00 	sts	0x0000, r18
 516:	30 93 00 00 	sts	0x0000, r19
 51a:	40 93 00 00 	sts	0x0000, r20
 51e:	50 93 00 00 	sts	0x0000, r21
 522:	80 91 6f 00 	lds	r24, 0x006F
 526:	82 60       	ori	r24, 0x02	; 2
 528:	80 93 6f 00 	sts	0x006F, r24
 52c:	00 c0       	rjmp	.+0      	; 0x52e <_Z4tonehjm+0x52e>
 52e:	e0 92 b3 00 	sts	0x00B3, r14
 532:	20 93 00 00 	sts	0x0000, r18
 536:	30 93 00 00 	sts	0x0000, r19
 53a:	40 93 00 00 	sts	0x0000, r20
 53e:	50 93 00 00 	sts	0x0000, r21
 542:	80 91 70 00 	lds	r24, 0x0070
 546:	82 60       	ori	r24, 0x02	; 2
 548:	80 93 70 00 	sts	0x0070, r24
 54c:	00 c0       	rjmp	.+0      	; 0x54e <_Z4tonehjm+0x54e>
 54e:	f0 92 99 00 	sts	0x0099, r15
 552:	e0 92 98 00 	sts	0x0098, r14
 556:	20 93 00 00 	sts	0x0000, r18
 55a:	30 93 00 00 	sts	0x0000, r19
 55e:	40 93 00 00 	sts	0x0000, r20
 562:	50 93 00 00 	sts	0x0000, r21
 566:	80 91 71 00 	lds	r24, 0x0071
 56a:	82 60       	ori	r24, 0x02	; 2
 56c:	80 93 71 00 	sts	0x0071, r24
 570:	00 c0       	rjmp	.+0      	; 0x572 <_Z4tonehjm+0x572>
 572:	f0 92 a9 00 	sts	0x00A9, r15
 576:	e0 92 a8 00 	sts	0x00A8, r14
 57a:	20 93 00 00 	sts	0x0000, r18
 57e:	30 93 00 00 	sts	0x0000, r19
 582:	40 93 00 00 	sts	0x0000, r20
 586:	50 93 00 00 	sts	0x0000, r21
 58a:	80 91 72 00 	lds	r24, 0x0072
 58e:	82 60       	ori	r24, 0x02	; 2
 590:	80 93 72 00 	sts	0x0072, r24
 594:	00 c0       	rjmp	.+0      	; 0x596 <_Z4tonehjm+0x596>
 596:	f0 92 29 01 	sts	0x0129, r15
 59a:	e0 92 28 01 	sts	0x0128, r14
 59e:	20 93 00 00 	sts	0x0000, r18
 5a2:	30 93 00 00 	sts	0x0000, r19
 5a6:	40 93 00 00 	sts	0x0000, r20
 5aa:	50 93 00 00 	sts	0x0000, r21
 5ae:	80 91 73 00 	lds	r24, 0x0073
 5b2:	82 60       	ori	r24, 0x02	; 2
 5b4:	80 93 73 00 	sts	0x0073, r24
 5b8:	0f 90       	pop	r0
 5ba:	0f 90       	pop	r0
 5bc:	0f 90       	pop	r0
 5be:	0f 90       	pop	r0
 5c0:	cf 91       	pop	r28
 5c2:	df 91       	pop	r29
 5c4:	1f 91       	pop	r17
 5c6:	0f 91       	pop	r16
 5c8:	ff 90       	pop	r15
 5ca:	ef 90       	pop	r14
 5cc:	df 90       	pop	r13
 5ce:	bf 90       	pop	r11
 5d0:	af 90       	pop	r10
 5d2:	9f 90       	pop	r9
 5d4:	8f 90       	pop	r8
 5d6:	7f 90       	pop	r7
 5d8:	6f 90       	pop	r6
 5da:	5f 90       	pop	r5
 5dc:	4f 90       	pop	r4
 5de:	3f 90       	pop	r3
 5e0:	2f 90       	pop	r2
 5e2:	08 95       	ret

Disassembly of section .text._Z12disableTimerh:

00000000 <_Z12disableTimerh>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
   0:	82 30       	cpi	r24, 0x02	; 2
   2:	01 f0       	breq	.+0      	; 0x4 <_Z12disableTimerh+0x4>
   4:	83 30       	cpi	r24, 0x03	; 3
   6:	00 f4       	brcc	.+0      	; 0x8 <_Z12disableTimerh+0x8>
   8:	88 23       	and	r24, r24
   a:	01 f0       	breq	.+0      	; 0xc <_Z12disableTimerh+0xc>
   c:	81 30       	cpi	r24, 0x01	; 1
   e:	01 f4       	brne	.+0      	; 0x10 <_Z12disableTimerh+0x10>
  10:	00 c0       	rjmp	.+0      	; 0x12 <_Z12disableTimerh+0x12>
  12:	84 30       	cpi	r24, 0x04	; 4
  14:	01 f0       	breq	.+0      	; 0x16 <_Z12disableTimerh+0x16>
  16:	84 30       	cpi	r24, 0x04	; 4
  18:	00 f0       	brcs	.+0      	; 0x1a <_Z12disableTimerh+0x1a>
  1a:	85 30       	cpi	r24, 0x05	; 5
  1c:	01 f4       	brne	.+0      	; 0x1e <_Z12disableTimerh+0x1e>
  1e:	00 c0       	rjmp	.+0      	; 0x20 <_Z12disableTimerh+0x20>
  20:	10 92 6e 00 	sts	0x006E, r1
  24:	08 95       	ret

  if (timer2_toggle_count != 0)
  26:	80 91 6f 00 	lds	r24, 0x006F
  2a:	8d 7f       	andi	r24, 0xFD	; 253
  2c:	80 93 6f 00 	sts	0x006F, r24
  30:	08 95       	ret
  32:	80 91 70 00 	lds	r24, 0x0070
  36:	8d 7f       	andi	r24, 0xFD	; 253
  38:	80 93 70 00 	sts	0x0070, r24
  3c:	81 e0       	ldi	r24, 0x01	; 1
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
  3e:	80 93 b0 00 	sts	0x00B0, r24
  42:	80 91 b1 00 	lds	r24, 0x00B1
  46:	88 7f       	andi	r24, 0xF8	; 248
  48:	84 60       	ori	r24, 0x04	; 4
  4a:	80 93 b1 00 	sts	0x00B1, r24
  4e:	10 92 b3 00 	sts	0x00B3, r1

    if (timer2_toggle_count > 0)
  52:	08 95       	ret
  54:	10 92 71 00 	sts	0x0071, r1
  58:	08 95       	ret
  5a:	10 92 72 00 	sts	0x0072, r1
  5e:	08 95       	ret
  60:	10 92 73 00 	sts	0x0073, r1
  64:	08 95       	ret

Disassembly of section .text._Z6noToneh:

00000000 <_Z6noToneh>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
   0:	1f 93       	push	r17
   2:	18 2f       	mov	r17, r24
   4:	80 91 00 00 	lds	r24, 0x0000
   8:	81 17       	cp	r24, r17
   a:	01 f4       	brne	.+0      	; 0xc <_Z6noToneh+0xc>
   c:	e0 e0       	ldi	r30, 0x00	; 0
   e:	f0 e0       	ldi	r31, 0x00	; 0
  10:	84 91       	lpm	r24, Z+
  12:	9f ef       	ldi	r25, 0xFF	; 255
  14:	90 93 00 00 	sts	0x0000, r25
  18:	00 c0       	rjmp	.+0      	; 0x1a <_Z6noToneh+0x1a>
  1a:	8f ef       	ldi	r24, 0xFF	; 255
  1c:	0e 94 00 00 	call	0	; 0x0 <_Z6noToneh>
  20:	81 2f       	mov	r24, r17
  22:	60 e0       	ldi	r22, 0x00	; 0
  24:	0e 94 00 00 	call	0	; 0x0 <_Z6noToneh>

  if (timer2_toggle_count != 0)
  28:	1f 91       	pop	r17
  2a:	08 95       	ret

Disassembly of section .text.__vector_13:

00000000 <__vector_13>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	a0 91 00 00 	lds	r26, 0x0000
  32:	b0 91 00 00 	lds	r27, 0x0000
  36:	00 97       	sbiw	r24, 0x00	; 0
  38:	a1 05       	cpc	r26, r1
  3a:	b1 05       	cpc	r27, r1
  3c:	01 f0       	breq	.+0      	; 0x3e <__vector_13+0x3e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
  3e:	e0 91 00 00 	lds	r30, 0x0000
  42:	f0 91 00 00 	lds	r31, 0x0000
  46:	80 81       	ld	r24, Z
  48:	90 91 00 00 	lds	r25, 0x0000
  4c:	89 27       	eor	r24, r25
  4e:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
  50:	80 91 00 00 	lds	r24, 0x0000
  54:	90 91 00 00 	lds	r25, 0x0000
  58:	a0 91 00 00 	lds	r26, 0x0000
  5c:	b0 91 00 00 	lds	r27, 0x0000
  60:	18 16       	cp	r1, r24
  62:	19 06       	cpc	r1, r25
  64:	1a 06       	cpc	r1, r26
  66:	1b 06       	cpc	r1, r27
  68:	04 f4       	brge	.+0      	; 0x6a <__vector_13+0x6a>
      timer2_toggle_count--;
  6a:	80 91 00 00 	lds	r24, 0x0000
  6e:	90 91 00 00 	lds	r25, 0x0000
  72:	a0 91 00 00 	lds	r26, 0x0000
  76:	b0 91 00 00 	lds	r27, 0x0000
  7a:	01 97       	sbiw	r24, 0x01	; 1
  7c:	a1 09       	sbc	r26, r1
  7e:	b1 09       	sbc	r27, r1
  80:	80 93 00 00 	sts	0x0000, r24
  84:	90 93 00 00 	sts	0x0000, r25
  88:	a0 93 00 00 	sts	0x0000, r26
  8c:	b0 93 00 00 	sts	0x0000, r27
  90:	00 c0       	rjmp	.+0      	; 0x92 <__vector_13+0x92>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
  92:	80 91 00 00 	lds	r24, 0x0000
  96:	0e 94 00 00 	call	0	; 0x0 <__vector_13>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
  9a:	ff 91       	pop	r31
  9c:	ef 91       	pop	r30
  9e:	bf 91       	pop	r27
  a0:	af 91       	pop	r26
  a2:	9f 91       	pop	r25
  a4:	8f 91       	pop	r24
  a6:	7f 91       	pop	r23
  a8:	6f 91       	pop	r22
  aa:	5f 91       	pop	r21
  ac:	4f 91       	pop	r20
  ae:	3f 91       	pop	r19
  b0:	2f 91       	pop	r18
  b2:	0f 90       	pop	r0
  b4:	0b be       	out	0x3b, r0	; 59
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

USBCore.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000588  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00002d23  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING

WInterrupts.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000b88  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000edb  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.attachInterrupt 000000f4  00000000  00000000  00001a97  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.detachInterrupt 00000058  00000000  00000000  00001b8b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.__vector_1 00000062  00000000  00000000  00001be3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.__vector_2 00000062  00000000  00000000  00001c45  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.__vector_3 00000062  00000000  00000000  00001ca7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.__vector_4 00000062  00000000  00000000  00001d09  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.__vector_5 00000062  00000000  00000000  00001d6b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text.__vector_6 00000062  00000000  00000000  00001dcd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text.__vector_7 00000062  00000000  00000000  00001e2f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text.__vector_8 00000062  00000000  00000000  00001e91  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .bss.intFunc  00000010  00000000  00000000  00001ef3  2**0
                  ALLOC

Disassembly of section .text.attachInterrupt:

00000000 <attachInterrupt>:
SIGNAL(INT6_vect) {
  if(intFunc[EXTERNAL_INT_6])
    intFunc[EXTERNAL_INT_6]();
}

SIGNAL(INT7_vect) {
   0:	88 30       	cpi	r24, 0x08	; 8
   2:	00 f0       	brcs	.+0      	; 0x4 <attachInterrupt+0x4>
   4:	00 c0       	rjmp	.+0      	; 0x6 <attachInterrupt+0x6>
   6:	e8 2f       	mov	r30, r24
   8:	f0 e0       	ldi	r31, 0x00	; 0
   a:	ee 0f       	add	r30, r30
   c:	ff 1f       	adc	r31, r31
   e:	e0 50       	subi	r30, 0x00	; 0
  10:	f0 40       	sbci	r31, 0x00	; 0
  12:	71 83       	std	Z+1, r23	; 0x01
  14:	60 83       	st	Z, r22
  16:	84 30       	cpi	r24, 0x04	; 4
  18:	01 f0       	breq	.+0      	; 0x1a <attachInterrupt+0x1a>
  1a:	85 30       	cpi	r24, 0x05	; 5
  1c:	00 f4       	brcc	.+0      	; 0x1e <attachInterrupt+0x1e>
  1e:	82 30       	cpi	r24, 0x02	; 2
  20:	01 f0       	breq	.+0      	; 0x22 <attachInterrupt+0x22>
  22:	83 30       	cpi	r24, 0x03	; 3
  24:	00 f4       	brcc	.+0      	; 0x26 <attachInterrupt+0x26>
  if(intFunc[EXTERNAL_INT_7])
  26:	81 30       	cpi	r24, 0x01	; 1
  28:	01 f4       	brne	.+0      	; 0x2a <attachInterrupt+0x2a>
  2a:	00 c0       	rjmp	.+0      	; 0x2c <attachInterrupt+0x2c>
  2c:	86 30       	cpi	r24, 0x06	; 6
  2e:	01 f4       	brne	.+0      	; 0x30 <attachInterrupt+0x30>
  30:	00 c0       	rjmp	.+0      	; 0x32 <attachInterrupt+0x32>
    intFunc[EXTERNAL_INT_7]();
  32:	86 30       	cpi	r24, 0x06	; 6
  34:	00 f0       	brcs	.+0      	; 0x36 <attachInterrupt+0x36>
  36:	87 30       	cpi	r24, 0x07	; 7
  38:	01 f4       	brne	.+0      	; 0x3a <attachInterrupt+0x3a>
  3a:	00 c0       	rjmp	.+0      	; 0x3c <attachInterrupt+0x3c>
}
  3c:	80 91 69 00 	lds	r24, 0x0069
  40:	8c 7f       	andi	r24, 0xFC	; 252
  42:	84 2b       	or	r24, r20
  44:	80 93 69 00 	sts	0x0069, r24
  48:	e8 9a       	sbi	0x1d, 0	; 29
  4a:	08 95       	ret
  4c:	80 91 69 00 	lds	r24, 0x0069
  50:	44 0f       	add	r20, r20
  52:	55 1f       	adc	r21, r21
  54:	44 0f       	add	r20, r20
  56:	55 1f       	adc	r21, r21
  58:	83 7f       	andi	r24, 0xF3	; 243
  5a:	84 2b       	or	r24, r20
  5c:	80 93 69 00 	sts	0x0069, r24
  60:	e9 9a       	sbi	0x1d, 1	; 29
  62:	08 95       	ret
  64:	80 91 69 00 	lds	r24, 0x0069
  68:	74 e0       	ldi	r23, 0x04	; 4
  6a:	44 0f       	add	r20, r20
  6c:	55 1f       	adc	r21, r21
  6e:	7a 95       	dec	r23
  70:	01 f4       	brne	.+0      	; 0x72 <attachInterrupt+0x72>
  72:	8f 7c       	andi	r24, 0xCF	; 207
  74:	84 2b       	or	r24, r20
  76:	80 93 69 00 	sts	0x0069, r24
  7a:	ea 9a       	sbi	0x1d, 2	; 29
  7c:	08 95       	ret
  7e:	80 91 69 00 	lds	r24, 0x0069
  82:	66 e0       	ldi	r22, 0x06	; 6
  84:	44 0f       	add	r20, r20
  86:	55 1f       	adc	r21, r21
  88:	6a 95       	dec	r22
  8a:	01 f4       	brne	.+0      	; 0x8c <attachInterrupt+0x8c>
  8c:	8f 73       	andi	r24, 0x3F	; 63
  8e:	84 2b       	or	r24, r20
  90:	80 93 69 00 	sts	0x0069, r24
  94:	eb 9a       	sbi	0x1d, 3	; 29
  96:	08 95       	ret
  98:	80 91 6a 00 	lds	r24, 0x006A
  9c:	8c 7f       	andi	r24, 0xFC	; 252
  9e:	84 2b       	or	r24, r20
  a0:	80 93 6a 00 	sts	0x006A, r24
  a4:	ec 9a       	sbi	0x1d, 4	; 29
  a6:	08 95       	ret
  a8:	80 91 6a 00 	lds	r24, 0x006A
  ac:	44 0f       	add	r20, r20
  ae:	55 1f       	adc	r21, r21
  b0:	44 0f       	add	r20, r20
  b2:	55 1f       	adc	r21, r21
  b4:	83 7f       	andi	r24, 0xF3	; 243
  b6:	84 2b       	or	r24, r20
  b8:	80 93 6a 00 	sts	0x006A, r24
  bc:	ed 9a       	sbi	0x1d, 5	; 29
  be:	08 95       	ret
  c0:	80 91 6a 00 	lds	r24, 0x006A
  c4:	24 e0       	ldi	r18, 0x04	; 4
  c6:	44 0f       	add	r20, r20
  c8:	55 1f       	adc	r21, r21
  ca:	2a 95       	dec	r18
  cc:	01 f4       	brne	.+0      	; 0xce <attachInterrupt+0xce>
  ce:	8f 7c       	andi	r24, 0xCF	; 207
  d0:	84 2b       	or	r24, r20
  d2:	80 93 6a 00 	sts	0x006A, r24
  d6:	ee 9a       	sbi	0x1d, 6	; 29
  d8:	08 95       	ret
  da:	80 91 6a 00 	lds	r24, 0x006A
  de:	96 e0       	ldi	r25, 0x06	; 6
  e0:	44 0f       	add	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	9a 95       	dec	r25
  e6:	01 f4       	brne	.+0      	; 0xe8 <attachInterrupt+0xe8>
  e8:	8f 73       	andi	r24, 0x3F	; 63
  ea:	84 2b       	or	r24, r20
  ec:	80 93 6a 00 	sts	0x006A, r24
  f0:	ef 9a       	sbi	0x1d, 7	; 29
  f2:	08 95       	ret

Disassembly of section .text.detachInterrupt:

00000000 <detachInterrupt>:
SIGNAL(INT6_vect) {
  if(intFunc[EXTERNAL_INT_6])
    intFunc[EXTERNAL_INT_6]();
}

SIGNAL(INT7_vect) {
   0:	88 30       	cpi	r24, 0x08	; 8
   2:	00 f4       	brcc	.+0      	; 0x4 <detachInterrupt+0x4>
   4:	84 30       	cpi	r24, 0x04	; 4
   6:	01 f0       	breq	.+0      	; 0x8 <detachInterrupt+0x8>
   8:	85 30       	cpi	r24, 0x05	; 5
   a:	00 f4       	brcc	.+0      	; 0xc <detachInterrupt+0xc>
   c:	82 30       	cpi	r24, 0x02	; 2
   e:	01 f0       	breq	.+0      	; 0x10 <detachInterrupt+0x10>
  10:	83 30       	cpi	r24, 0x03	; 3
  12:	00 f4       	brcc	.+0      	; 0x14 <detachInterrupt+0x14>
  14:	81 30       	cpi	r24, 0x01	; 1
  16:	01 f4       	brne	.+0      	; 0x18 <detachInterrupt+0x18>
  18:	00 c0       	rjmp	.+0      	; 0x1a <detachInterrupt+0x1a>
  1a:	86 30       	cpi	r24, 0x06	; 6
  1c:	01 f0       	breq	.+0      	; 0x1e <detachInterrupt+0x1e>
  1e:	86 30       	cpi	r24, 0x06	; 6
  20:	00 f0       	brcs	.+0      	; 0x22 <detachInterrupt+0x22>
  22:	87 30       	cpi	r24, 0x07	; 7
  24:	01 f4       	brne	.+0      	; 0x26 <detachInterrupt+0x26>
  if(intFunc[EXTERNAL_INT_7])
  26:	00 c0       	rjmp	.+0      	; 0x28 <detachInterrupt+0x28>
  28:	e8 98       	cbi	0x1d, 0	; 29
  2a:	00 c0       	rjmp	.+0      	; 0x2c <detachInterrupt+0x2c>
  2c:	e9 98       	cbi	0x1d, 1	; 29
  2e:	00 c0       	rjmp	.+0      	; 0x30 <detachInterrupt+0x30>
  30:	ea 98       	cbi	0x1d, 2	; 29
    intFunc[EXTERNAL_INT_7]();
  32:	00 c0       	rjmp	.+0      	; 0x34 <detachInterrupt+0x34>
  34:	eb 98       	cbi	0x1d, 3	; 29
  36:	00 c0       	rjmp	.+0      	; 0x38 <detachInterrupt+0x38>
  38:	ec 98       	cbi	0x1d, 4	; 29
  3a:	00 c0       	rjmp	.+0      	; 0x3c <detachInterrupt+0x3c>
}
  3c:	ed 98       	cbi	0x1d, 5	; 29
  3e:	00 c0       	rjmp	.+0      	; 0x40 <detachInterrupt+0x40>
  40:	ee 98       	cbi	0x1d, 6	; 29
  42:	00 c0       	rjmp	.+0      	; 0x44 <detachInterrupt+0x44>
  44:	ef 98       	cbi	0x1d, 7	; 29
  46:	e8 2f       	mov	r30, r24
  48:	f0 e0       	ldi	r31, 0x00	; 0
  4a:	ee 0f       	add	r30, r30
  4c:	ff 1f       	adc	r31, r31
  4e:	e0 50       	subi	r30, 0x00	; 0
  50:	f0 40       	sbci	r31, 0x00	; 0
  52:	11 82       	std	Z+1, r1	; 0x01
  54:	10 82       	st	Z, r1
  56:	08 95       	ret

Disassembly of section .text.__vector_1:

00000000 <__vector_1>:
SIGNAL(INT6_vect) {
  if(intFunc[EXTERNAL_INT_6])
    intFunc[EXTERNAL_INT_6]();
}

SIGNAL(INT7_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_1+0x32>
    intFunc[EXTERNAL_INT_7]();
  32:	e0 91 00 00 	lds	r30, 0x0000
  36:	f0 91 00 00 	lds	r31, 0x0000
  3a:	19 95       	eicall
}
  3c:	ff 91       	pop	r31
  3e:	ef 91       	pop	r30
  40:	bf 91       	pop	r27
  42:	af 91       	pop	r26
  44:	9f 91       	pop	r25
  46:	8f 91       	pop	r24
  48:	7f 91       	pop	r23
  4a:	6f 91       	pop	r22
  4c:	5f 91       	pop	r21
  4e:	4f 91       	pop	r20
  50:	3f 91       	pop	r19
  52:	2f 91       	pop	r18
  54:	0f 90       	pop	r0
  56:	0b be       	out	0x3b, r0	; 59
  58:	0f 90       	pop	r0
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	0f 90       	pop	r0
  5e:	1f 90       	pop	r1
  60:	18 95       	reti

Disassembly of section .text.__vector_2:

00000000 <__vector_2>:
SIGNAL(INT6_vect) {
  if(intFunc[EXTERNAL_INT_6])
    intFunc[EXTERNAL_INT_6]();
}

SIGNAL(INT7_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_2+0x32>
    intFunc[EXTERNAL_INT_7]();
  32:	e0 91 00 00 	lds	r30, 0x0000
  36:	f0 91 00 00 	lds	r31, 0x0000
  3a:	19 95       	eicall
}
  3c:	ff 91       	pop	r31
  3e:	ef 91       	pop	r30
  40:	bf 91       	pop	r27
  42:	af 91       	pop	r26
  44:	9f 91       	pop	r25
  46:	8f 91       	pop	r24
  48:	7f 91       	pop	r23
  4a:	6f 91       	pop	r22
  4c:	5f 91       	pop	r21
  4e:	4f 91       	pop	r20
  50:	3f 91       	pop	r19
  52:	2f 91       	pop	r18
  54:	0f 90       	pop	r0
  56:	0b be       	out	0x3b, r0	; 59
  58:	0f 90       	pop	r0
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	0f 90       	pop	r0
  5e:	1f 90       	pop	r1
  60:	18 95       	reti

Disassembly of section .text.__vector_3:

00000000 <__vector_3>:
SIGNAL(INT6_vect) {
  if(intFunc[EXTERNAL_INT_6])
    intFunc[EXTERNAL_INT_6]();
}

SIGNAL(INT7_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_3+0x32>
    intFunc[EXTERNAL_INT_7]();
  32:	e0 91 00 00 	lds	r30, 0x0000
  36:	f0 91 00 00 	lds	r31, 0x0000
  3a:	19 95       	eicall
}
  3c:	ff 91       	pop	r31
  3e:	ef 91       	pop	r30
  40:	bf 91       	pop	r27
  42:	af 91       	pop	r26
  44:	9f 91       	pop	r25
  46:	8f 91       	pop	r24
  48:	7f 91       	pop	r23
  4a:	6f 91       	pop	r22
  4c:	5f 91       	pop	r21
  4e:	4f 91       	pop	r20
  50:	3f 91       	pop	r19
  52:	2f 91       	pop	r18
  54:	0f 90       	pop	r0
  56:	0b be       	out	0x3b, r0	; 59
  58:	0f 90       	pop	r0
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	0f 90       	pop	r0
  5e:	1f 90       	pop	r1
  60:	18 95       	reti

Disassembly of section .text.__vector_4:

00000000 <__vector_4>:
SIGNAL(INT6_vect) {
  if(intFunc[EXTERNAL_INT_6])
    intFunc[EXTERNAL_INT_6]();
}

SIGNAL(INT7_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_4+0x32>
    intFunc[EXTERNAL_INT_7]();
  32:	e0 91 00 00 	lds	r30, 0x0000
  36:	f0 91 00 00 	lds	r31, 0x0000
  3a:	19 95       	eicall
}
  3c:	ff 91       	pop	r31
  3e:	ef 91       	pop	r30
  40:	bf 91       	pop	r27
  42:	af 91       	pop	r26
  44:	9f 91       	pop	r25
  46:	8f 91       	pop	r24
  48:	7f 91       	pop	r23
  4a:	6f 91       	pop	r22
  4c:	5f 91       	pop	r21
  4e:	4f 91       	pop	r20
  50:	3f 91       	pop	r19
  52:	2f 91       	pop	r18
  54:	0f 90       	pop	r0
  56:	0b be       	out	0x3b, r0	; 59
  58:	0f 90       	pop	r0
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	0f 90       	pop	r0
  5e:	1f 90       	pop	r1
  60:	18 95       	reti

Disassembly of section .text.__vector_5:

00000000 <__vector_5>:
SIGNAL(INT6_vect) {
  if(intFunc[EXTERNAL_INT_6])
    intFunc[EXTERNAL_INT_6]();
}

SIGNAL(INT7_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_5+0x32>
    intFunc[EXTERNAL_INT_7]();
  32:	e0 91 00 00 	lds	r30, 0x0000
  36:	f0 91 00 00 	lds	r31, 0x0000
  3a:	19 95       	eicall
}
  3c:	ff 91       	pop	r31
  3e:	ef 91       	pop	r30
  40:	bf 91       	pop	r27
  42:	af 91       	pop	r26
  44:	9f 91       	pop	r25
  46:	8f 91       	pop	r24
  48:	7f 91       	pop	r23
  4a:	6f 91       	pop	r22
  4c:	5f 91       	pop	r21
  4e:	4f 91       	pop	r20
  50:	3f 91       	pop	r19
  52:	2f 91       	pop	r18
  54:	0f 90       	pop	r0
  56:	0b be       	out	0x3b, r0	; 59
  58:	0f 90       	pop	r0
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	0f 90       	pop	r0
  5e:	1f 90       	pop	r1
  60:	18 95       	reti

Disassembly of section .text.__vector_6:

00000000 <__vector_6>:
SIGNAL(INT6_vect) {
  if(intFunc[EXTERNAL_INT_6])
    intFunc[EXTERNAL_INT_6]();
}

SIGNAL(INT7_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_6+0x32>
    intFunc[EXTERNAL_INT_7]();
  32:	e0 91 00 00 	lds	r30, 0x0000
  36:	f0 91 00 00 	lds	r31, 0x0000
  3a:	19 95       	eicall
}
  3c:	ff 91       	pop	r31
  3e:	ef 91       	pop	r30
  40:	bf 91       	pop	r27
  42:	af 91       	pop	r26
  44:	9f 91       	pop	r25
  46:	8f 91       	pop	r24
  48:	7f 91       	pop	r23
  4a:	6f 91       	pop	r22
  4c:	5f 91       	pop	r21
  4e:	4f 91       	pop	r20
  50:	3f 91       	pop	r19
  52:	2f 91       	pop	r18
  54:	0f 90       	pop	r0
  56:	0b be       	out	0x3b, r0	; 59
  58:	0f 90       	pop	r0
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	0f 90       	pop	r0
  5e:	1f 90       	pop	r1
  60:	18 95       	reti

Disassembly of section .text.__vector_7:

00000000 <__vector_7>:
SIGNAL(INT6_vect) {
  if(intFunc[EXTERNAL_INT_6])
    intFunc[EXTERNAL_INT_6]();
}

SIGNAL(INT7_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_7+0x32>
    intFunc[EXTERNAL_INT_7]();
  32:	e0 91 00 00 	lds	r30, 0x0000
  36:	f0 91 00 00 	lds	r31, 0x0000
  3a:	19 95       	eicall
}
  3c:	ff 91       	pop	r31
  3e:	ef 91       	pop	r30
  40:	bf 91       	pop	r27
  42:	af 91       	pop	r26
  44:	9f 91       	pop	r25
  46:	8f 91       	pop	r24
  48:	7f 91       	pop	r23
  4a:	6f 91       	pop	r22
  4c:	5f 91       	pop	r21
  4e:	4f 91       	pop	r20
  50:	3f 91       	pop	r19
  52:	2f 91       	pop	r18
  54:	0f 90       	pop	r0
  56:	0b be       	out	0x3b, r0	; 59
  58:	0f 90       	pop	r0
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	0f 90       	pop	r0
  5e:	1f 90       	pop	r1
  60:	18 95       	reti

Disassembly of section .text.__vector_8:

00000000 <__vector_8>:
SIGNAL(INT6_vect) {
  if(intFunc[EXTERNAL_INT_6])
    intFunc[EXTERNAL_INT_6]();
}

SIGNAL(INT7_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_8+0x32>
    intFunc[EXTERNAL_INT_7]();
  32:	e0 91 00 00 	lds	r30, 0x0000
  36:	f0 91 00 00 	lds	r31, 0x0000
  3a:	19 95       	eicall
}
  3c:	ff 91       	pop	r31
  3e:	ef 91       	pop	r30
  40:	bf 91       	pop	r27
  42:	af 91       	pop	r26
  44:	9f 91       	pop	r25
  46:	8f 91       	pop	r24
  48:	7f 91       	pop	r23
  4a:	6f 91       	pop	r22
  4c:	5f 91       	pop	r21
  4e:	4f 91       	pop	r20
  50:	3f 91       	pop	r19
  52:	2f 91       	pop	r18
  54:	0f 90       	pop	r0
  56:	0b be       	out	0x3b, r0	; 59
  58:	0f 90       	pop	r0
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	0f 90       	pop	r0
  5e:	1f 90       	pop	r1
  60:	18 95       	reti

WMath.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000045c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000663  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._Z10randomSeedj 00000010  00000000  00000000  00000af3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._Z6randoml 0000003c  00000000  00000000  00000b03  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._Z6randomll 0000003c  00000000  00000000  00000b3f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._Z3maplllll 00000092  00000000  00000000  00000b7b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._Z8makeWordj 00000002  00000000  00000000  00000c0d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .text._Z8makeWordhh 0000000e  00000000  00000000  00000c0f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text._Z10randomSeedj:

00000000 <_Z10randomSeedj>:
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int makeWord(unsigned int w) { return w; }
   0:	00 97       	sbiw	r24, 0x00	; 0
   2:	01 f0       	breq	.+0      	; 0x4 <_Z10randomSeedj+0x4>
   4:	bc 01       	movw	r22, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	0e 94 00 00 	call	0	; 0x0 <_Z10randomSeedj>
   e:	08 95       	ret

Disassembly of section .text._Z6randoml:

00000000 <_Z6randoml>:
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7b 01       	movw	r14, r22
   a:	8c 01       	movw	r16, r24
   c:	61 15       	cp	r22, r1
   e:	71 05       	cpc	r23, r1
  10:	81 05       	cpc	r24, r1
  12:	91 05       	cpc	r25, r1
  14:	01 f0       	breq	.+0      	; 0x16 <_Z6randoml+0x16>
  16:	0e 94 00 00 	call	0	; 0x0 <_Z6randoml>
  1a:	a8 01       	movw	r20, r16
  1c:	97 01       	movw	r18, r14
  1e:	0e 94 00 00 	call	0	; 0x0 <_Z6randoml>
  22:	9b 01       	movw	r18, r22
  24:	ac 01       	movw	r20, r24
  26:	00 c0       	rjmp	.+0      	; 0x28 <_Z6randoml+0x28>
  28:	20 e0       	ldi	r18, 0x00	; 0
  2a:	30 e0       	ldi	r19, 0x00	; 0
  2c:	a9 01       	movw	r20, r18
  2e:	b9 01       	movw	r22, r18
  30:	ca 01       	movw	r24, r20
  32:	1f 91       	pop	r17
  34:	0f 91       	pop	r16
  36:	ff 90       	pop	r15
  38:	ef 90       	pop	r14
  3a:	08 95       	ret

Disassembly of section .text._Z6randomll:

00000000 <_Z6randomll>:
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7b 01       	movw	r14, r22
   a:	8c 01       	movw	r16, r24
   c:	62 17       	cp	r22, r18
   e:	73 07       	cpc	r23, r19
  10:	84 07       	cpc	r24, r20
  12:	95 07       	cpc	r25, r21
  14:	04 f4       	brge	.+0      	; 0x16 <_Z6randomll+0x16>
  16:	ca 01       	movw	r24, r20
  18:	b9 01       	movw	r22, r18
  1a:	6e 19       	sub	r22, r14
  1c:	7f 09       	sbc	r23, r15
  1e:	80 0b       	sbc	r24, r16
  20:	91 0b       	sbc	r25, r17
  22:	0e 94 00 00 	call	0	; 0x0 <_Z6randomll>
  26:	e6 0e       	add	r14, r22
  28:	f7 1e       	adc	r15, r23
  2a:	08 1f       	adc	r16, r24
  2c:	19 1f       	adc	r17, r25
  2e:	b7 01       	movw	r22, r14
  30:	c8 01       	movw	r24, r16
  32:	1f 91       	pop	r17
  34:	0f 91       	pop	r16
  36:	ff 90       	pop	r15
  38:	ef 90       	pop	r14
  3a:	08 95       	ret

Disassembly of section .text._Z3maplllll:

00000000 <_Z3maplllll>:
   0:	2f 92       	push	r2
   2:	3f 92       	push	r3
   4:	4f 92       	push	r4
   6:	5f 92       	push	r5
   8:	6f 92       	push	r6
   a:	7f 92       	push	r7
   c:	8f 92       	push	r8
   e:	9f 92       	push	r9
  10:	af 92       	push	r10
  12:	bf 92       	push	r11
  14:	cf 92       	push	r12
  16:	df 92       	push	r13
  18:	ef 92       	push	r14
  1a:	ff 92       	push	r15
  1c:	0f 93       	push	r16
  1e:	1f 93       	push	r17
  20:	df 93       	push	r29
  22:	cf 93       	push	r28
  24:	cd b7       	in	r28, 0x3d	; 61
  26:	de b7       	in	r29, 0x3e	; 62
  28:	3b 01       	movw	r6, r22
  2a:	4c 01       	movw	r8, r24
  2c:	19 01       	movw	r2, r18
  2e:	2a 01       	movw	r4, r20
  30:	6e 89       	ldd	r22, Y+22	; 0x16
  32:	7f 89       	ldd	r23, Y+23	; 0x17
  34:	88 8d       	ldd	r24, Y+24	; 0x18
  36:	99 8d       	ldd	r25, Y+25	; 0x19
  38:	6a 19       	sub	r22, r10
  3a:	7b 09       	sbc	r23, r11
  3c:	8c 09       	sbc	r24, r12
  3e:	9d 09       	sbc	r25, r13
  40:	62 1a       	sub	r6, r18
  42:	73 0a       	sbc	r7, r19
  44:	84 0a       	sbc	r8, r20
  46:	95 0a       	sbc	r9, r21
  48:	a4 01       	movw	r20, r8
  4a:	93 01       	movw	r18, r6
  4c:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
  50:	e2 18       	sub	r14, r2
  52:	f3 08       	sbc	r15, r3
  54:	04 09       	sbc	r16, r4
  56:	15 09       	sbc	r17, r5
  58:	a8 01       	movw	r20, r16
  5a:	97 01       	movw	r18, r14
  5c:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
  60:	2a 0d       	add	r18, r10
  62:	3b 1d       	adc	r19, r11
  64:	4c 1d       	adc	r20, r12
  66:	5d 1d       	adc	r21, r13
  68:	b9 01       	movw	r22, r18
  6a:	ca 01       	movw	r24, r20
  6c:	cf 91       	pop	r28
  6e:	df 91       	pop	r29
  70:	1f 91       	pop	r17
  72:	0f 91       	pop	r16
  74:	ff 90       	pop	r15
  76:	ef 90       	pop	r14
  78:	df 90       	pop	r13
  7a:	cf 90       	pop	r12
  7c:	bf 90       	pop	r11
  7e:	af 90       	pop	r10
  80:	9f 90       	pop	r9
  82:	8f 90       	pop	r8
  84:	7f 90       	pop	r7
  86:	6f 90       	pop	r6
  88:	5f 90       	pop	r5
  8a:	4f 90       	pop	r4
  8c:	3f 90       	pop	r3
  8e:	2f 90       	pop	r2
  90:	08 95       	ret

Disassembly of section .text._Z8makeWordj:

00000000 <_Z8makeWordj>:
   0:	08 95       	ret

Disassembly of section .text._Z8makeWordhh:

00000000 <_Z8makeWordhh>:
   0:	70 e0       	ldi	r23, 0x00	; 0
   2:	38 2f       	mov	r19, r24
   4:	20 e0       	ldi	r18, 0x00	; 0
   6:	62 2b       	or	r22, r18
   8:	73 2b       	or	r23, r19
   a:	cb 01       	movw	r24, r22
   c:	08 95       	ret

WString.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000001  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000035  2**0
                  ALLOC
  3 .stab         00002d00  00000000  00000000  00000038  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000347e  00000000  00000000  00002d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN6StringD2Ev 0000000c  00000000  00000000  000061b6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN6String10invalidateEv 00000024  00000000  00000000  000061c2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN6String12changeBufferEj 00000034  00000000  00000000  000061e6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN6String7reserveEj 0000003e  00000000  00000000  0000621a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN6String4copyEPKcj 00000042  00000000  00000000  00006258  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN6StringC2EPKc 00000036  00000000  00000000  0000629a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN6StringaSERKS_ 00000036  00000000  00000000  000062d0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN6StringC2ERKS_ 00000016  00000000  00000000  00006306  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN6StringaSEPKc 00000030  00000000  00000000  0000631c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN6StringC2Emh 00000062  00000000  00000000  0000634c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN6StringC2Elh 00000062  00000000  00000000  000063ae  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN6StringC2Ejh 00000060  00000000  00000000  00006410  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN6StringC2Eih 00000060  00000000  00000000  00006470  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN6StringC2Ehh 00000062  00000000  00000000  000064d0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN6StringC2Ec 00000034  00000000  00000000  00006532  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN6String6concatEPKcj 00000058  00000000  00000000  00006566  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN6String6concatERKS_ 00000010  00000000  00000000  000065be  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN6String6concatEPKc 00000022  00000000  00000000  000065ce  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZN6String6concatEc 00000028  00000000  00000000  000065f0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZN6String6concatEh 0000005a  00000000  00000000  00006618  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZN6String6concatEi 00000064  00000000  00000000  00006672  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZN6String6concatEj 0000005c  00000000  00000000  000066d6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text._ZN6String6concatEl 00000066  00000000  00000000  00006732  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text._ZN6String6concatEm 00000066  00000000  00000000  00006798  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .text._ZplRK15StringSumHelperRK6String 00000026  00000000  00000000  000067fe  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .text._ZplRK15StringSumHelperPKc 00000034  00000000  00000000  00006824  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .text._ZplRK15StringSumHelperc 0000001c  00000000  00000000  00006858  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 32 .text._ZplRK15StringSumHelperh 0000001c  00000000  00000000  00006874  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 33 .text._ZplRK15StringSumHelperi 0000001c  00000000  00000000  00006890  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 34 .text._ZplRK15StringSumHelperj 0000001c  00000000  00000000  000068ac  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 35 .text._ZplRK15StringSumHelperl 0000001c  00000000  00000000  000068c8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 36 .text._ZplRK15StringSumHelperm 0000001c  00000000  00000000  000068e4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 37 .text._ZNK6String9compareToERKS_ 0000006c  00000000  00000000  00006900  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 38 .text._ZNK6String6equalsERKS_ 00000022  00000000  00000000  0000696c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 39 .text._ZNK6String6equalsEPKc 00000046  00000000  00000000  0000698e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 40 .text._ZNK6StringltERKS_ 0000000e  00000000  00000000  000069d4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 41 .text._ZNK6StringgtERKS_ 00000012  00000000  00000000  000069e2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 42 .text._ZNK6StringleERKS_ 00000012  00000000  00000000  000069f4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 43 .text._ZNK6StringgeERKS_ 00000010  00000000  00000000  00006a06  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 44 .text._ZNK6String16equalsIgnoreCaseERKS_ 00000074  00000000  00000000  00006a16  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 45 .text._ZNK6String10startsWithERKS_j 0000004c  00000000  00000000  00006a8a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 46 .text._ZNK6String10startsWithERKS_ 00000020  00000000  00000000  00006ad6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 47 .text._ZNK6String8endsWithERKS_ 0000004a  00000000  00000000  00006af6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 48 .text._ZN6String9setCharAtEjc 0000001a  00000000  00000000  00006b40  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 49 .text._ZN6StringixEj 00000026  00000000  00000000  00006b5a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 50 .text._ZNK6StringixEj 00000026  00000000  00000000  00006b80  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 51 .text._ZNK6String6charAtEj 00000006  00000000  00000000  00006ba6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 52 .text._ZNK6String8getBytesEPhjj 00000058  00000000  00000000  00006bac  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 53 .text._ZNK6String7indexOfEcj 0000003c  00000000  00000000  00006c04  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 54 .text._ZNK6String7indexOfEc 0000000a  00000000  00000000  00006c40  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 55 .text._ZNK6String7indexOfERKS_j 0000003c  00000000  00000000  00006c4a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 56 .text._ZNK6String7indexOfERKS_ 0000000a  00000000  00000000  00006c86  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 57 .text._ZNK6String11lastIndexOfEcj 0000006e  00000000  00000000  00006c90  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 58 .text._ZNK6String11lastIndexOfEc 00000010  00000000  00000000  00006cfe  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 59 .text._ZNK6String11lastIndexOfERKS_j 0000009a  00000000  00000000  00006d0e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 60 .text._ZNK6String11lastIndexOfERKS_ 00000016  00000000  00000000  00006da8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 61 .text._ZNK6String9substringEjj 000000a2  00000000  00000000  00006dbe  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 62 .text._ZNK6String9substringEj 00000018  00000000  00000000  00006e60  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 63 .text._ZN6String7replaceEcc 0000001e  00000000  00000000  00006e78  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 64 .text._ZN6String7replaceERKS_S1_ 00000214  00000000  00000000  00006e96  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 65 .text._ZN6String11toLowerCaseEv 00000028  00000000  00000000  000070aa  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 66 .text._ZN6String11toUpperCaseEv 00000028  00000000  00000000  000070d2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 67 .text._ZN6String4trimEv 000000c2  00000000  00000000  000070fa  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 68 .text._ZNK6String5toIntEv 00000020  00000000  00000000  000071bc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 69 .bss._ZZN6StringixEjE19dummy_writable_char 00000001  00000000  00000000  000071dc  2**0
                  ALLOC

Disassembly of section .text._ZN6StringD2Ev:

00000000 <_ZN6StringD1Ev>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	fc 01       	movw	r30, r24
   2:	80 81       	ld	r24, Z
   4:	91 81       	ldd	r25, Z+1	; 0x01
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringD1Ev>
   a:	08 95       	ret

Disassembly of section .text._ZN6String10invalidateEv:

00000000 <_ZN6String10invalidateEv>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	88 81       	ld	r24, Y
   8:	99 81       	ldd	r25, Y+1	; 0x01
   a:	00 97       	sbiw	r24, 0x00	; 0
   c:	01 f0       	breq	.+0      	; 0xe <_ZN6String10invalidateEv+0xe>
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String10invalidateEv>
  12:	19 82       	std	Y+1, r1	; 0x01
	return 0;
  14:	18 82       	st	Y, r1
  16:	1d 82       	std	Y+5, r1	; 0x05
  18:	1c 82       	std	Y+4, r1	; 0x04
}
  1a:	1b 82       	std	Y+3, r1	; 0x03
  1c:	1a 82       	std	Y+2, r1	; 0x02
  1e:	df 91       	pop	r29
  20:	cf 91       	pop	r28
  22:	08 95       	ret

Disassembly of section .text._ZN6String12changeBufferEj:

00000000 <_ZN6String12changeBufferEj>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	8b 01       	movw	r16, r22
   c:	6f 5f       	subi	r22, 0xFF	; 255
   e:	7f 4f       	sbci	r23, 0xFF	; 255
  10:	88 81       	ld	r24, Y
  12:	99 81       	ldd	r25, Y+1	; 0x01
	return 0;
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN6String12changeBufferEj>
  18:	00 97       	sbiw	r24, 0x00	; 0
}
  1a:	01 f0       	breq	.+0      	; 0x1c <_ZN6String12changeBufferEj+0x1c>
  1c:	99 83       	std	Y+1, r25	; 0x01
  1e:	88 83       	st	Y, r24
  20:	1b 83       	std	Y+3, r17	; 0x03
  22:	0a 83       	std	Y+2, r16	; 0x02
  24:	81 e0       	ldi	r24, 0x01	; 1
  26:	00 c0       	rjmp	.+0      	; 0x28 <_ZN6String12changeBufferEj+0x28>
  28:	80 e0       	ldi	r24, 0x00	; 0
  2a:	df 91       	pop	r29
  2c:	cf 91       	pop	r28
  2e:	1f 91       	pop	r17
  30:	0f 91       	pop	r16
  32:	08 95       	ret

Disassembly of section .text._ZN6String7reserveEj:

00000000 <_ZN6String7reserveEj>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	88 81       	ld	r24, Y
   8:	99 81       	ldd	r25, Y+1	; 0x01
   a:	00 97       	sbiw	r24, 0x00	; 0
   c:	01 f0       	breq	.+0      	; 0xe <_ZN6String7reserveEj+0xe>
   e:	8a 81       	ldd	r24, Y+2	; 0x02
  10:	9b 81       	ldd	r25, Y+3	; 0x03
  12:	86 17       	cp	r24, r22
	return 0;
  14:	97 07       	cpc	r25, r23
  16:	00 f4       	brcc	.+0      	; 0x18 <_ZN6String7reserveEj+0x18>
  18:	ce 01       	movw	r24, r28
}
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7reserveEj>
  1e:	88 23       	and	r24, r24
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN6String7reserveEj+0x22>
  22:	8c 81       	ldd	r24, Y+4	; 0x04
  24:	9d 81       	ldd	r25, Y+5	; 0x05
  26:	00 97       	sbiw	r24, 0x00	; 0
  28:	01 f4       	brne	.+0      	; 0x2a <_ZN6String7reserveEj+0x2a>
  2a:	e8 81       	ld	r30, Y
  2c:	f9 81       	ldd	r31, Y+1	; 0x01
  2e:	10 82       	st	Z, r1
  30:	00 c0       	rjmp	.+0      	; 0x32 <_ZN6String7reserveEj+0x32>
  32:	80 e0       	ldi	r24, 0x00	; 0
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN6String7reserveEj+0x36>
  36:	81 e0       	ldi	r24, 0x01	; 1
  38:	df 91       	pop	r29
  3a:	cf 91       	pop	r28
  3c:	08 95       	ret

Disassembly of section .text._ZN6String4copyEPKcj:

00000000 <_ZN6String4copyEPKcj>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	7b 01       	movw	r14, r22
  10:	8a 01       	movw	r16, r20
  12:	ba 01       	movw	r22, r20
	return 0;
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4copyEPKcj>
  18:	88 23       	and	r24, r24
}
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZN6String4copyEPKcj+0x1c>
  1c:	ce 01       	movw	r24, r28
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4copyEPKcj>
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN6String4copyEPKcj+0x24>
  24:	1d 83       	std	Y+5, r17	; 0x05
  26:	0c 83       	std	Y+4, r16	; 0x04
  28:	88 81       	ld	r24, Y
  2a:	99 81       	ldd	r25, Y+1	; 0x01
  2c:	b7 01       	movw	r22, r14
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4copyEPKcj>
  32:	ce 01       	movw	r24, r28
  34:	df 91       	pop	r29
  36:	cf 91       	pop	r28
  38:	1f 91       	pop	r17
  3a:	0f 91       	pop	r16
  3c:	ff 90       	pop	r15
  3e:	ef 90       	pop	r14
  40:	08 95       	ret

Disassembly of section .text._ZN6StringC2EPKc:

00000000 <_ZN6StringC1EPKc>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	11 82       	std	Z+1, r1	; 0x01
   8:	10 82       	st	Z, r1
   a:	13 82       	std	Z+3, r1	; 0x03
   c:	12 82       	std	Z+2, r1	; 0x02
   e:	15 82       	std	Z+5, r1	; 0x05
  10:	14 82       	std	Z+4, r1	; 0x04
  12:	16 82       	std	Z+6, r1	; 0x06
	return 0;
  14:	61 15       	cp	r22, r1
  16:	71 05       	cpc	r23, r1
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN6StringC1EPKc+0x1a>
}
  1a:	eb 01       	movw	r28, r22
  1c:	09 90       	ld	r0, Y+
  1e:	00 20       	and	r0, r0
  20:	01 f4       	brne	.+0      	; 0x22 <_ZN6StringC1EPKc+0x22>
  22:	ae 01       	movw	r20, r28
  24:	41 50       	subi	r20, 0x01	; 1
  26:	50 40       	sbci	r21, 0x00	; 0
  28:	46 1b       	sub	r20, r22
  2a:	57 0b       	sbc	r21, r23
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
  30:	df 91       	pop	r29
  32:	cf 91       	pop	r28
  34:	08 95       	ret

Disassembly of section .text._ZN6StringaSERKS_:

00000000 <_ZN6StringaSERKS_>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	fb 01       	movw	r30, r22
   c:	86 17       	cp	r24, r22
   e:	97 07       	cpc	r25, r23
  10:	01 f0       	breq	.+0      	; 0x12 <_ZN6StringaSERKS_+0x12>
  12:	60 81       	ld	r22, Z
	return 0;
  14:	71 81       	ldd	r23, Z+1	; 0x01
  16:	61 15       	cp	r22, r1
  18:	71 05       	cpc	r23, r1
}
  1a:	01 f0       	breq	.+0      	; 0x1c <_ZN6StringaSERKS_+0x1c>
  1c:	44 81       	ldd	r20, Z+4	; 0x04
  1e:	55 81       	ldd	r21, Z+5	; 0x05
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSERKS_>
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN6StringaSERKS_+0x26>
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSERKS_>
  2a:	ce 01       	movw	r24, r28
  2c:	df 91       	pop	r29
  2e:	cf 91       	pop	r28
  30:	ff 90       	pop	r15
  32:	ef 90       	pop	r14
  34:	08 95       	ret

Disassembly of section .text._ZN6StringC2ERKS_:

00000000 <_ZN6StringC1ERKS_>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	fc 01       	movw	r30, r24
   2:	11 82       	std	Z+1, r1	; 0x01
   4:	10 82       	st	Z, r1
   6:	13 82       	std	Z+3, r1	; 0x03
   8:	12 82       	std	Z+2, r1	; 0x02
   a:	15 82       	std	Z+5, r1	; 0x05
   c:	14 82       	std	Z+4, r1	; 0x04
   e:	16 82       	std	Z+6, r1	; 0x06
  10:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1ERKS_>
	return 0;
  14:	08 95       	ret

Disassembly of section .text._ZN6StringaSEPKc:

00000000 <_ZN6StringaSEPKc>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	61 15       	cp	r22, r1
   8:	71 05       	cpc	r23, r1
   a:	01 f0       	breq	.+0      	; 0xc <_ZN6StringaSEPKc+0xc>
   c:	db 01       	movw	r26, r22
   e:	0d 90       	ld	r0, X+
  10:	00 20       	and	r0, r0
  12:	01 f4       	brne	.+0      	; 0x14 <_ZN6StringaSEPKc+0x14>
	return 0;
  14:	ad 01       	movw	r20, r26
  16:	41 50       	subi	r20, 0x01	; 1
  18:	50 40       	sbci	r21, 0x00	; 0
}
  1a:	46 1b       	sub	r20, r22
  1c:	57 0b       	sbc	r21, r23
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSEPKc>
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN6StringaSEPKc+0x24>
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSEPKc>
  28:	c8 01       	movw	r24, r16
  2a:	1f 91       	pop	r17
  2c:	0f 91       	pop	r16
  2e:	08 95       	ret

Disassembly of section .text._ZN6StringC2Emh:

00000000 <_ZN6StringC1Emh>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	a1 97       	sbiw	r28, 0x21	; 33
  12:	0f b6       	in	r0, 0x3f	; 63
	return 0;
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
}
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
  1e:	cb 01       	movw	r24, r22
  20:	ba 01       	movw	r22, r20
  22:	f7 01       	movw	r30, r14
  24:	11 82       	std	Z+1, r1	; 0x01
  26:	10 82       	st	Z, r1
  28:	13 82       	std	Z+3, r1	; 0x03
  2a:	12 82       	std	Z+2, r1	; 0x02
  2c:	15 82       	std	Z+5, r1	; 0x05
  2e:	14 82       	std	Z+4, r1	; 0x04
  30:	16 82       	std	Z+6, r1	; 0x06
  32:	8e 01       	movw	r16, r28
  34:	0f 5f       	subi	r16, 0xFF	; 255
  36:	1f 4f       	sbci	r17, 0xFF	; 255
  38:	a8 01       	movw	r20, r16
  3a:	30 e0       	ldi	r19, 0x00	; 0
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Emh>
  40:	c7 01       	movw	r24, r14
  42:	b8 01       	movw	r22, r16
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Emh>
  48:	a1 96       	adiw	r28, 0x21	; 33
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	f8 94       	cli
  4e:	de bf       	out	0x3e, r29	; 62
  50:	0f be       	out	0x3f, r0	; 63
  52:	cd bf       	out	0x3d, r28	; 61
  54:	cf 91       	pop	r28
  56:	df 91       	pop	r29
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	08 95       	ret

Disassembly of section .text._ZN6StringC2Elh:

00000000 <_ZN6StringC1Elh>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	a2 97       	sbiw	r28, 0x22	; 34
  12:	0f b6       	in	r0, 0x3f	; 63
	return 0;
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
}
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
  1e:	cb 01       	movw	r24, r22
  20:	ba 01       	movw	r22, r20
  22:	f7 01       	movw	r30, r14
  24:	11 82       	std	Z+1, r1	; 0x01
  26:	10 82       	st	Z, r1
  28:	13 82       	std	Z+3, r1	; 0x03
  2a:	12 82       	std	Z+2, r1	; 0x02
  2c:	15 82       	std	Z+5, r1	; 0x05
  2e:	14 82       	std	Z+4, r1	; 0x04
  30:	16 82       	std	Z+6, r1	; 0x06
  32:	8e 01       	movw	r16, r28
  34:	0f 5f       	subi	r16, 0xFF	; 255
  36:	1f 4f       	sbci	r17, 0xFF	; 255
  38:	a8 01       	movw	r20, r16
  3a:	30 e0       	ldi	r19, 0x00	; 0
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Elh>
  40:	c7 01       	movw	r24, r14
  42:	b8 01       	movw	r22, r16
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Elh>
  48:	a2 96       	adiw	r28, 0x22	; 34
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	f8 94       	cli
  4e:	de bf       	out	0x3e, r29	; 62
  50:	0f be       	out	0x3f, r0	; 63
  52:	cd bf       	out	0x3d, r28	; 61
  54:	cf 91       	pop	r28
  56:	df 91       	pop	r29
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	08 95       	ret

Disassembly of section .text._ZN6StringC2Ejh:

00000000 <_ZN6StringC1Ejh>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	61 97       	sbiw	r28, 0x11	; 17
  12:	0f b6       	in	r0, 0x3f	; 63
	return 0;
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
}
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
  1e:	cb 01       	movw	r24, r22
  20:	f7 01       	movw	r30, r14
  22:	11 82       	std	Z+1, r1	; 0x01
  24:	10 82       	st	Z, r1
  26:	13 82       	std	Z+3, r1	; 0x03
  28:	12 82       	std	Z+2, r1	; 0x02
  2a:	15 82       	std	Z+5, r1	; 0x05
  2c:	14 82       	std	Z+4, r1	; 0x04
  2e:	16 82       	std	Z+6, r1	; 0x06
  30:	8e 01       	movw	r16, r28
  32:	0f 5f       	subi	r16, 0xFF	; 255
  34:	1f 4f       	sbci	r17, 0xFF	; 255
  36:	b8 01       	movw	r22, r16
  38:	50 e0       	ldi	r21, 0x00	; 0
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ejh>
  3e:	c7 01       	movw	r24, r14
  40:	b8 01       	movw	r22, r16
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ejh>
  46:	61 96       	adiw	r28, 0x11	; 17
  48:	0f b6       	in	r0, 0x3f	; 63
  4a:	f8 94       	cli
  4c:	de bf       	out	0x3e, r29	; 62
  4e:	0f be       	out	0x3f, r0	; 63
  50:	cd bf       	out	0x3d, r28	; 61
  52:	cf 91       	pop	r28
  54:	df 91       	pop	r29
  56:	1f 91       	pop	r17
  58:	0f 91       	pop	r16
  5a:	ff 90       	pop	r15
  5c:	ef 90       	pop	r14
  5e:	08 95       	ret

Disassembly of section .text._ZN6StringC2Eih:

00000000 <_ZN6StringC1Eih>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	62 97       	sbiw	r28, 0x12	; 18
  12:	0f b6       	in	r0, 0x3f	; 63
	return 0;
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
}
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
  1e:	cb 01       	movw	r24, r22
  20:	f7 01       	movw	r30, r14
  22:	11 82       	std	Z+1, r1	; 0x01
  24:	10 82       	st	Z, r1
  26:	13 82       	std	Z+3, r1	; 0x03
  28:	12 82       	std	Z+2, r1	; 0x02
  2a:	15 82       	std	Z+5, r1	; 0x05
  2c:	14 82       	std	Z+4, r1	; 0x04
  2e:	16 82       	std	Z+6, r1	; 0x06
  30:	8e 01       	movw	r16, r28
  32:	0f 5f       	subi	r16, 0xFF	; 255
  34:	1f 4f       	sbci	r17, 0xFF	; 255
  36:	b8 01       	movw	r22, r16
  38:	50 e0       	ldi	r21, 0x00	; 0
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Eih>
  3e:	c7 01       	movw	r24, r14
  40:	b8 01       	movw	r22, r16
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Eih>
  46:	62 96       	adiw	r28, 0x12	; 18
  48:	0f b6       	in	r0, 0x3f	; 63
  4a:	f8 94       	cli
  4c:	de bf       	out	0x3e, r29	; 62
  4e:	0f be       	out	0x3f, r0	; 63
  50:	cd bf       	out	0x3d, r28	; 61
  52:	cf 91       	pop	r28
  54:	df 91       	pop	r29
  56:	1f 91       	pop	r17
  58:	0f 91       	pop	r16
  5a:	ff 90       	pop	r15
  5c:	ef 90       	pop	r14
  5e:	08 95       	ret

Disassembly of section .text._ZN6StringC2Ehh:

00000000 <_ZN6StringC1Ehh>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	29 97       	sbiw	r28, 0x09	; 9
  12:	0f b6       	in	r0, 0x3f	; 63
	return 0;
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
}
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
  1e:	86 2f       	mov	r24, r22
  20:	f7 01       	movw	r30, r14
  22:	11 82       	std	Z+1, r1	; 0x01
  24:	10 82       	st	Z, r1
  26:	13 82       	std	Z+3, r1	; 0x03
  28:	12 82       	std	Z+2, r1	; 0x02
  2a:	15 82       	std	Z+5, r1	; 0x05
  2c:	14 82       	std	Z+4, r1	; 0x04
  2e:	16 82       	std	Z+6, r1	; 0x06
  30:	90 e0       	ldi	r25, 0x00	; 0
  32:	8e 01       	movw	r16, r28
  34:	0f 5f       	subi	r16, 0xFF	; 255
  36:	1f 4f       	sbci	r17, 0xFF	; 255
  38:	b8 01       	movw	r22, r16
  3a:	50 e0       	ldi	r21, 0x00	; 0
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ehh>
  40:	c7 01       	movw	r24, r14
  42:	b8 01       	movw	r22, r16
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ehh>
  48:	29 96       	adiw	r28, 0x09	; 9
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	f8 94       	cli
  4e:	de bf       	out	0x3e, r29	; 62
  50:	0f be       	out	0x3f, r0	; 63
  52:	cd bf       	out	0x3d, r28	; 61
  54:	cf 91       	pop	r28
  56:	df 91       	pop	r29
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	08 95       	ret

Disassembly of section .text._ZN6StringC2Ec:

00000000 <_ZN6StringC1Ec>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	0f 92       	push	r0
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	fc 01       	movw	r30, r24
   e:	11 82       	std	Z+1, r1	; 0x01
  10:	10 82       	st	Z, r1
  12:	13 82       	std	Z+3, r1	; 0x03
	return 0;
  14:	12 82       	std	Z+2, r1	; 0x02
  16:	15 82       	std	Z+5, r1	; 0x05
  18:	14 82       	std	Z+4, r1	; 0x04
}
  1a:	16 82       	std	Z+6, r1	; 0x06
  1c:	69 83       	std	Y+1, r22	; 0x01
  1e:	1a 82       	std	Y+2, r1	; 0x02
  20:	be 01       	movw	r22, r28
  22:	6f 5f       	subi	r22, 0xFF	; 255
  24:	7f 4f       	sbci	r23, 0xFF	; 255
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ec>
  2a:	0f 90       	pop	r0
  2c:	0f 90       	pop	r0
  2e:	cf 91       	pop	r28
  30:	df 91       	pop	r29
  32:	08 95       	ret

Disassembly of section .text._ZN6String6concatEPKcj:

00000000 <_ZN6String6concatEPKcj>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	7b 01       	movw	r14, r22
  10:	0c 81       	ldd	r16, Y+4	; 0x04
  12:	1d 81       	ldd	r17, Y+5	; 0x05
	return 0;
  14:	61 15       	cp	r22, r1
  16:	71 05       	cpc	r23, r1
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN6String6concatEPKcj+0x1a>
}
  1a:	41 15       	cp	r20, r1
  1c:	51 05       	cpc	r21, r1
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN6String6concatEPKcj+0x20>
  20:	04 0f       	add	r16, r20
  22:	15 1f       	adc	r17, r21
  24:	b8 01       	movw	r22, r16
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEPKcj>
  2a:	88 23       	and	r24, r24
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZN6String6concatEPKcj+0x2e>
  2e:	28 81       	ld	r18, Y
  30:	39 81       	ldd	r19, Y+1	; 0x01
  32:	8c 81       	ldd	r24, Y+4	; 0x04
  34:	9d 81       	ldd	r25, Y+5	; 0x05
  36:	82 0f       	add	r24, r18
  38:	93 1f       	adc	r25, r19
  3a:	b7 01       	movw	r22, r14
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEPKcj>
  40:	1d 83       	std	Y+5, r17	; 0x05
  42:	0c 83       	std	Y+4, r16	; 0x04
  44:	81 e0       	ldi	r24, 0x01	; 1
  46:	00 c0       	rjmp	.+0      	; 0x48 <_ZN6String6concatEPKcj+0x48>
  48:	80 e0       	ldi	r24, 0x00	; 0
  4a:	df 91       	pop	r29
  4c:	cf 91       	pop	r28
  4e:	1f 91       	pop	r17
  50:	0f 91       	pop	r16
  52:	ff 90       	pop	r15
  54:	ef 90       	pop	r14
  56:	08 95       	ret

Disassembly of section .text._ZN6String6concatERKS_:

00000000 <_ZN6String6concatERKS_>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	fb 01       	movw	r30, r22
   2:	60 81       	ld	r22, Z
   4:	71 81       	ldd	r23, Z+1	; 0x01
   6:	44 81       	ldd	r20, Z+4	; 0x04
   8:	55 81       	ldd	r21, Z+5	; 0x05
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatERKS_>
   e:	08 95       	ret

Disassembly of section .text._ZN6String6concatEPKc:

00000000 <_ZN6String6concatEPKc>:
   0:	61 15       	cp	r22, r1
   2:	71 05       	cpc	r23, r1
   4:	01 f0       	breq	.+0      	; 0x6 <_ZN6String6concatEPKc+0x6>
   6:	db 01       	movw	r26, r22
   8:	0d 90       	ld	r0, X+
   a:	00 20       	and	r0, r0
   c:	01 f4       	brne	.+0      	; 0xe <_ZN6String6concatEPKc+0xe>
   e:	ad 01       	movw	r20, r26
  10:	41 50       	subi	r20, 0x01	; 1
  12:	50 40       	sbci	r21, 0x00	; 0
	return 0;
  14:	46 1b       	sub	r20, r22
  16:	57 0b       	sbc	r21, r23
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEPKc>
}
  1c:	08 95       	ret
  1e:	80 e0       	ldi	r24, 0x00	; 0
  20:	08 95       	ret

Disassembly of section .text._ZN6String6concatEc:

00000000 <_ZN6String6concatEc>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	0f 92       	push	r0
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	69 83       	std	Y+1, r22	; 0x01
   e:	1a 82       	std	Y+2, r1	; 0x02
  10:	be 01       	movw	r22, r28
  12:	6f 5f       	subi	r22, 0xFF	; 255
	return 0;
  14:	7f 4f       	sbci	r23, 0xFF	; 255
  16:	41 e0       	ldi	r20, 0x01	; 1
  18:	50 e0       	ldi	r21, 0x00	; 0
}
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEc>
  1e:	0f 90       	pop	r0
  20:	0f 90       	pop	r0
  22:	cf 91       	pop	r28
  24:	df 91       	pop	r29
  26:	08 95       	ret

Disassembly of section .text._ZN6String6concatEh:

00000000 <_ZN6String6concatEh>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	00 d0       	rcall	.+0      	; 0xe <_ZN6String6concatEh+0xe>
   e:	0f 92       	push	r0
  10:	cd b7       	in	r28, 0x3d	; 61
  12:	de b7       	in	r29, 0x3e	; 62
	return 0;
  14:	7c 01       	movw	r14, r24
  16:	86 2f       	mov	r24, r22
  18:	90 e0       	ldi	r25, 0x00	; 0
}
  1a:	8e 01       	movw	r16, r28
  1c:	0f 5f       	subi	r16, 0xFF	; 255
  1e:	1f 4f       	sbci	r17, 0xFF	; 255
  20:	b8 01       	movw	r22, r16
  22:	4a e0       	ldi	r20, 0x0A	; 10
  24:	50 e0       	ldi	r21, 0x00	; 0
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEh>
  2a:	f8 01       	movw	r30, r16
  2c:	01 90       	ld	r0, Z+
  2e:	00 20       	and	r0, r0
  30:	01 f4       	brne	.+0      	; 0x32 <_ZN6String6concatEh+0x32>
  32:	af 01       	movw	r20, r30
  34:	41 50       	subi	r20, 0x01	; 1
  36:	50 40       	sbci	r21, 0x00	; 0
  38:	40 1b       	sub	r20, r16
  3a:	51 0b       	sbc	r21, r17
  3c:	c7 01       	movw	r24, r14
  3e:	b8 01       	movw	r22, r16
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEh>
  44:	0f 90       	pop	r0
  46:	0f 90       	pop	r0
  48:	0f 90       	pop	r0
  4a:	0f 90       	pop	r0
  4c:	cf 91       	pop	r28
  4e:	df 91       	pop	r29
  50:	1f 91       	pop	r17
  52:	0f 91       	pop	r16
  54:	ff 90       	pop	r15
  56:	ef 90       	pop	r14
  58:	08 95       	ret

Disassembly of section .text._ZN6String6concatEi:

00000000 <_ZN6String6concatEi>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	27 97       	sbiw	r28, 0x07	; 7
  12:	0f b6       	in	r0, 0x3f	; 63
	return 0;
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
}
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
  1e:	cb 01       	movw	r24, r22
  20:	8e 01       	movw	r16, r28
  22:	0f 5f       	subi	r16, 0xFF	; 255
  24:	1f 4f       	sbci	r17, 0xFF	; 255
  26:	b8 01       	movw	r22, r16
  28:	4a e0       	ldi	r20, 0x0A	; 10
  2a:	50 e0       	ldi	r21, 0x00	; 0
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEi>
  30:	f8 01       	movw	r30, r16
  32:	01 90       	ld	r0, Z+
  34:	00 20       	and	r0, r0
  36:	01 f4       	brne	.+0      	; 0x38 <_ZN6String6concatEi+0x38>
  38:	af 01       	movw	r20, r30
  3a:	41 50       	subi	r20, 0x01	; 1
  3c:	50 40       	sbci	r21, 0x00	; 0
  3e:	40 1b       	sub	r20, r16
  40:	51 0b       	sbc	r21, r17
  42:	c7 01       	movw	r24, r14
  44:	b8 01       	movw	r22, r16
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEi>
  4a:	27 96       	adiw	r28, 0x07	; 7
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret

Disassembly of section .text._ZN6String6concatEj:

00000000 <_ZN6String6concatEj>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	00 d0       	rcall	.+0      	; 0xe <_ZN6String6concatEj+0xe>
   e:	00 d0       	rcall	.+0      	; 0x10 <_ZN6String6concatEj+0x10>
  10:	cd b7       	in	r28, 0x3d	; 61
  12:	de b7       	in	r29, 0x3e	; 62
	return 0;
  14:	7c 01       	movw	r14, r24
  16:	cb 01       	movw	r24, r22
  18:	8e 01       	movw	r16, r28
}
  1a:	0f 5f       	subi	r16, 0xFF	; 255
  1c:	1f 4f       	sbci	r17, 0xFF	; 255
  1e:	b8 01       	movw	r22, r16
  20:	4a e0       	ldi	r20, 0x0A	; 10
  22:	50 e0       	ldi	r21, 0x00	; 0
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEj>
  28:	f8 01       	movw	r30, r16
  2a:	01 90       	ld	r0, Z+
  2c:	00 20       	and	r0, r0
  2e:	01 f4       	brne	.+0      	; 0x30 <_ZN6String6concatEj+0x30>
  30:	af 01       	movw	r20, r30
  32:	41 50       	subi	r20, 0x01	; 1
  34:	50 40       	sbci	r21, 0x00	; 0
  36:	40 1b       	sub	r20, r16
  38:	51 0b       	sbc	r21, r17
  3a:	c7 01       	movw	r24, r14
  3c:	b8 01       	movw	r22, r16
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEj>
  42:	26 96       	adiw	r28, 0x06	; 6
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	f8 94       	cli
  48:	de bf       	out	0x3e, r29	; 62
  4a:	0f be       	out	0x3f, r0	; 63
  4c:	cd bf       	out	0x3d, r28	; 61
  4e:	cf 91       	pop	r28
  50:	df 91       	pop	r29
  52:	1f 91       	pop	r17
  54:	0f 91       	pop	r16
  56:	ff 90       	pop	r15
  58:	ef 90       	pop	r14
  5a:	08 95       	ret

Disassembly of section .text._ZN6String6concatEl:

00000000 <_ZN6String6concatEl>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	2c 97       	sbiw	r28, 0x0c	; 12
  12:	0f b6       	in	r0, 0x3f	; 63
	return 0;
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
}
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
  1e:	cb 01       	movw	r24, r22
  20:	ba 01       	movw	r22, r20
  22:	8e 01       	movw	r16, r28
  24:	0f 5f       	subi	r16, 0xFF	; 255
  26:	1f 4f       	sbci	r17, 0xFF	; 255
  28:	a8 01       	movw	r20, r16
  2a:	2a e0       	ldi	r18, 0x0A	; 10
  2c:	30 e0       	ldi	r19, 0x00	; 0
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEl>
  32:	f8 01       	movw	r30, r16
  34:	01 90       	ld	r0, Z+
  36:	00 20       	and	r0, r0
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN6String6concatEl+0x3a>
  3a:	af 01       	movw	r20, r30
  3c:	41 50       	subi	r20, 0x01	; 1
  3e:	50 40       	sbci	r21, 0x00	; 0
  40:	40 1b       	sub	r20, r16
  42:	51 0b       	sbc	r21, r17
  44:	c7 01       	movw	r24, r14
  46:	b8 01       	movw	r22, r16
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEl>
  4c:	2c 96       	adiw	r28, 0x0c	; 12
  4e:	0f b6       	in	r0, 0x3f	; 63
  50:	f8 94       	cli
  52:	de bf       	out	0x3e, r29	; 62
  54:	0f be       	out	0x3f, r0	; 63
  56:	cd bf       	out	0x3d, r28	; 61
  58:	cf 91       	pop	r28
  5a:	df 91       	pop	r29
  5c:	1f 91       	pop	r17
  5e:	0f 91       	pop	r16
  60:	ff 90       	pop	r15
  62:	ef 90       	pop	r14
  64:	08 95       	ret

Disassembly of section .text._ZN6String6concatEm:

00000000 <_ZN6String6concatEm>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	2b 97       	sbiw	r28, 0x0b	; 11
  12:	0f b6       	in	r0, 0x3f	; 63
	return 0;
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
}
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
  1e:	cb 01       	movw	r24, r22
  20:	ba 01       	movw	r22, r20
  22:	8e 01       	movw	r16, r28
  24:	0f 5f       	subi	r16, 0xFF	; 255
  26:	1f 4f       	sbci	r17, 0xFF	; 255
  28:	a8 01       	movw	r20, r16
  2a:	2a e0       	ldi	r18, 0x0A	; 10
  2c:	30 e0       	ldi	r19, 0x00	; 0
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEm>
  32:	f8 01       	movw	r30, r16
  34:	01 90       	ld	r0, Z+
  36:	00 20       	and	r0, r0
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN6String6concatEm+0x3a>
  3a:	af 01       	movw	r20, r30
  3c:	41 50       	subi	r20, 0x01	; 1
  3e:	50 40       	sbci	r21, 0x00	; 0
  40:	40 1b       	sub	r20, r16
  42:	51 0b       	sbc	r21, r17
  44:	c7 01       	movw	r24, r14
  46:	b8 01       	movw	r22, r16
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEm>
  4c:	2b 96       	adiw	r28, 0x0b	; 11
  4e:	0f b6       	in	r0, 0x3f	; 63
  50:	f8 94       	cli
  52:	de bf       	out	0x3e, r29	; 62
  54:	0f be       	out	0x3f, r0	; 63
  56:	cd bf       	out	0x3d, r28	; 61
  58:	cf 91       	pop	r28
  5a:	df 91       	pop	r29
  5c:	1f 91       	pop	r17
  5e:	0f 91       	pop	r16
  60:	ff 90       	pop	r15
  62:	ef 90       	pop	r14
  64:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperRK6String:

00000000 <_ZplRK15StringSumHelperRK6String>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	fb 01       	movw	r30, r22
   8:	60 81       	ld	r22, Z
   a:	71 81       	ldd	r23, Z+1	; 0x01
   c:	44 81       	ldd	r20, Z+4	; 0x04
   e:	55 81       	ldd	r21, Z+5	; 0x05
  10:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperRK6String>
	return 0;
  14:	88 23       	and	r24, r24
  16:	01 f4       	brne	.+0      	; 0x18 <_ZplRK15StringSumHelperRK6String+0x18>
  18:	c8 01       	movw	r24, r16
}
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperRK6String>
  1e:	c8 01       	movw	r24, r16
  20:	1f 91       	pop	r17
  22:	0f 91       	pop	r16
  24:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperPKc:

00000000 <_ZplRK15StringSumHelperPKc>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	61 15       	cp	r22, r1
   8:	71 05       	cpc	r23, r1
   a:	01 f0       	breq	.+0      	; 0xc <_ZplRK15StringSumHelperPKc+0xc>
   c:	db 01       	movw	r26, r22
   e:	0d 90       	ld	r0, X+
  10:	00 20       	and	r0, r0
  12:	01 f4       	brne	.+0      	; 0x14 <_ZplRK15StringSumHelperPKc+0x14>
	return 0;
  14:	ad 01       	movw	r20, r26
  16:	41 50       	subi	r20, 0x01	; 1
  18:	50 40       	sbci	r21, 0x00	; 0
}
  1a:	46 1b       	sub	r20, r22
  1c:	57 0b       	sbc	r21, r23
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperPKc>
  22:	88 23       	and	r24, r24
  24:	01 f4       	brne	.+0      	; 0x26 <_ZplRK15StringSumHelperPKc+0x26>
  26:	c8 01       	movw	r24, r16
  28:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperPKc>
  2c:	c8 01       	movw	r24, r16
  2e:	1f 91       	pop	r17
  30:	0f 91       	pop	r16
  32:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperc:

00000000 <_ZplRK15StringSumHelperc>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperc>
   a:	88 23       	and	r24, r24
   c:	01 f4       	brne	.+0      	; 0xe <_ZplRK15StringSumHelperc+0xe>
   e:	c8 01       	movw	r24, r16
  10:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperc>
	return 0;
  14:	c8 01       	movw	r24, r16
  16:	1f 91       	pop	r17
  18:	0f 91       	pop	r16
}
  1a:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperh:

00000000 <_ZplRK15StringSumHelperh>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperh>
   a:	88 23       	and	r24, r24
   c:	01 f4       	brne	.+0      	; 0xe <_ZplRK15StringSumHelperh+0xe>
   e:	c8 01       	movw	r24, r16
  10:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperh>
	return 0;
  14:	c8 01       	movw	r24, r16
  16:	1f 91       	pop	r17
  18:	0f 91       	pop	r16
}
  1a:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperi:

00000000 <_ZplRK15StringSumHelperi>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperi>
   a:	88 23       	and	r24, r24
   c:	01 f4       	brne	.+0      	; 0xe <_ZplRK15StringSumHelperi+0xe>
   e:	c8 01       	movw	r24, r16
  10:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperi>
	return 0;
  14:	c8 01       	movw	r24, r16
  16:	1f 91       	pop	r17
  18:	0f 91       	pop	r16
}
  1a:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperj:

00000000 <_ZplRK15StringSumHelperj>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperj>
   a:	88 23       	and	r24, r24
   c:	01 f4       	brne	.+0      	; 0xe <_ZplRK15StringSumHelperj+0xe>
   e:	c8 01       	movw	r24, r16
  10:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperj>
	return 0;
  14:	c8 01       	movw	r24, r16
  16:	1f 91       	pop	r17
  18:	0f 91       	pop	r16
}
  1a:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperl:

00000000 <_ZplRK15StringSumHelperl>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperl>
   a:	88 23       	and	r24, r24
   c:	01 f4       	brne	.+0      	; 0xe <_ZplRK15StringSumHelperl+0xe>
   e:	c8 01       	movw	r24, r16
  10:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperl>
	return 0;
  14:	c8 01       	movw	r24, r16
  16:	1f 91       	pop	r17
  18:	0f 91       	pop	r16
}
  1a:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperm:

00000000 <_ZplRK15StringSumHelperm>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperm>
   a:	88 23       	and	r24, r24
   c:	01 f4       	brne	.+0      	; 0xe <_ZplRK15StringSumHelperm+0xe>
   e:	c8 01       	movw	r24, r16
  10:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperm>
	return 0;
  14:	c8 01       	movw	r24, r16
  16:	1f 91       	pop	r17
  18:	0f 91       	pop	r16
}
  1a:	08 95       	ret

Disassembly of section .text._ZNK6String9compareToERKS_:

00000000 <_ZNK6String9compareToERKS_>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	db 01       	movw	r26, r22
   8:	80 81       	ld	r24, Z
   a:	91 81       	ldd	r25, Z+1	; 0x01
   c:	00 97       	sbiw	r24, 0x00	; 0
   e:	01 f0       	breq	.+0      	; 0x10 <_ZNK6String9compareToERKS_+0x10>
  10:	6d 91       	ld	r22, X+
  12:	7c 91       	ld	r23, X
	return 0;
  14:	11 97       	sbiw	r26, 0x01	; 1
  16:	61 15       	cp	r22, r1
  18:	71 05       	cpc	r23, r1
}
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZNK6String9compareToERKS_+0x1c>
  1c:	cd 91       	ld	r28, X+
  1e:	dc 91       	ld	r29, X
  20:	11 97       	sbiw	r26, 0x01	; 1
  22:	20 97       	sbiw	r28, 0x00	; 0
  24:	01 f0       	breq	.+0      	; 0x26 <_ZNK6String9compareToERKS_+0x26>
  26:	14 96       	adiw	r26, 0x04	; 4
  28:	2d 91       	ld	r18, X+
  2a:	3c 91       	ld	r19, X
  2c:	15 97       	sbiw	r26, 0x05	; 5
  2e:	21 15       	cp	r18, r1
  30:	31 05       	cpc	r19, r1
  32:	01 f0       	breq	.+0      	; 0x34 <_ZNK6String9compareToERKS_+0x34>
  34:	28 81       	ld	r18, Y
  36:	30 e0       	ldi	r19, 0x00	; 0
  38:	30 95       	com	r19
  3a:	21 95       	neg	r18
  3c:	3f 4f       	sbci	r19, 0xFF	; 255
  3e:	00 c0       	rjmp	.+0      	; 0x40 <_ZNK6String9compareToERKS_+0x40>
  40:	00 97       	sbiw	r24, 0x00	; 0
  42:	01 f0       	breq	.+0      	; 0x44 <_ZNK6String9compareToERKS_+0x44>
  44:	24 81       	ldd	r18, Z+4	; 0x04
  46:	35 81       	ldd	r19, Z+5	; 0x05
  48:	21 15       	cp	r18, r1
  4a:	31 05       	cpc	r19, r1
  4c:	01 f0       	breq	.+0      	; 0x4e <_ZNK6String9compareToERKS_+0x4e>
  4e:	fc 01       	movw	r30, r24
  50:	20 81       	ld	r18, Z
  52:	30 e0       	ldi	r19, 0x00	; 0
  54:	00 c0       	rjmp	.+0      	; 0x56 <_ZNK6String9compareToERKS_+0x56>
  56:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9compareToERKS_>
  5a:	28 2f       	mov	r18, r24
  5c:	39 2f       	mov	r19, r25
  5e:	00 c0       	rjmp	.+0      	; 0x60 <_ZNK6String9compareToERKS_+0x60>
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	30 e0       	ldi	r19, 0x00	; 0
  64:	c9 01       	movw	r24, r18
  66:	df 91       	pop	r29
  68:	cf 91       	pop	r28
  6a:	08 95       	ret

Disassembly of section .text._ZNK6String6equalsERKS_:

00000000 <_ZNK6String6equalsERKS_>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	fc 01       	movw	r30, r24
   2:	44 81       	ldd	r20, Z+4	; 0x04
   4:	55 81       	ldd	r21, Z+5	; 0x05
   6:	fb 01       	movw	r30, r22
   8:	24 81       	ldd	r18, Z+4	; 0x04
   a:	35 81       	ldd	r19, Z+5	; 0x05
   c:	42 17       	cp	r20, r18
   e:	53 07       	cpc	r21, r19
  10:	01 f4       	brne	.+0      	; 0x12 <_ZNK6String6equalsERKS_+0x12>
  12:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6equalsERKS_>
	return 0;
  16:	21 e0       	ldi	r18, 0x01	; 1
  18:	00 97       	sbiw	r24, 0x00	; 0
}
  1a:	01 f0       	breq	.+0      	; 0x1c <_ZNK6String6equalsERKS_+0x1c>
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	82 2f       	mov	r24, r18
  20:	08 95       	ret

Disassembly of section .text._ZNK6String6equalsEPKc:

00000000 <_ZNK6String6equalsEPKc>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	fc 01       	movw	r30, r24
   2:	84 81       	ldd	r24, Z+4	; 0x04
   4:	95 81       	ldd	r25, Z+5	; 0x05
   6:	00 97       	sbiw	r24, 0x00	; 0
   8:	01 f4       	brne	.+0      	; 0xa <_ZNK6String6equalsEPKc+0xa>
   a:	61 15       	cp	r22, r1
   c:	71 05       	cpc	r23, r1
   e:	01 f0       	breq	.+0      	; 0x10 <_ZNK6String6equalsEPKc+0x10>
  10:	81 e0       	ldi	r24, 0x01	; 1
  12:	fb 01       	movw	r30, r22
	return 0;
  14:	00 c0       	rjmp	.+0      	; 0x16 <_ZNK6String6equalsEPKc+0x16>
  16:	81 e0       	ldi	r24, 0x01	; 1
  18:	08 95       	ret
}
  1a:	01 90       	ld	r0, Z+
  1c:	f0 81       	ld	r31, Z
  1e:	e0 2d       	mov	r30, r0
  20:	61 15       	cp	r22, r1
  22:	71 05       	cpc	r23, r1
  24:	01 f4       	brne	.+0      	; 0x26 <_ZNK6String6equalsEPKc+0x26>
  26:	81 e0       	ldi	r24, 0x01	; 1
  28:	90 81       	ld	r25, Z
  2a:	99 23       	and	r25, r25
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZNK6String6equalsEPKc+0x2e>
  2e:	80 e0       	ldi	r24, 0x00	; 0
  30:	08 95       	ret
  32:	cf 01       	movw	r24, r30
  34:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6equalsEPKc>
  38:	9c 01       	movw	r18, r24
  3a:	81 e0       	ldi	r24, 0x01	; 1
  3c:	21 15       	cp	r18, r1
  3e:	31 05       	cpc	r19, r1
  40:	01 f0       	breq	.+0      	; 0x42 <_ZNK6String6equalsEPKc+0x42>
  42:	80 e0       	ldi	r24, 0x00	; 0
  44:	08 95       	ret

Disassembly of section .text._ZNK6StringltERKS_:

00000000 <_ZNK6StringltERKS_>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringltERKS_>
   4:	89 2f       	mov	r24, r25
   6:	88 1f       	adc	r24, r24
   8:	88 27       	eor	r24, r24
   a:	88 1f       	adc	r24, r24
   c:	08 95       	ret

Disassembly of section .text._ZNK6StringgtERKS_:

00000000 <_ZNK6StringgtERKS_>:
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringgtERKS_>
   4:	21 e0       	ldi	r18, 0x01	; 1
   6:	18 16       	cp	r1, r24
   8:	19 06       	cpc	r1, r25
   a:	04 f0       	brlt	.+0      	; 0xc <_ZNK6StringgtERKS_+0xc>
   c:	20 e0       	ldi	r18, 0x00	; 0
   e:	82 2f       	mov	r24, r18
  10:	08 95       	ret

Disassembly of section .text._ZNK6StringleERKS_:

00000000 <_ZNK6StringleERKS_>:
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringleERKS_>
   4:	21 e0       	ldi	r18, 0x01	; 1
   6:	18 16       	cp	r1, r24
   8:	19 06       	cpc	r1, r25
   a:	04 f4       	brge	.+0      	; 0xc <_ZNK6StringleERKS_+0xc>
   c:	20 e0       	ldi	r18, 0x00	; 0
   e:	82 2f       	mov	r24, r18
  10:	08 95       	ret

Disassembly of section .text._ZNK6StringgeERKS_:

00000000 <_ZNK6StringgeERKS_>:
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringgeERKS_>
   4:	89 2f       	mov	r24, r25
   6:	80 95       	com	r24
   8:	88 1f       	adc	r24, r24
   a:	88 27       	eor	r24, r24
   c:	88 1f       	adc	r24, r24
   e:	08 95       	ret

Disassembly of section .text._ZNK6String16equalsIgnoreCaseERKS_:

00000000 <_ZNK6String16equalsIgnoreCaseERKS_>:
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	fc 01       	movw	r30, r24
   e:	db 01       	movw	r26, r22
  10:	86 17       	cp	r24, r22
  12:	97 07       	cpc	r25, r23
	return 0;
  14:	01 f0       	breq	.+0      	; 0x16 <_ZNK6String16equalsIgnoreCaseERKS_+0x16>
  16:	84 81       	ldd	r24, Z+4	; 0x04
  18:	95 81       	ldd	r25, Z+5	; 0x05
}
  1a:	14 96       	adiw	r26, 0x04	; 4
  1c:	2d 91       	ld	r18, X+
  1e:	3c 91       	ld	r19, X
  20:	15 97       	sbiw	r26, 0x05	; 5
  22:	82 17       	cp	r24, r18
  24:	93 07       	cpc	r25, r19
  26:	01 f4       	brne	.+0      	; 0x28 <_ZNK6String16equalsIgnoreCaseERKS_+0x28>
  28:	00 97       	sbiw	r24, 0x00	; 0
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZNK6String16equalsIgnoreCaseERKS_+0x2c>
  2c:	00 81       	ld	r16, Z
  2e:	11 81       	ldd	r17, Z+1	; 0x01
  30:	cd 91       	ld	r28, X+
  32:	dc 91       	ld	r29, X
  34:	11 97       	sbiw	r26, 0x01	; 1
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZNK6String16equalsIgnoreCaseERKS_+0x38>
  38:	99 27       	eor	r25, r25
  3a:	87 fd       	sbrc	r24, 7
  3c:	90 95       	com	r25
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String16equalsIgnoreCaseERKS_>
  42:	7c 01       	movw	r14, r24
  44:	89 91       	ld	r24, Y+
  46:	99 27       	eor	r25, r25
  48:	87 fd       	sbrc	r24, 7
  4a:	90 95       	com	r25
  4c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String16equalsIgnoreCaseERKS_>
  50:	e8 16       	cp	r14, r24
  52:	f9 06       	cpc	r15, r25
  54:	01 f4       	brne	.+0      	; 0x56 <_ZNK6String16equalsIgnoreCaseERKS_+0x56>
  56:	f8 01       	movw	r30, r16
  58:	81 91       	ld	r24, Z+
  5a:	8f 01       	movw	r16, r30
  5c:	88 23       	and	r24, r24
  5e:	01 f4       	brne	.+0      	; 0x60 <_ZNK6String16equalsIgnoreCaseERKS_+0x60>
  60:	81 e0       	ldi	r24, 0x01	; 1
  62:	00 c0       	rjmp	.+0      	; 0x64 <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
  64:	80 e0       	ldi	r24, 0x00	; 0
  66:	df 91       	pop	r29
  68:	cf 91       	pop	r28
  6a:	1f 91       	pop	r17
  6c:	0f 91       	pop	r16
  6e:	ff 90       	pop	r15
  70:	ef 90       	pop	r14
  72:	08 95       	ret

Disassembly of section .text._ZNK6String10startsWithERKS_j:

00000000 <_ZNK6String10startsWithERKS_j>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	fc 01       	movw	r30, r24
   2:	db 01       	movw	r26, r22
   4:	ca 01       	movw	r24, r20
   6:	14 96       	adiw	r26, 0x04	; 4
   8:	4d 91       	ld	r20, X+
   a:	5c 91       	ld	r21, X
   c:	15 97       	sbiw	r26, 0x05	; 5
   e:	24 81       	ldd	r18, Z+4	; 0x04
  10:	35 81       	ldd	r19, Z+5	; 0x05
  12:	24 1b       	sub	r18, r20
	return 0;
  14:	35 0b       	sbc	r19, r21
  16:	28 17       	cp	r18, r24
  18:	39 07       	cpc	r19, r25
}
  1a:	00 f0       	brcs	.+0      	; 0x1c <_ZNK6String10startsWithERKS_j+0x1c>
  1c:	20 81       	ld	r18, Z
  1e:	31 81       	ldd	r19, Z+1	; 0x01
  20:	21 15       	cp	r18, r1
  22:	31 05       	cpc	r19, r1
  24:	01 f0       	breq	.+0      	; 0x26 <_ZNK6String10startsWithERKS_j+0x26>
  26:	6d 91       	ld	r22, X+
  28:	7c 91       	ld	r23, X
  2a:	11 97       	sbiw	r26, 0x01	; 1
  2c:	61 15       	cp	r22, r1
  2e:	71 05       	cpc	r23, r1
  30:	01 f0       	breq	.+0      	; 0x32 <_ZNK6String10startsWithERKS_j+0x32>
  32:	82 0f       	add	r24, r18
  34:	93 1f       	adc	r25, r19
  36:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String10startsWithERKS_j>
  3a:	9c 01       	movw	r18, r24
  3c:	81 e0       	ldi	r24, 0x01	; 1
  3e:	21 15       	cp	r18, r1
  40:	31 05       	cpc	r19, r1
  42:	01 f0       	breq	.+0      	; 0x44 <_ZNK6String10startsWithERKS_j+0x44>
  44:	80 e0       	ldi	r24, 0x00	; 0
  46:	08 95       	ret
  48:	80 e0       	ldi	r24, 0x00	; 0
  4a:	08 95       	ret

Disassembly of section .text._ZNK6String10startsWithERKS_:

00000000 <_ZNK6String10startsWithERKS_>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	fc 01       	movw	r30, r24
   2:	44 81       	ldd	r20, Z+4	; 0x04
   4:	55 81       	ldd	r21, Z+5	; 0x05
   6:	fb 01       	movw	r30, r22
   8:	24 81       	ldd	r18, Z+4	; 0x04
   a:	35 81       	ldd	r19, Z+5	; 0x05
   c:	42 17       	cp	r20, r18
   e:	53 07       	cpc	r21, r19
  10:	00 f0       	brcs	.+0      	; 0x12 <_ZNK6String10startsWithERKS_+0x12>
  12:	40 e0       	ldi	r20, 0x00	; 0
	return 0;
  14:	50 e0       	ldi	r21, 0x00	; 0
  16:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String10startsWithERKS_>
}
  1a:	08 95       	ret
  1c:	80 e0       	ldi	r24, 0x00	; 0
  1e:	08 95       	ret

Disassembly of section .text._ZNK6String8endsWithERKS_:

00000000 <_ZNK6String8endsWithERKS_>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	fc 01       	movw	r30, r24
   2:	db 01       	movw	r26, r22
   4:	84 81       	ldd	r24, Z+4	; 0x04
   6:	95 81       	ldd	r25, Z+5	; 0x05
   8:	14 96       	adiw	r26, 0x04	; 4
   a:	4d 91       	ld	r20, X+
   c:	5c 91       	ld	r21, X
   e:	15 97       	sbiw	r26, 0x05	; 5
  10:	84 17       	cp	r24, r20
  12:	95 07       	cpc	r25, r21
	return 0;
  14:	00 f0       	brcs	.+0      	; 0x16 <_ZNK6String8endsWithERKS_+0x16>
  16:	20 81       	ld	r18, Z
  18:	31 81       	ldd	r19, Z+1	; 0x01
}
  1a:	21 15       	cp	r18, r1
  1c:	31 05       	cpc	r19, r1
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZNK6String8endsWithERKS_+0x20>
  20:	6d 91       	ld	r22, X+
  22:	7c 91       	ld	r23, X
  24:	11 97       	sbiw	r26, 0x01	; 1
  26:	61 15       	cp	r22, r1
  28:	71 05       	cpc	r23, r1
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZNK6String8endsWithERKS_+0x2c>
  2c:	84 1b       	sub	r24, r20
  2e:	95 0b       	sbc	r25, r21
  30:	82 0f       	add	r24, r18
  32:	93 1f       	adc	r25, r19
  34:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String8endsWithERKS_>
  38:	9c 01       	movw	r18, r24
  3a:	81 e0       	ldi	r24, 0x01	; 1
  3c:	21 15       	cp	r18, r1
  3e:	31 05       	cpc	r19, r1
  40:	01 f0       	breq	.+0      	; 0x42 <_ZNK6String8endsWithERKS_+0x42>
  42:	80 e0       	ldi	r24, 0x00	; 0
  44:	08 95       	ret
  46:	80 e0       	ldi	r24, 0x00	; 0
  48:	08 95       	ret

Disassembly of section .text._ZN6String9setCharAtEjc:

00000000 <_ZN6String9setCharAtEjc>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	fc 01       	movw	r30, r24
   2:	84 81       	ldd	r24, Z+4	; 0x04
   4:	95 81       	ldd	r25, Z+5	; 0x05
   6:	68 17       	cp	r22, r24
   8:	79 07       	cpc	r23, r25
   a:	00 f4       	brcc	.+0      	; 0xc <_ZN6String9setCharAtEjc+0xc>
   c:	01 90       	ld	r0, Z+
   e:	f0 81       	ld	r31, Z
  10:	e0 2d       	mov	r30, r0
  12:	e6 0f       	add	r30, r22
	return 0;
  14:	f7 1f       	adc	r31, r23
  16:	40 83       	st	Z, r20
  18:	08 95       	ret

Disassembly of section .text._ZN6StringixEj:

00000000 <_ZN6StringixEj>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	fc 01       	movw	r30, r24
   2:	84 81       	ldd	r24, Z+4	; 0x04
   4:	95 81       	ldd	r25, Z+5	; 0x05
   6:	68 17       	cp	r22, r24
   8:	79 07       	cpc	r23, r25
   a:	00 f4       	brcc	.+0      	; 0xc <_ZN6StringixEj+0xc>
   c:	80 81       	ld	r24, Z
   e:	91 81       	ldd	r25, Z+1	; 0x01
  10:	00 97       	sbiw	r24, 0x00	; 0
  12:	01 f4       	brne	.+0      	; 0x14 <_ZN6StringixEj+0x14>
	return 0;
  14:	10 92 00 00 	sts	0x0000, r1
  18:	60 e0       	ldi	r22, 0x00	; 0
}
  1a:	70 e0       	ldi	r23, 0x00	; 0
  1c:	00 c0       	rjmp	.+0      	; 0x1e <_ZN6StringixEj+0x1e>
  1e:	68 0f       	add	r22, r24
  20:	79 1f       	adc	r23, r25
  22:	cb 01       	movw	r24, r22
  24:	08 95       	ret

Disassembly of section .text._ZNK6StringixEj:

00000000 <_ZNK6StringixEj>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	fc 01       	movw	r30, r24
   2:	84 81       	ldd	r24, Z+4	; 0x04
   4:	95 81       	ldd	r25, Z+5	; 0x05
   6:	68 17       	cp	r22, r24
   8:	79 07       	cpc	r23, r25
   a:	00 f4       	brcc	.+0      	; 0xc <_ZNK6StringixEj+0xc>
   c:	80 81       	ld	r24, Z
   e:	91 81       	ldd	r25, Z+1	; 0x01
  10:	00 97       	sbiw	r24, 0x00	; 0
  12:	01 f0       	breq	.+0      	; 0x14 <_ZNK6StringixEj+0x14>
	return 0;
  14:	68 0f       	add	r22, r24
  16:	79 1f       	adc	r23, r25
  18:	fb 01       	movw	r30, r22
}
  1a:	80 81       	ld	r24, Z
  1c:	08 95       	ret
  1e:	80 e0       	ldi	r24, 0x00	; 0
  20:	08 95       	ret
  22:	80 e0       	ldi	r24, 0x00	; 0
  24:	08 95       	ret

Disassembly of section .text._ZNK6String6charAtEj:

00000000 <_ZNK6String6charAtEj>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6charAtEj>
   4:	08 95       	ret

Disassembly of section .text._ZNK6String8getBytesEPhjj:

00000000 <_ZNK6String8getBytesEPhjj>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	fc 01       	movw	r30, r24
   a:	8b 01       	movw	r16, r22
   c:	41 15       	cp	r20, r1
   e:	51 05       	cpc	r21, r1
  10:	01 f0       	breq	.+0      	; 0x12 <_ZNK6String8getBytesEPhjj+0x12>
  12:	61 15       	cp	r22, r1
	return 0;
  14:	71 05       	cpc	r23, r1
  16:	01 f0       	breq	.+0      	; 0x18 <_ZNK6String8getBytesEPhjj+0x18>
  18:	c4 81       	ldd	r28, Z+4	; 0x04
}
  1a:	d5 81       	ldd	r29, Z+5	; 0x05
  1c:	2c 17       	cp	r18, r28
  1e:	3d 07       	cpc	r19, r29
  20:	00 f0       	brcs	.+0      	; 0x22 <_ZNK6String8getBytesEPhjj+0x22>
  22:	fb 01       	movw	r30, r22
  24:	10 82       	st	Z, r1
  26:	00 c0       	rjmp	.+0      	; 0x28 <_ZNK6String8getBytesEPhjj+0x28>
  28:	41 50       	subi	r20, 0x01	; 1
  2a:	50 40       	sbci	r21, 0x00	; 0
  2c:	c2 1b       	sub	r28, r18
  2e:	d3 0b       	sbc	r29, r19
  30:	4c 17       	cp	r20, r28
  32:	5d 07       	cpc	r21, r29
  34:	00 f4       	brcc	.+0      	; 0x36 <_ZNK6String8getBytesEPhjj+0x36>
  36:	ea 01       	movw	r28, r20
  38:	60 81       	ld	r22, Z
  3a:	71 81       	ldd	r23, Z+1	; 0x01
  3c:	62 0f       	add	r22, r18
  3e:	73 1f       	adc	r23, r19
  40:	c8 01       	movw	r24, r16
  42:	ae 01       	movw	r20, r28
  44:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String8getBytesEPhjj>
  48:	c0 0f       	add	r28, r16
  4a:	d1 1f       	adc	r29, r17
  4c:	18 82       	st	Y, r1
  4e:	df 91       	pop	r29
  50:	cf 91       	pop	r28
  52:	1f 91       	pop	r17
  54:	0f 91       	pop	r16
  56:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfEcj:

00000000 <_ZNK6String7indexOfEcj>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	ca 01       	movw	r24, r20
   8:	24 81       	ldd	r18, Z+4	; 0x04
   a:	35 81       	ldd	r19, Z+5	; 0x05
   c:	42 17       	cp	r20, r18
   e:	53 07       	cpc	r21, r19
  10:	00 f4       	brcc	.+0      	; 0x12 <_ZNK6String7indexOfEcj+0x12>
  12:	c0 81       	ld	r28, Z
	return 0;
  14:	d1 81       	ldd	r29, Z+1	; 0x01
  16:	77 27       	eor	r23, r23
  18:	67 fd       	sbrc	r22, 7
}
  1a:	70 95       	com	r23
  1c:	8c 0f       	add	r24, r28
  1e:	9d 1f       	adc	r25, r29
  20:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String7indexOfEcj>
  24:	00 97       	sbiw	r24, 0x00	; 0
  26:	01 f0       	breq	.+0      	; 0x28 <_ZNK6String7indexOfEcj+0x28>
  28:	9c 01       	movw	r18, r24
  2a:	2c 1b       	sub	r18, r28
  2c:	3d 0b       	sbc	r19, r29
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZNK6String7indexOfEcj+0x30>
  30:	2f ef       	ldi	r18, 0xFF	; 255
  32:	3f ef       	ldi	r19, 0xFF	; 255
  34:	c9 01       	movw	r24, r18
  36:	df 91       	pop	r29
  38:	cf 91       	pop	r28
  3a:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfEc:

00000000 <_ZNK6String7indexOfEc>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	40 e0       	ldi	r20, 0x00	; 0
   2:	50 e0       	ldi	r21, 0x00	; 0
   4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String7indexOfEc>
   8:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfERKS_j:

00000000 <_ZNK6String7indexOfERKS_j>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	ca 01       	movw	r24, r20
   8:	24 81       	ldd	r18, Z+4	; 0x04
   a:	35 81       	ldd	r19, Z+5	; 0x05
   c:	42 17       	cp	r20, r18
   e:	53 07       	cpc	r21, r19
  10:	00 f4       	brcc	.+0      	; 0x12 <_ZNK6String7indexOfERKS_j+0x12>
  12:	c0 81       	ld	r28, Z
	return 0;
  14:	d1 81       	ldd	r29, Z+1	; 0x01
  16:	fb 01       	movw	r30, r22
  18:	60 81       	ld	r22, Z
}
  1a:	71 81       	ldd	r23, Z+1	; 0x01
  1c:	8c 0f       	add	r24, r28
  1e:	9d 1f       	adc	r25, r29
  20:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String7indexOfERKS_j>
  24:	00 97       	sbiw	r24, 0x00	; 0
  26:	01 f0       	breq	.+0      	; 0x28 <_ZNK6String7indexOfERKS_j+0x28>
  28:	9c 01       	movw	r18, r24
  2a:	2c 1b       	sub	r18, r28
  2c:	3d 0b       	sbc	r19, r29
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZNK6String7indexOfERKS_j+0x30>
  30:	2f ef       	ldi	r18, 0xFF	; 255
  32:	3f ef       	ldi	r19, 0xFF	; 255
  34:	c9 01       	movw	r24, r18
  36:	df 91       	pop	r29
  38:	cf 91       	pop	r28
  3a:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfERKS_:

00000000 <_ZNK6String7indexOfERKS_>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	40 e0       	ldi	r20, 0x00	; 0
   2:	50 e0       	ldi	r21, 0x00	; 0
   4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String7indexOfERKS_>
   8:	08 95       	ret

Disassembly of section .text._ZNK6String11lastIndexOfEcj:

00000000 <_ZNK6String11lastIndexOfEcj>:
   0:	df 92       	push	r13
   2:	ef 92       	push	r14
   4:	ff 92       	push	r15
   6:	0f 93       	push	r16
   8:	1f 93       	push	r17
   a:	cf 93       	push	r28
   c:	df 93       	push	r29
   e:	ec 01       	movw	r28, r24
  10:	8c 81       	ldd	r24, Y+4	; 0x04
  12:	9d 81       	ldd	r25, Y+5	; 0x05
	return 0;
  14:	48 17       	cp	r20, r24
  16:	59 07       	cpc	r21, r25
  18:	00 f4       	brcc	.+0      	; 0x1a <_ZNK6String11lastIndexOfEcj+0x1a>
}
  1a:	7a 01       	movw	r14, r20
  1c:	08 94       	sec
  1e:	e1 1c       	adc	r14, r1
  20:	f1 1c       	adc	r15, r1
  22:	e8 81       	ld	r30, Y
  24:	f9 81       	ldd	r31, Y+1	; 0x01
  26:	ee 0d       	add	r30, r14
  28:	ff 1d       	adc	r31, r15
  2a:	d0 80       	ld	r13, Z
  2c:	10 82       	st	Z, r1
  2e:	08 81       	ld	r16, Y
  30:	19 81       	ldd	r17, Y+1	; 0x01
  32:	77 27       	eor	r23, r23
  34:	67 fd       	sbrc	r22, 7
  36:	70 95       	com	r23
  38:	c8 01       	movw	r24, r16
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String11lastIndexOfEcj>
  3e:	0e 0d       	add	r16, r14
  40:	1f 1d       	adc	r17, r15
  42:	f8 01       	movw	r30, r16
  44:	d0 82       	st	Z, r13
  46:	00 97       	sbiw	r24, 0x00	; 0
  48:	01 f0       	breq	.+0      	; 0x4a <_ZNK6String11lastIndexOfEcj+0x4a>
  4a:	28 81       	ld	r18, Y
  4c:	39 81       	ldd	r19, Y+1	; 0x01
  4e:	ac 01       	movw	r20, r24
  50:	42 1b       	sub	r20, r18
  52:	53 0b       	sbc	r21, r19
  54:	9a 01       	movw	r18, r20
  56:	00 c0       	rjmp	.+0      	; 0x58 <_ZNK6String11lastIndexOfEcj+0x58>
  58:	2f ef       	ldi	r18, 0xFF	; 255
  5a:	3f ef       	ldi	r19, 0xFF	; 255
  5c:	c9 01       	movw	r24, r18
  5e:	df 91       	pop	r29
  60:	cf 91       	pop	r28
  62:	1f 91       	pop	r17
  64:	0f 91       	pop	r16
  66:	ff 90       	pop	r15
  68:	ef 90       	pop	r14
  6a:	df 90       	pop	r13
  6c:	08 95       	ret

Disassembly of section .text._ZNK6String11lastIndexOfEc:

00000000 <_ZNK6String11lastIndexOfEc>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	fc 01       	movw	r30, r24
   2:	44 81       	ldd	r20, Z+4	; 0x04
   4:	55 81       	ldd	r21, Z+5	; 0x05
   6:	41 50       	subi	r20, 0x01	; 1
   8:	50 40       	sbci	r21, 0x00	; 0
   a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String11lastIndexOfEc>
   e:	08 95       	ret

Disassembly of section .text._ZNK6String11lastIndexOfERKS_j:

00000000 <_ZNK6String11lastIndexOfERKS_j>:
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
	return 0;
  14:	fc 01       	movw	r30, r24
  16:	6b 01       	movw	r12, r22
  18:	8a 01       	movw	r16, r20
}
  1a:	db 01       	movw	r26, r22
  1c:	14 96       	adiw	r26, 0x04	; 4
  1e:	2d 91       	ld	r18, X+
  20:	3c 91       	ld	r19, X
  22:	15 97       	sbiw	r26, 0x05	; 5
  24:	21 15       	cp	r18, r1
  26:	31 05       	cpc	r19, r1
  28:	01 f0       	breq	.+0      	; 0x2a <_ZNK6String11lastIndexOfERKS_j+0x2a>
  2a:	84 81       	ldd	r24, Z+4	; 0x04
  2c:	95 81       	ldd	r25, Z+5	; 0x05
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <_ZNK6String11lastIndexOfERKS_j+0x32>
  32:	82 17       	cp	r24, r18
  34:	93 07       	cpc	r25, r19
  36:	00 f0       	brcs	.+0      	; 0x38 <_ZNK6String11lastIndexOfERKS_j+0x38>
  38:	48 17       	cp	r20, r24
  3a:	59 07       	cpc	r21, r25
  3c:	00 f0       	brcs	.+0      	; 0x3e <_ZNK6String11lastIndexOfERKS_j+0x3e>
  3e:	8c 01       	movw	r16, r24
  40:	01 50       	subi	r16, 0x01	; 1
  42:	10 40       	sbci	r17, 0x00	; 0
  44:	e0 80       	ld	r14, Z
  46:	f1 80       	ldd	r15, Z+1	; 0x01
  48:	c7 01       	movw	r24, r14
  4a:	cf ef       	ldi	r28, 0xFF	; 255
  4c:	df ef       	ldi	r29, 0xFF	; 255
  4e:	57 01       	movw	r10, r14
  50:	a0 0e       	add	r10, r16
  52:	b1 1e       	adc	r11, r17
  54:	00 c0       	rjmp	.+0      	; 0x56 <_ZNK6String11lastIndexOfERKS_j+0x56>
  56:	f6 01       	movw	r30, r12
  58:	60 81       	ld	r22, Z
  5a:	71 81       	ldd	r23, Z+1	; 0x01
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String11lastIndexOfERKS_j>
  60:	00 97       	sbiw	r24, 0x00	; 0
  62:	01 f0       	breq	.+0      	; 0x64 <_ZNK6String11lastIndexOfERKS_j+0x64>
  64:	9c 01       	movw	r18, r24
  66:	2e 19       	sub	r18, r14
  68:	3f 09       	sbc	r19, r15
  6a:	02 17       	cp	r16, r18
  6c:	13 07       	cpc	r17, r19
  6e:	00 f4       	brcc	.+0      	; 0x70 <_ZNK6String11lastIndexOfERKS_j+0x70>
  70:	9e 01       	movw	r18, r28
  72:	01 96       	adiw	r24, 0x01	; 1
  74:	e9 01       	movw	r28, r18
  76:	a8 16       	cp	r10, r24
  78:	b9 06       	cpc	r11, r25
  7a:	00 f4       	brcc	.+0      	; 0x7c <_ZNK6String11lastIndexOfERKS_j+0x7c>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <_ZNK6String11lastIndexOfERKS_j+0x7e>
  7e:	cf ef       	ldi	r28, 0xFF	; 255
  80:	df ef       	ldi	r29, 0xFF	; 255
  82:	ce 01       	movw	r24, r28
  84:	df 91       	pop	r29
  86:	cf 91       	pop	r28
  88:	1f 91       	pop	r17
  8a:	0f 91       	pop	r16
  8c:	ff 90       	pop	r15
  8e:	ef 90       	pop	r14
  90:	df 90       	pop	r13
  92:	cf 90       	pop	r12
  94:	bf 90       	pop	r11
  96:	af 90       	pop	r10
  98:	08 95       	ret

Disassembly of section .text._ZNK6String11lastIndexOfERKS_:

00000000 <_ZNK6String11lastIndexOfERKS_>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	fc 01       	movw	r30, r24
   2:	44 81       	ldd	r20, Z+4	; 0x04
   4:	55 81       	ldd	r21, Z+5	; 0x05
   6:	fb 01       	movw	r30, r22
   8:	24 81       	ldd	r18, Z+4	; 0x04
   a:	35 81       	ldd	r19, Z+5	; 0x05
   c:	42 1b       	sub	r20, r18
   e:	53 0b       	sbc	r21, r19
  10:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String11lastIndexOfERKS_>
	return 0;
  14:	08 95       	ret

Disassembly of section .text._ZNK6String9substringEjj:

00000000 <_ZNK6String9substringEjj>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
	return 0;
  14:	f8 2e       	mov	r15, r24
  16:	e9 2e       	mov	r14, r25
  18:	6b 01       	movw	r12, r22
}
  1a:	8a 01       	movw	r16, r20
  1c:	e9 01       	movw	r28, r18
  1e:	24 17       	cp	r18, r20
  20:	35 07       	cpc	r19, r21
  22:	00 f4       	brcc	.+0      	; 0x24 <_ZNK6String9substringEjj+0x24>
  24:	34 2f       	mov	r19, r20
  26:	21 2f       	mov	r18, r17
  28:	8e 01       	movw	r16, r28
  2a:	c9 01       	movw	r24, r18
  2c:	a9 2e       	mov	r10, r25
  2e:	e5 01       	movw	r28, r10
  30:	5e 01       	movw	r10, r28
  32:	b2 2e       	mov	r11, r18
  34:	e5 01       	movw	r28, r10
  36:	8f 2d       	mov	r24, r15
  38:	9e 2d       	mov	r25, r14
  3a:	60 e0       	ldi	r22, 0x00	; 0
  3c:	70 e0       	ldi	r23, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9substringEjj>
  42:	d6 01       	movw	r26, r12
  44:	14 96       	adiw	r26, 0x04	; 4
  46:	8d 91       	ld	r24, X+
  48:	9c 91       	ld	r25, X
  4a:	15 97       	sbiw	r26, 0x05	; 5
  4c:	80 17       	cp	r24, r16
  4e:	91 07       	cpc	r25, r17
  50:	00 f0       	brcs	.+0      	; 0x52 <_ZNK6String9substringEjj+0x52>
  52:	8c 17       	cp	r24, r28
  54:	9d 07       	cpc	r25, r29
  56:	00 f4       	brcc	.+0      	; 0x58 <_ZNK6String9substringEjj+0x58>
  58:	ec 01       	movw	r28, r24
  5a:	d6 01       	movw	r26, r12
  5c:	ed 91       	ld	r30, X+
  5e:	fc 91       	ld	r31, X
  60:	11 97       	sbiw	r26, 0x01	; 1
  62:	ec 0f       	add	r30, r28
  64:	fd 1f       	adc	r31, r29
  66:	b0 80       	ld	r11, Z
  68:	10 82       	st	Z, r1
  6a:	6d 91       	ld	r22, X+
  6c:	7c 91       	ld	r23, X
  6e:	60 0f       	add	r22, r16
  70:	71 1f       	adc	r23, r17
  72:	8f 2d       	mov	r24, r15
  74:	9e 2d       	mov	r25, r14
  76:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9substringEjj>
  7a:	d6 01       	movw	r26, r12
  7c:	ed 91       	ld	r30, X+
  7e:	fc 91       	ld	r31, X
  80:	11 97       	sbiw	r26, 0x01	; 1
  82:	ec 0f       	add	r30, r28
  84:	fd 1f       	adc	r31, r29
  86:	b0 82       	st	Z, r11
  88:	8f 2d       	mov	r24, r15
  8a:	9e 2d       	mov	r25, r14
  8c:	df 91       	pop	r29
  8e:	cf 91       	pop	r28
  90:	1f 91       	pop	r17
  92:	0f 91       	pop	r16
  94:	ff 90       	pop	r15
  96:	ef 90       	pop	r14
  98:	df 90       	pop	r13
  9a:	cf 90       	pop	r12
  9c:	bf 90       	pop	r11
  9e:	af 90       	pop	r10
  a0:	08 95       	ret

Disassembly of section .text._ZNK6String9substringEj:

00000000 <_ZNK6String9substringEj>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	fb 01       	movw	r30, r22
   8:	24 81       	ldd	r18, Z+4	; 0x04
   a:	35 81       	ldd	r19, Z+5	; 0x05
   c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9substringEj>
  10:	ce 01       	movw	r24, r28
  12:	df 91       	pop	r29
	return 0;
  14:	cf 91       	pop	r28
  16:	08 95       	ret

Disassembly of section .text._ZN6String7replaceEcc:

00000000 <_ZN6String7replaceEcc>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	dc 01       	movw	r26, r24
   2:	ed 91       	ld	r30, X+
   4:	fc 91       	ld	r31, X
   6:	11 97       	sbiw	r26, 0x01	; 1
   8:	30 97       	sbiw	r30, 0x00	; 0
   a:	01 f4       	brne	.+0      	; 0xc <_ZN6String7replaceEcc+0xc>
   c:	08 95       	ret
   e:	86 17       	cp	r24, r22
  10:	01 f4       	brne	.+0      	; 0x12 <_ZN6String7replaceEcc+0x12>
  12:	40 83       	st	Z, r20
	return 0;
  14:	31 96       	adiw	r30, 0x01	; 1
  16:	80 81       	ld	r24, Z
  18:	88 23       	and	r24, r24
}
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZN6String7replaceEcc+0x1c>
  1c:	08 95       	ret

Disassembly of section .text._ZN6String7replaceERKS_S1_:

00000000 <_ZN6String7replaceERKS_S1_>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	2f 92       	push	r2
   2:	3f 92       	push	r3
   4:	4f 92       	push	r4
   6:	5f 92       	push	r5
   8:	6f 92       	push	r6
   a:	7f 92       	push	r7
   c:	8f 92       	push	r8
   e:	9f 92       	push	r9
  10:	af 92       	push	r10
  12:	bf 92       	push	r11
	return 0;
  14:	cf 92       	push	r12
  16:	df 92       	push	r13
  18:	ef 92       	push	r14
}
  1a:	ff 92       	push	r15
  1c:	0f 93       	push	r16
  1e:	1f 93       	push	r17
  20:	cf 93       	push	r28
  22:	df 93       	push	r29
  24:	7c 01       	movw	r14, r24
  26:	2b 01       	movw	r4, r22
  28:	6a 01       	movw	r12, r20
  2a:	dc 01       	movw	r26, r24
  2c:	14 96       	adiw	r26, 0x04	; 4
  2e:	6d 90       	ld	r6, X+
  30:	7c 90       	ld	r7, X
  32:	15 97       	sbiw	r26, 0x05	; 5
  34:	61 14       	cp	r6, r1
  36:	71 04       	cpc	r7, r1
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN6String7replaceERKS_S1_+0x3a>
  3a:	00 c0       	rjmp	.+0      	; 0x3c <_ZN6String7replaceERKS_S1_+0x3c>
  3c:	fb 01       	movw	r30, r22
  3e:	84 80       	ldd	r8, Z+4	; 0x04
  40:	95 80       	ldd	r9, Z+5	; 0x05
  42:	81 14       	cp	r8, r1
  44:	91 04       	cpc	r9, r1
  46:	01 f4       	brne	.+0      	; 0x48 <_ZN6String7replaceERKS_S1_+0x48>
  48:	00 c0       	rjmp	.+0      	; 0x4a <_ZN6String7replaceERKS_S1_+0x4a>
  4a:	da 01       	movw	r26, r20
  4c:	14 96       	adiw	r26, 0x04	; 4
  4e:	ad 90       	ld	r10, X+
  50:	bc 90       	ld	r11, X
  52:	15 97       	sbiw	r26, 0x05	; 5
  54:	a8 18       	sub	r10, r8
  56:	b9 08       	sbc	r11, r9
  58:	fc 01       	movw	r30, r24
  5a:	00 81       	ld	r16, Z
  5c:	11 81       	ldd	r17, Z+1	; 0x01
  5e:	a1 14       	cp	r10, r1
  60:	b1 04       	cpc	r11, r1
  62:	01 f4       	brne	.+0      	; 0x64 <_ZN6String7replaceERKS_S1_+0x64>
  64:	00 c0       	rjmp	.+0      	; 0x66 <_ZN6String7replaceERKS_S1_+0x66>
  66:	d6 01       	movw	r26, r12
  68:	6c 91       	ld	r22, X
  6a:	11 96       	adiw	r26, 0x01	; 1
  6c:	7c 91       	ld	r23, X
  6e:	11 97       	sbiw	r26, 0x01	; 1
  70:	14 96       	adiw	r26, 0x04	; 4
  72:	4d 91       	ld	r20, X+
  74:	5c 91       	ld	r21, X
  76:	15 97       	sbiw	r26, 0x05	; 5
  78:	ce 01       	movw	r24, r28
  7a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
  7e:	d6 01       	movw	r26, r12
  80:	14 96       	adiw	r26, 0x04	; 4
  82:	0d 91       	ld	r16, X+
  84:	1c 91       	ld	r17, X
  86:	15 97       	sbiw	r26, 0x05	; 5
  88:	0c 0f       	add	r16, r28
  8a:	1d 1f       	adc	r17, r29
  8c:	f2 01       	movw	r30, r4
  8e:	60 81       	ld	r22, Z
  90:	71 81       	ldd	r23, Z+1	; 0x01
  92:	c8 01       	movw	r24, r16
  94:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
  98:	ec 01       	movw	r28, r24
  9a:	00 97       	sbiw	r24, 0x00	; 0
  9c:	01 f4       	brne	.+0      	; 0x9e <_ZN6String7replaceERKS_S1_+0x9e>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <_ZN6String7replaceERKS_S1_+0xa0>
  a0:	b7 fc       	sbrc	r11, 7
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <_ZN6String7replaceERKS_S1_+0xa4>
  a4:	e3 01       	movw	r28, r6
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <_ZN6String7replaceERKS_S1_+0xa8>
  a8:	48 01       	movw	r8, r16
  aa:	00 c0       	rjmp	.+0      	; 0xac <_ZN6String7replaceERKS_S1_+0xac>
  ac:	e3 01       	movw	r28, r6
  ae:	c0 1b       	sub	r28, r16
  b0:	d1 0b       	sbc	r29, r17
  b2:	c4 01       	movw	r24, r8
  b4:	b8 01       	movw	r22, r16
  b6:	ae 01       	movw	r20, r28
  b8:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
  bc:	c8 0d       	add	r28, r8
  be:	d9 1d       	adc	r29, r9
  c0:	d6 01       	movw	r26, r12
  c2:	6c 91       	ld	r22, X
  c4:	11 96       	adiw	r26, 0x01	; 1
  c6:	7c 91       	ld	r23, X
  c8:	11 97       	sbiw	r26, 0x01	; 1
  ca:	14 96       	adiw	r26, 0x04	; 4
  cc:	4d 91       	ld	r20, X+
  ce:	5c 91       	ld	r21, X
  d0:	15 97       	sbiw	r26, 0x05	; 5
  d2:	ce 01       	movw	r24, r28
  d4:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
  d8:	d6 01       	movw	r26, r12
  da:	14 96       	adiw	r26, 0x04	; 4
  dc:	8d 90       	ld	r8, X+
  de:	9c 90       	ld	r9, X
  e0:	15 97       	sbiw	r26, 0x05	; 5
  e2:	8c 0e       	add	r8, r28
  e4:	9d 1e       	adc	r9, r29
  e6:	f2 01       	movw	r30, r4
  e8:	04 81       	ldd	r16, Z+4	; 0x04
  ea:	15 81       	ldd	r17, Z+5	; 0x05
  ec:	06 0d       	add	r16, r6
  ee:	17 1d       	adc	r17, r7
  f0:	d7 01       	movw	r26, r14
  f2:	14 96       	adiw	r26, 0x04	; 4
  f4:	8d 91       	ld	r24, X+
  f6:	9c 91       	ld	r25, X
  f8:	15 97       	sbiw	r26, 0x05	; 5
  fa:	8a 0d       	add	r24, r10
  fc:	9b 1d       	adc	r25, r11
  fe:	15 96       	adiw	r26, 0x05	; 5
 100:	9c 93       	st	X, r25
 102:	8e 93       	st	-X, r24
 104:	14 97       	sbiw	r26, 0x04	; 4
 106:	f2 01       	movw	r30, r4
 108:	60 81       	ld	r22, Z
 10a:	71 81       	ldd	r23, Z+1	; 0x01
 10c:	c8 01       	movw	r24, r16
 10e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 112:	3c 01       	movw	r6, r24
 114:	00 97       	sbiw	r24, 0x00	; 0
 116:	01 f4       	brne	.+0      	; 0x118 <_ZN6String7replaceERKS_S1_+0x118>
 118:	c4 01       	movw	r24, r8
 11a:	b8 01       	movw	r22, r16
 11c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 120:	00 c0       	rjmp	.+0      	; 0x122 <_ZN6String7replaceERKS_S1_+0x122>
 122:	8c 01       	movw	r16, r24
 124:	08 0d       	add	r16, r8
 126:	19 1d       	adc	r17, r9
 128:	ca 0d       	add	r28, r10
 12a:	db 1d       	adc	r29, r11
 12c:	d2 01       	movw	r26, r4
 12e:	6d 91       	ld	r22, X+
 130:	7c 91       	ld	r23, X
 132:	c8 01       	movw	r24, r16
 134:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 138:	00 97       	sbiw	r24, 0x00	; 0
 13a:	01 f4       	brne	.+0      	; 0x13c <_ZN6String7replaceERKS_S1_+0x13c>
 13c:	c6 15       	cp	r28, r6
 13e:	d7 05       	cpc	r29, r7
 140:	01 f4       	brne	.+0      	; 0x142 <_ZN6String7replaceERKS_S1_+0x142>
 142:	00 c0       	rjmp	.+0      	; 0x144 <_ZN6String7replaceERKS_S1_+0x144>
 144:	f7 01       	movw	r30, r14
 146:	82 81       	ldd	r24, Z+2	; 0x02
 148:	93 81       	ldd	r25, Z+3	; 0x03
 14a:	8c 17       	cp	r24, r28
 14c:	9d 07       	cpc	r25, r29
 14e:	00 f0       	brcs	.+0      	; 0x150 <_ZN6String7replaceERKS_S1_+0x150>
 150:	00 c0       	rjmp	.+0      	; 0x152 <_ZN6String7replaceERKS_S1_+0x152>
 152:	c7 01       	movw	r24, r14
 154:	be 01       	movw	r22, r28
 156:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 15a:	88 23       	and	r24, r24
 15c:	01 f4       	brne	.+0      	; 0x15e <_ZN6String7replaceERKS_S1_+0x15e>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <_ZN6String7replaceERKS_S1_+0x160>
 160:	00 c0       	rjmp	.+0      	; 0x162 <_ZN6String7replaceERKS_S1_+0x162>
 162:	c7 01       	movw	r24, r14
 164:	b2 01       	movw	r22, r4
 166:	a9 01       	movw	r20, r18
 168:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 16c:	ec 01       	movw	r28, r24
 16e:	97 fd       	sbrc	r25, 7
 170:	00 c0       	rjmp	.+0      	; 0x172 <_ZN6String7replaceERKS_S1_+0x172>
 172:	d7 01       	movw	r26, r14
 174:	6d 91       	ld	r22, X+
 176:	7c 91       	ld	r23, X
 178:	11 97       	sbiw	r26, 0x01	; 1
 17a:	f2 01       	movw	r30, r4
 17c:	84 81       	ldd	r24, Z+4	; 0x04
 17e:	95 81       	ldd	r25, Z+5	; 0x05
 180:	8c 0f       	add	r24, r28
 182:	9d 1f       	adc	r25, r29
 184:	68 0f       	add	r22, r24
 186:	79 1f       	adc	r23, r25
 188:	14 96       	adiw	r26, 0x04	; 4
 18a:	4d 91       	ld	r20, X+
 18c:	5c 91       	ld	r21, X
 18e:	15 97       	sbiw	r26, 0x05	; 5
 190:	48 1b       	sub	r20, r24
 192:	59 0b       	sbc	r21, r25
 194:	cb 01       	movw	r24, r22
 196:	8a 0d       	add	r24, r10
 198:	9b 1d       	adc	r25, r11
 19a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 19e:	d7 01       	movw	r26, r14
 1a0:	14 96       	adiw	r26, 0x04	; 4
 1a2:	8d 91       	ld	r24, X+
 1a4:	9c 91       	ld	r25, X
 1a6:	15 97       	sbiw	r26, 0x05	; 5
 1a8:	8a 0d       	add	r24, r10
 1aa:	9b 1d       	adc	r25, r11
 1ac:	15 96       	adiw	r26, 0x05	; 5
 1ae:	9c 93       	st	X, r25
 1b0:	8e 93       	st	-X, r24
 1b2:	14 97       	sbiw	r26, 0x04	; 4
 1b4:	ed 91       	ld	r30, X+
 1b6:	fc 91       	ld	r31, X
 1b8:	11 97       	sbiw	r26, 0x01	; 1
 1ba:	e8 0f       	add	r30, r24
 1bc:	f9 1f       	adc	r31, r25
 1be:	10 82       	st	Z, r1
 1c0:	2d 91       	ld	r18, X+
 1c2:	3c 91       	ld	r19, X
 1c4:	2c 0f       	add	r18, r28
 1c6:	3d 1f       	adc	r19, r29
 1c8:	f6 01       	movw	r30, r12
 1ca:	60 81       	ld	r22, Z
 1cc:	71 81       	ldd	r23, Z+1	; 0x01
 1ce:	44 81       	ldd	r20, Z+4	; 0x04
 1d0:	55 81       	ldd	r21, Z+5	; 0x05
 1d2:	c9 01       	movw	r24, r18
 1d4:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 1d8:	9e 01       	movw	r18, r28
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <_ZN6String7replaceERKS_S1_+0x1dc>
 1dc:	d7 01       	movw	r26, r14
 1de:	14 96       	adiw	r26, 0x04	; 4
 1e0:	2d 91       	ld	r18, X+
 1e2:	3c 91       	ld	r19, X
 1e4:	15 97       	sbiw	r26, 0x05	; 5
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	30 40       	sbci	r19, 0x00	; 0
 1ea:	37 ff       	sbrs	r19, 7
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <_ZN6String7replaceERKS_S1_+0x1ee>
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	1f 91       	pop	r17
 1f4:	0f 91       	pop	r16
 1f6:	ff 90       	pop	r15
 1f8:	ef 90       	pop	r14
 1fa:	df 90       	pop	r13
 1fc:	cf 90       	pop	r12
 1fe:	bf 90       	pop	r11
 200:	af 90       	pop	r10
 202:	9f 90       	pop	r9
 204:	8f 90       	pop	r8
 206:	7f 90       	pop	r7
 208:	6f 90       	pop	r6
 20a:	5f 90       	pop	r5
 20c:	4f 90       	pop	r4
 20e:	3f 90       	pop	r3
 210:	2f 90       	pop	r2
 212:	08 95       	ret

Disassembly of section .text._ZN6String11toLowerCaseEv:

00000000 <_ZN6String11toLowerCaseEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	c0 81       	ld	r28, Z
   8:	d1 81       	ldd	r29, Z+1	; 0x01
   a:	20 97       	sbiw	r28, 0x00	; 0
   c:	01 f4       	brne	.+0      	; 0xe <_ZN6String11toLowerCaseEv+0xe>
   e:	00 c0       	rjmp	.+0      	; 0x10 <_ZN6String11toLowerCaseEv+0x10>
  10:	99 27       	eor	r25, r25
  12:	87 fd       	sbrc	r24, 7
	return 0;
  14:	90 95       	com	r25
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN6String11toLowerCaseEv>
}
  1a:	89 93       	st	Y+, r24
  1c:	88 81       	ld	r24, Y
  1e:	88 23       	and	r24, r24
  20:	01 f4       	brne	.+0      	; 0x22 <_ZN6String11toLowerCaseEv+0x22>
  22:	df 91       	pop	r29
  24:	cf 91       	pop	r28
  26:	08 95       	ret

Disassembly of section .text._ZN6String11toUpperCaseEv:

00000000 <_ZN6String11toUpperCaseEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	c0 81       	ld	r28, Z
   8:	d1 81       	ldd	r29, Z+1	; 0x01
   a:	20 97       	sbiw	r28, 0x00	; 0
   c:	01 f4       	brne	.+0      	; 0xe <_ZN6String11toUpperCaseEv+0xe>
   e:	00 c0       	rjmp	.+0      	; 0x10 <_ZN6String11toUpperCaseEv+0x10>
  10:	99 27       	eor	r25, r25
  12:	87 fd       	sbrc	r24, 7
	return 0;
  14:	90 95       	com	r25
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN6String11toUpperCaseEv>
}
  1a:	89 93       	st	Y+, r24
  1c:	88 81       	ld	r24, Y
  1e:	88 23       	and	r24, r24
  20:	01 f4       	brne	.+0      	; 0x22 <_ZN6String11toUpperCaseEv+0x22>
  22:	df 91       	pop	r29
  24:	cf 91       	pop	r28
  26:	08 95       	ret

Disassembly of section .text._ZN6String4trimEv:

00000000 <_ZN6String4trimEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
	return 0;
  14:	6c 01       	movw	r12, r24
  16:	dc 01       	movw	r26, r24
  18:	ed 90       	ld	r14, X+
}
  1a:	fc 90       	ld	r15, X
  1c:	11 97       	sbiw	r26, 0x01	; 1
  1e:	e1 14       	cp	r14, r1
  20:	f1 04       	cpc	r15, r1
  22:	01 f4       	brne	.+0      	; 0x24 <_ZN6String4trimEv+0x24>
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN6String4trimEv+0x26>
  26:	14 96       	adiw	r26, 0x04	; 4
  28:	ad 90       	ld	r10, X+
  2a:	bc 90       	ld	r11, X
  2c:	15 97       	sbiw	r26, 0x05	; 5
  2e:	a1 14       	cp	r10, r1
  30:	b1 04       	cpc	r11, r1
  32:	01 f0       	breq	.+0      	; 0x34 <_ZN6String4trimEv+0x34>
  34:	87 01       	movw	r16, r14
  36:	e8 01       	movw	r28, r16
  38:	88 81       	ld	r24, Y
  3a:	0f 5f       	subi	r16, 0xFF	; 255
  3c:	1f 4f       	sbci	r17, 0xFF	; 255
  3e:	99 27       	eor	r25, r25
  40:	87 fd       	sbrc	r24, 7
  42:	90 95       	com	r25
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4trimEv>
  48:	00 97       	sbiw	r24, 0x00	; 0
  4a:	01 f4       	brne	.+0      	; 0x4c <_ZN6String4trimEv+0x4c>
  4c:	85 01       	movw	r16, r10
  4e:	01 50       	subi	r16, 0x01	; 1
  50:	10 40       	sbci	r17, 0x00	; 0
  52:	0e 0d       	add	r16, r14
  54:	1f 1d       	adc	r17, r15
  56:	f8 01       	movw	r30, r16
  58:	80 81       	ld	r24, Z
  5a:	99 27       	eor	r25, r25
  5c:	87 fd       	sbrc	r24, 7
  5e:	90 95       	com	r25
  60:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4trimEv>
  64:	00 97       	sbiw	r24, 0x00	; 0
  66:	01 f0       	breq	.+0      	; 0x68 <_ZN6String4trimEv+0x68>
  68:	0c 17       	cp	r16, r28
  6a:	1d 07       	cpc	r17, r29
  6c:	00 f0       	brcs	.+0      	; 0x6e <_ZN6String4trimEv+0x6e>
  6e:	01 50       	subi	r16, 0x01	; 1
  70:	10 40       	sbci	r17, 0x00	; 0
  72:	00 c0       	rjmp	.+0      	; 0x74 <_ZN6String4trimEv+0x74>
  74:	0f 5f       	subi	r16, 0xFF	; 255
  76:	1f 4f       	sbci	r17, 0xFF	; 255
  78:	0c 1b       	sub	r16, r28
  7a:	1d 0b       	sbc	r17, r29
  7c:	d6 01       	movw	r26, r12
  7e:	15 96       	adiw	r26, 0x05	; 5
  80:	1c 93       	st	X, r17
  82:	0e 93       	st	-X, r16
  84:	14 97       	sbiw	r26, 0x04	; 4
  86:	ec 16       	cp	r14, r28
  88:	fd 06       	cpc	r15, r29
  8a:	00 f4       	brcc	.+0      	; 0x8c <_ZN6String4trimEv+0x8c>
  8c:	c7 01       	movw	r24, r14
  8e:	be 01       	movw	r22, r28
  90:	a8 01       	movw	r20, r16
  92:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4trimEv>
  96:	d6 01       	movw	r26, r12
  98:	ed 91       	ld	r30, X+
  9a:	fc 91       	ld	r31, X
  9c:	11 97       	sbiw	r26, 0x01	; 1
  9e:	14 96       	adiw	r26, 0x04	; 4
  a0:	8d 91       	ld	r24, X+
  a2:	9c 91       	ld	r25, X
  a4:	15 97       	sbiw	r26, 0x05	; 5
  a6:	e8 0f       	add	r30, r24
  a8:	f9 1f       	adc	r31, r25
  aa:	10 82       	st	Z, r1
  ac:	df 91       	pop	r29
  ae:	cf 91       	pop	r28
  b0:	1f 91       	pop	r17
  b2:	0f 91       	pop	r16
  b4:	ff 90       	pop	r15
  b6:	ef 90       	pop	r14
  b8:	df 90       	pop	r13
  ba:	cf 90       	pop	r12
  bc:	bf 90       	pop	r11
  be:	af 90       	pop	r10
  c0:	08 95       	ret

Disassembly of section .text._ZNK6String5toIntEv:

00000000 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	fc 01       	movw	r30, r24
   2:	80 81       	ld	r24, Z
   4:	91 81       	ldd	r25, Z+1	; 0x01
   6:	00 97       	sbiw	r24, 0x00	; 0
   8:	01 f0       	breq	.+0      	; 0xa <_ZNK6String5toIntEv+0xa>
   a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String5toIntEv>
   e:	9b 01       	movw	r18, r22
  10:	ac 01       	movw	r20, r24
  12:	00 c0       	rjmp	.+0      	; 0x14 <_ZNK6String5toIntEv+0x14>
	return 0;
  14:	20 e0       	ldi	r18, 0x00	; 0
  16:	30 e0       	ldi	r19, 0x00	; 0
  18:	a9 01       	movw	r20, r18
}
  1a:	b9 01       	movw	r22, r18
  1c:	ca 01       	movw	r24, r20
  1e:	08 95       	ret

main.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000005dc  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00002cc9  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.main    0000001e  00000000  00000000  000032d9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.main:

00000000 <main>:
#include <Arduino.h>

int main(void)
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
	init();
   4:	0e 94 00 00 	call	0	; 0x0 <main>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
   8:	0e 94 00 00 	call	0	; 0x0 <main>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
   c:	c0 e0       	ldi	r28, 0x00	; 0
   e:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
  10:	0e 94 00 00 	call	0	; 0x0 <main>
		if (serialEventRun) serialEventRun();
  14:	20 97       	sbiw	r28, 0x00	; 0
  16:	01 f0       	breq	.+0      	; 0x18 <main+0x18>
  18:	0e 94 00 00 	call	0	; 0x0 <main>
  1c:	00 c0       	rjmp	.+0      	; 0x1e <__zero_reg__+0x1d>

malloc.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000009fc  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000009a0  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.malloc  0000010a  00000000  00000000  000013d0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.free    00000132  00000000  00000000  000014da  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.realloc 000001a4  00000000  00000000  0000160c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .data.__brkval 00000002  00000000  00000000  000017b0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  9 .data.__brkval_maximum 00000002  00000000  00000000  000017b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text.malloc:

00000000 <malloc>:



void *
realloc(void *ptr, size_t len)
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	82 30       	cpi	r24, 0x02	; 2
   6:	91 05       	cpc	r25, r1
   8:	00 f4       	brcc	.+0      	; 0xa <malloc+0xa>
   a:	82 e0       	ldi	r24, 0x02	; 2
   c:	90 e0       	ldi	r25, 0x00	; 0
   e:	e0 91 00 00 	lds	r30, 0x0000
  12:	f0 91 00 00 	lds	r31, 0x0000
  16:	40 e0       	ldi	r20, 0x00	; 0
  18:	50 e0       	ldi	r21, 0x00	; 0
  1a:	20 e0       	ldi	r18, 0x00	; 0
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
  1c:	30 e0       	ldi	r19, 0x00	; 0
  1e:	00 c0       	rjmp	.+0      	; 0x20 <malloc+0x20>
  20:	60 81       	ld	r22, Z
		return malloc(len);
  22:	71 81       	ldd	r23, Z+1	; 0x01
  24:	68 17       	cp	r22, r24
  26:	79 07       	cpc	r23, r25
  28:	00 f0       	brcs	.+0      	; 0x2a <malloc+0x2a>
  2a:	68 17       	cp	r22, r24

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
  2c:	79 07       	cpc	r23, r25
  2e:	01 f4       	brne	.+0      	; 0x30 <malloc+0x30>
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
  30:	82 81       	ldd	r24, Z+2	; 0x02
  32:	93 81       	ldd	r25, Z+3	; 0x03
  34:	21 15       	cp	r18, r1
	if (cp < cp1)
  36:	31 05       	cpc	r19, r1
  38:	01 f0       	breq	.+0      	; 0x3a <malloc+0x3a>
  3a:	d9 01       	movw	r26, r18
  3c:	13 96       	adiw	r26, 0x03	; 3
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
  3e:	9c 93       	st	X, r25
  40:	8e 93       	st	-X, r24
  42:	12 97       	sbiw	r26, 0x02	; 2
  44:	00 c0       	rjmp	.+0      	; 0x46 <malloc+0x46>
  46:	90 93 00 00 	sts	0x0000, r25
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
  4a:	80 93 00 00 	sts	0x0000, r24
  4e:	00 c0       	rjmp	.+0      	; 0x50 <malloc+0x50>
  50:	41 15       	cp	r20, r1
  52:	51 05       	cpc	r21, r1
		    len > fp1->sz - sizeof(struct __freelist))
  54:	01 f0       	breq	.+0      	; 0x56 <malloc+0x56>
  56:	64 17       	cp	r22, r20
  58:	75 07       	cpc	r23, r21
	 * previous size.
	 */
	if (len <= fp1->sz) {
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
  5a:	00 f4       	brcc	.+0      	; 0x5c <malloc+0x5c>
  5c:	ab 01       	movw	r20, r22
  5e:	e9 01       	movw	r28, r18
  60:	df 01       	movw	r26, r30
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
  62:	9f 01       	movw	r18, r30
  64:	72 81       	ldd	r23, Z+2	; 0x02
  66:	63 81       	ldd	r22, Z+3	; 0x03
  68:	e7 2f       	mov	r30, r23
  6a:	f6 2f       	mov	r31, r22
  6c:	30 97       	sbiw	r30, 0x00	; 0
  6e:	01 f4       	brne	.+0      	; 0x70 <malloc+0x70>
  70:	41 15       	cp	r20, r1
		fp1->sz = len;
  72:	51 05       	cpc	r21, r1
  74:	01 f0       	breq	.+0      	; 0x76 <malloc+0x76>
		free(&(fp2->nx));
  76:	48 1b       	sub	r20, r24
  78:	59 0b       	sbc	r21, r25
  7a:	44 30       	cpi	r20, 0x04	; 4
		return ptr;
  7c:	51 05       	cpc	r21, r1

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
  7e:	00 f4       	brcc	.+0      	; 0x80 <malloc+0x80>
  80:	12 96       	adiw	r26, 0x02	; 2
  82:	8d 91       	ld	r24, X+
	cp = (char *)ptr + fp1->sz;
  84:	9c 91       	ld	r25, X
  86:	13 97       	sbiw	r26, 0x03	; 3
  88:	20 97       	sbiw	r28, 0x00	; 0
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
  8a:	01 f0       	breq	.+0      	; 0x8c <malloc+0x8c>
  8c:	9b 83       	std	Y+3, r25	; 0x03
  8e:	8a 83       	std	Y+2, r24	; 0x02
  90:	00 c0       	rjmp	.+0      	; 0x92 <malloc+0x92>
  92:	90 93 00 00 	sts	0x0000, r25
  96:	80 93 00 00 	sts	0x0000, r24
  9a:	fd 01       	movw	r30, r26
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
  9c:	32 96       	adiw	r30, 0x02	; 2
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <malloc+0xa0>
  a0:	fd 01       	movw	r30, r26
  a2:	e4 0f       	add	r30, r20
  a4:	f5 1f       	adc	r31, r21
  a6:	81 93       	st	Z+, r24
  a8:	91 93       	st	Z+, r25
  aa:	42 50       	subi	r20, 0x02	; 2
  ac:	50 40       	sbci	r21, 0x00	; 0
  ae:	11 96       	adiw	r26, 0x01	; 1
  b0:	5c 93       	st	X, r21
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
  b2:	4e 93       	st	-X, r20
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <malloc+0xb6>
  b6:	2d b7       	in	r18, 0x3d	; 61
  b8:	3e b7       	in	r19, 0x3e	; 62
  ba:	28 57       	subi	r18, 0x78	; 120
  bc:	30 40       	sbci	r19, 0x00	; 0
  be:	e0 91 00 00 	lds	r30, 0x0000
  c2:	f0 91 00 00 	lds	r31, 0x0000
  c6:	e2 17       	cp	r30, r18
  c8:	f3 07       	cpc	r31, r19
  ca:	00 f4       	brcc	.+0      	; 0xcc <malloc+0xcc>
  cc:	a9 01       	movw	r20, r18
  ce:	4e 1b       	sub	r20, r30
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
  d0:	5f 0b       	sbc	r21, r31
				fp2->nx = fp3->nx;
  d2:	48 17       	cp	r20, r24
  d4:	59 07       	cpc	r21, r25
				fp2->sz = fp3->sz - incr;
  d6:	00 f0       	brcs	.+0      	; 0xd8 <malloc+0xd8>
  d8:	9c 01       	movw	r18, r24
				fp1->sz = len;
  da:	2e 5f       	subi	r18, 0xFE	; 254
  dc:	3f 4f       	sbci	r19, 0xFF	; 255
  de:	42 17       	cp	r20, r18
  e0:	53 07       	cpc	r21, r19
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
  e2:	00 f0       	brcs	.+0      	; 0xe4 <malloc+0xe4>
  e4:	2e 0f       	add	r18, r30
  e6:	3f 1f       	adc	r19, r31
  e8:	30 93 00 00 	sts	0x0000, r19
  ec:	20 93 00 00 	sts	0x0000, r18
				fp2 = fp3->nx;
  f0:	30 93 00 00 	sts	0x0000, r19
			}
			if (ofp3)
  f4:	20 93 00 00 	sts	0x0000, r18
				ofp3->nx = fp2;
  f8:	81 93       	st	Z+, r24
  fa:	91 93       	st	Z+, r25
  fc:	00 c0       	rjmp	.+0      	; 0xfe <malloc+0xfe>
			else
				__flp = fp2;
  fe:	e0 e0       	ldi	r30, 0x00	; 0
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	cf 01       	movw	r24, r30
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

Disassembly of section .text.free:

00000000 <free>:



void *
realloc(void *ptr, size_t len)
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	00 97       	sbiw	r24, 0x00	; 0
   6:	01 f4       	brne	.+0      	; 0x8 <free+0x8>
   8:	00 c0       	rjmp	.+0      	; 0xa <free+0xa>
   a:	fc 01       	movw	r30, r24
   c:	32 97       	sbiw	r30, 0x02	; 2
   e:	13 82       	std	Z+3, r1	; 0x03
  10:	12 82       	std	Z+2, r1	; 0x02
  12:	60 91 00 00 	lds	r22, 0x0000
  16:	70 91 00 00 	lds	r23, 0x0000
  1a:	61 15       	cp	r22, r1
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
  1c:	71 05       	cpc	r23, r1
  1e:	01 f4       	brne	.+0      	; 0x20 <free+0x20>
  20:	20 81       	ld	r18, Z
		return malloc(len);
  22:	31 81       	ldd	r19, Z+1	; 0x01
  24:	28 0f       	add	r18, r24
  26:	39 1f       	adc	r19, r25
  28:	80 91 00 00 	lds	r24, 0x0000

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
  2c:	90 91 00 00 	lds	r25, 0x0000
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
  30:	82 17       	cp	r24, r18
  32:	93 07       	cpc	r25, r19
  34:	01 f4       	brne	.+0      	; 0x36 <free+0x36>
	if (cp < cp1)
  36:	f0 93 00 00 	sts	0x0000, r31
  3a:	e0 93 00 00 	sts	0x0000, r30
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
  3e:	00 c0       	rjmp	.+0      	; 0x40 <free+0x40>
  40:	db 01       	movw	r26, r22
  42:	80 e0       	ldi	r24, 0x00	; 0
  44:	90 e0       	ldi	r25, 0x00	; 0
  46:	00 c0       	rjmp	.+0      	; 0x48 <free+0x48>
  48:	cd 01       	movw	r24, r26
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
  4a:	d9 01       	movw	r26, r18
  4c:	ae 17       	cp	r26, r30
  4e:	bf 07       	cpc	r27, r31
  50:	00 f4       	brcc	.+0      	; 0x52 <free+0x52>
  52:	12 96       	adiw	r26, 0x02	; 2
		    len > fp1->sz - sizeof(struct __freelist))
  54:	2d 91       	ld	r18, X+
  56:	3c 91       	ld	r19, X
  58:	13 97       	sbiw	r26, 0x03	; 3
	 * previous size.
	 */
	if (len <= fp1->sz) {
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
  5a:	21 15       	cp	r18, r1
  5c:	31 05       	cpc	r19, r1
  5e:	01 f4       	brne	.+0      	; 0x60 <free+0x60>
  60:	cd 01       	movw	r24, r26
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
  62:	00 c0       	rjmp	.+0      	; 0x64 <free+0x64>
  64:	b3 83       	std	Z+3, r27	; 0x03
  66:	a2 83       	std	Z+2, r26	; 0x02
  68:	ef 01       	movw	r28, r30
  6a:	49 91       	ld	r20, Y+
  6c:	59 91       	ld	r21, Y+
  6e:	9e 01       	movw	r18, r28
  70:	24 0f       	add	r18, r20
		fp1->sz = len;
  72:	35 1f       	adc	r19, r21
  74:	a2 17       	cp	r26, r18
		free(&(fp2->nx));
  76:	b3 07       	cpc	r27, r19
  78:	01 f4       	brne	.+0      	; 0x7a <free+0x7a>
  7a:	2d 91       	ld	r18, X+
		return ptr;
  7c:	3c 91       	ld	r19, X

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
  7e:	11 97       	sbiw	r26, 0x01	; 1
  80:	24 0f       	add	r18, r20
  82:	35 1f       	adc	r19, r21
	cp = (char *)ptr + fp1->sz;
  84:	2e 5f       	subi	r18, 0xFE	; 254
  86:	3f 4f       	sbci	r19, 0xFF	; 255
  88:	31 83       	std	Z+1, r19	; 0x01
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
  8a:	20 83       	st	Z, r18
  8c:	12 96       	adiw	r26, 0x02	; 2
  8e:	2d 91       	ld	r18, X+
  90:	3c 91       	ld	r19, X
  92:	13 97       	sbiw	r26, 0x03	; 3
  94:	33 83       	std	Z+3, r19	; 0x03
  96:	22 83       	std	Z+2, r18	; 0x02
  98:	00 97       	sbiw	r24, 0x00	; 0
  9a:	01 f4       	brne	.+0      	; 0x9c <free+0x9c>
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
  9c:	f0 93 00 00 	sts	0x0000, r31
  a0:	e0 93 00 00 	sts	0x0000, r30
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <free+0xa6>
  a6:	dc 01       	movw	r26, r24
  a8:	13 96       	adiw	r26, 0x03	; 3
  aa:	fc 93       	st	X, r31
  ac:	ee 93       	st	-X, r30
  ae:	12 97       	sbiw	r26, 0x02	; 2
  b0:	4d 91       	ld	r20, X+
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
  b2:	5d 91       	ld	r21, X+
  b4:	a4 0f       	add	r26, r20
  b6:	b5 1f       	adc	r27, r21
  b8:	ea 17       	cp	r30, r26
  ba:	fb 07       	cpc	r31, r27
  bc:	01 f4       	brne	.+0      	; 0xbe <free+0xbe>
  be:	20 81       	ld	r18, Z
  c0:	31 81       	ldd	r19, Z+1	; 0x01
  c2:	24 0f       	add	r18, r20
  c4:	35 1f       	adc	r19, r21
  c6:	2e 5f       	subi	r18, 0xFE	; 254
  c8:	3f 4f       	sbci	r19, 0xFF	; 255
  ca:	ec 01       	movw	r28, r24
  cc:	39 83       	std	Y+1, r19	; 0x01
  ce:	28 83       	st	Y, r18
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
  d0:	22 81       	ldd	r18, Z+2	; 0x02
				fp2->nx = fp3->nx;
  d2:	33 81       	ldd	r19, Z+3	; 0x03
  d4:	3b 83       	std	Y+3, r19	; 0x03
				fp2->sz = fp3->sz - incr;
  d6:	2a 83       	std	Y+2, r18	; 0x02
  d8:	e0 e0       	ldi	r30, 0x00	; 0
				fp1->sz = len;
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	00 c0       	rjmp	.+0      	; 0xde <free+0xde>
  de:	fb 01       	movw	r30, r22
  e0:	bc 01       	movw	r22, r24
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
  e2:	db 01       	movw	r26, r22
  e4:	12 96       	adiw	r26, 0x02	; 2
  e6:	8d 91       	ld	r24, X+
  e8:	9c 91       	ld	r25, X
  ea:	13 97       	sbiw	r26, 0x03	; 3
  ec:	00 97       	sbiw	r24, 0x00	; 0
  ee:	01 f4       	brne	.+0      	; 0xf0 <free+0xf0>
				fp2 = fp3->nx;
  f0:	9b 01       	movw	r18, r22
  f2:	2e 5f       	subi	r18, 0xFE	; 254
			}
			if (ofp3)
  f4:	3f 4f       	sbci	r19, 0xFF	; 255
  f6:	8d 91       	ld	r24, X+
				ofp3->nx = fp2;
  f8:	9c 91       	ld	r25, X
  fa:	11 97       	sbiw	r26, 0x01	; 1
  fc:	82 0f       	add	r24, r18
			else
				__flp = fp2;
  fe:	93 1f       	adc	r25, r19
 100:	40 91 00 00 	lds	r20, 0x0000
 104:	50 91 00 00 	lds	r21, 0x0000
 108:	48 17       	cp	r20, r24
 10a:	59 07       	cpc	r21, r25
 10c:	01 f4       	brne	.+0      	; 0x10e <free+0x10e>
 10e:	30 97       	sbiw	r30, 0x00	; 0
 110:	01 f4       	brne	.+0      	; 0x112 <free+0x112>
 112:	10 92 00 00 	sts	0x0000, r1
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
 116:	10 92 00 00 	sts	0x0000, r1
 11a:	00 c0       	rjmp	.+0      	; 0x11c <free+0x11c>
 11c:	13 82       	std	Z+3, r1	; 0x03
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
 11e:	12 82       	std	Z+2, r1	; 0x02
 120:	22 50       	subi	r18, 0x02	; 2
 122:	30 40       	sbci	r19, 0x00	; 0
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
 124:	30 93 00 00 	sts	0x0000, r19
 128:	20 93 00 00 	sts	0x0000, r18
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

Disassembly of section .text.realloc:

00000000 <realloc>:



void *
realloc(void *ptr, size_t len)
{
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	cf 93       	push	r28
  16:	df 93       	push	r29
  18:	8c 01       	movw	r16, r24
  1a:	cb 01       	movw	r24, r22
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
  1c:	01 15       	cp	r16, r1
  1e:	11 05       	cpc	r17, r1
  20:	01 f4       	brne	.+0      	; 0x22 <realloc+0x22>
		return malloc(len);
  22:	0e 94 00 00 	call	0	; 0x0 <realloc>
  26:	08 2f       	mov	r16, r24
  28:	19 2f       	mov	r17, r25
  2a:	00 c0       	rjmp	.+0      	; 0x2c <realloc+0x2c>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
  2c:	d8 01       	movw	r26, r16
  2e:	12 97       	sbiw	r26, 0x02	; 2
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
  30:	98 01       	movw	r18, r16
  32:	26 0f       	add	r18, r22
  34:	37 1f       	adc	r19, r23
	if (cp < cp1)
  36:	2a 17       	cp	r18, r26
  38:	3b 07       	cpc	r19, r27
  3a:	00 f4       	brcc	.+0      	; 0x3c <realloc+0x3c>
  3c:	00 c0       	rjmp	.+0      	; 0x3e <realloc+0x3e>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
  3e:	ed 90       	ld	r14, X+
  40:	fc 90       	ld	r15, X
  42:	11 97       	sbiw	r26, 0x01	; 1
  44:	e6 16       	cp	r14, r22
  46:	f7 06       	cpc	r15, r23
  48:	00 f0       	brcs	.+0      	; 0x4a <realloc+0x4a>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
  4a:	45 e0       	ldi	r20, 0x05	; 5
  4c:	e4 16       	cp	r14, r20
  4e:	f1 04       	cpc	r15, r1
  50:	00 f4       	brcc	.+0      	; 0x52 <realloc+0x52>
  52:	00 c0       	rjmp	.+0      	; 0x54 <realloc+0x54>
		    len > fp1->sz - sizeof(struct __freelist))
  54:	a7 01       	movw	r20, r14
  56:	44 50       	subi	r20, 0x04	; 4
  58:	50 40       	sbci	r21, 0x00	; 0
	 * previous size.
	 */
	if (len <= fp1->sz) {
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
  5a:	46 17       	cp	r20, r22
  5c:	57 07       	cpc	r21, r23
  5e:	00 f4       	brcc	.+0      	; 0x60 <realloc+0x60>
  60:	00 c0       	rjmp	.+0      	; 0x62 <realloc+0x62>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
  62:	a7 01       	movw	r20, r14
  64:	42 50       	subi	r20, 0x02	; 2
  66:	50 40       	sbci	r21, 0x00	; 0
  68:	46 1b       	sub	r20, r22
  6a:	57 0b       	sbc	r21, r23
  6c:	f9 01       	movw	r30, r18
  6e:	41 93       	st	Z+, r20
  70:	51 93       	st	Z+, r21
		fp1->sz = len;
  72:	6d 93       	st	X+, r22
  74:	7c 93       	st	X, r23
		free(&(fp2->nx));
  76:	cf 01       	movw	r24, r30
  78:	0e 94 00 00 	call	0	; 0x0 <realloc>
		return ptr;
  7c:	00 c0       	rjmp	.+0      	; 0x7e <realloc+0x7e>

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
  7e:	5b 01       	movw	r10, r22
  80:	ae 18       	sub	r10, r14
  82:	bf 08       	sbc	r11, r15
	cp = (char *)ptr + fp1->sz;
  84:	48 01       	movw	r8, r16
  86:	8e 0c       	add	r8, r14
  88:	9f 1c       	adc	r9, r15
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
  8a:	e0 91 00 00 	lds	r30, 0x0000
  8e:	f0 91 00 00 	lds	r31, 0x0000
  92:	cc 24       	eor	r12, r12
  94:	dd 24       	eor	r13, r13
  96:	c0 e0       	ldi	r28, 0x00	; 0
  98:	d0 e0       	ldi	r29, 0x00	; 0
  9a:	00 c0       	rjmp	.+0      	; 0x9c <realloc+0x9c>
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
  9c:	e8 15       	cp	r30, r8
  9e:	f9 05       	cpc	r31, r9
  a0:	01 f4       	brne	.+0      	; 0xa2 <realloc+0xa2>
  a2:	60 81       	ld	r22, Z
  a4:	71 81       	ldd	r23, Z+1	; 0x01
  a6:	ab 01       	movw	r20, r22
  a8:	4e 5f       	subi	r20, 0xFE	; 254
  aa:	5f 4f       	sbci	r21, 0xFF	; 255
  ac:	4a 15       	cp	r20, r10
  ae:	5b 05       	cpc	r21, r11
  b0:	00 f0       	brcs	.+0      	; 0xb2 <realloc+0xb2>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
  b2:	ab 01       	movw	r20, r22
  b4:	4a 19       	sub	r20, r10
  b6:	5b 09       	sbc	r21, r11
  b8:	cc 24       	eor	r12, r12
  ba:	dd 24       	eor	r13, r13
  bc:	68 94       	set
  be:	c1 f8       	bld	r12, 1
  c0:	c4 0e       	add	r12, r20
  c2:	d5 1e       	adc	r13, r21
  c4:	82 80       	ldd	r8, Z+2	; 0x02
  c6:	a3 80       	ldd	r10, Z+3	; 0x03
  c8:	e5 e0       	ldi	r30, 0x05	; 5
  ca:	ce 16       	cp	r12, r30
  cc:	d1 04       	cpc	r13, r1
  ce:	00 f0       	brcs	.+0      	; 0xd0 <realloc+0xd0>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
  d0:	f9 01       	movw	r30, r18
				fp2->nx = fp3->nx;
  d2:	82 82       	std	Z+2, r8	; 0x02
  d4:	a3 82       	std	Z+3, r10	; 0x03
				fp2->sz = fp3->sz - incr;
  d6:	51 83       	std	Z+1, r21	; 0x01
  d8:	40 83       	st	Z, r20
				fp1->sz = len;
  da:	11 96       	adiw	r26, 0x01	; 1
  dc:	9c 93       	st	X, r25
  de:	8e 93       	st	-X, r24
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <realloc+0xe2>
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
  e2:	c7 01       	movw	r24, r14
  e4:	02 96       	adiw	r24, 0x02	; 2
  e6:	86 0f       	add	r24, r22
  e8:	97 1f       	adc	r25, r23
  ea:	11 96       	adiw	r26, 0x01	; 1
  ec:	9c 93       	st	X, r25
  ee:	8e 93       	st	-X, r24
				fp2 = fp3->nx;
  f0:	e8 2d       	mov	r30, r8
  f2:	fa 2d       	mov	r31, r10
			}
			if (ofp3)
  f4:	20 97       	sbiw	r28, 0x00	; 0
  f6:	01 f0       	breq	.+0      	; 0xf8 <realloc+0xf8>
				ofp3->nx = fp2;
  f8:	fb 83       	std	Y+3, r31	; 0x03
  fa:	ea 83       	std	Y+2, r30	; 0x02
  fc:	00 c0       	rjmp	.+0      	; 0xfe <realloc+0xfe>
			else
				__flp = fp2;
  fe:	f0 93 00 00 	sts	0x0000, r31
 102:	e0 93 00 00 	sts	0x0000, r30
 106:	00 c0       	rjmp	.+0      	; 0x108 <realloc+0x108>
 108:	40 81       	ld	r20, Z
 10a:	51 81       	ldd	r21, Z+1	; 0x01
 10c:	c4 16       	cp	r12, r20
 10e:	d5 06       	cpc	r13, r21
 110:	00 f4       	brcc	.+0      	; 0x112 <realloc+0x112>
 112:	6a 01       	movw	r12, r20
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
 114:	ef 01       	movw	r28, r30
 116:	52 81       	ldd	r21, Z+2	; 0x02
 118:	43 81       	ldd	r20, Z+3	; 0x03
 11a:	e5 2f       	mov	r30, r21
 11c:	f4 2f       	mov	r31, r20
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
 11e:	30 97       	sbiw	r30, 0x00	; 0
 120:	01 f0       	breq	.+0      	; 0x122 <realloc+0x122>
 122:	00 c0       	rjmp	.+0      	; 0x124 <realloc+0x124>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
 124:	40 91 00 00 	lds	r20, 0x0000
 128:	50 91 00 00 	lds	r21, 0x0000
 12c:	48 15       	cp	r20, r8
 12e:	59 05       	cpc	r21, r9
 130:	01 f4       	brne	.+0      	; 0x132 <realloc+0x132>
 132:	c8 16       	cp	r12, r24
 134:	d9 06       	cpc	r13, r25
 136:	00 f4       	brcc	.+0      	; 0x138 <realloc+0x138>
		cp = (char *)ptr + len;
		cp1 = STACK_POINTER() - __MALLOC_MARGIN__;
 138:	4d b7       	in	r20, 0x3d	; 61
 13a:	5e b7       	in	r21, 0x3e	; 62
 13c:	48 57       	subi	r20, 0x78	; 120
 13e:	50 40       	sbci	r21, 0x00	; 0
		if (cp < cp1) {
 140:	24 17       	cp	r18, r20
 142:	35 07       	cpc	r19, r21
 144:	00 f4       	brcc	.+0      	; 0x146 <realloc+0x146>
			__brkval = cp;
 146:	30 93 00 00 	sts	0x0000, r19
 14a:	20 93 00 00 	sts	0x0000, r18
			__brkval_maximum = cp;
 14e:	30 93 00 00 	sts	0x0000, r19
 152:	20 93 00 00 	sts	0x0000, r18
			fp1->sz = len;
 156:	11 96       	adiw	r26, 0x01	; 1
 158:	9c 93       	st	X, r25
 15a:	8e 93       	st	-X, r24
			return ptr;
 15c:	00 c0       	rjmp	.+0      	; 0x15e <realloc+0x15e>

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
 15e:	0e 94 00 00 	call	0	; 0x0 <realloc>
 162:	c8 2e       	mov	r12, r24
 164:	e6 01       	movw	r28, r12
 166:	6e 01       	movw	r12, r28
 168:	d9 2e       	mov	r13, r25
 16a:	e6 01       	movw	r28, r12
 16c:	20 97       	sbiw	r28, 0x00	; 0
 16e:	01 f0       	breq	.+0      	; 0x170 <realloc+0x170>
		return 0;
	memcpy(memp, ptr, fp1->sz);
 170:	8c 2d       	mov	r24, r12
 172:	b8 01       	movw	r22, r16
 174:	a7 01       	movw	r20, r14
 176:	0e 94 00 00 	call	0	; 0x0 <realloc>
	free(ptr);
 17a:	c8 01       	movw	r24, r16
 17c:	0e 94 00 00 	call	0	; 0x0 <realloc>
	return memp;
 180:	86 01       	movw	r16, r12
 182:	00 c0       	rjmp	.+0      	; 0x184 <realloc+0x184>
	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
		return 0;
 184:	00 e0       	ldi	r16, 0x00	; 0
 186:	10 e0       	ldi	r17, 0x00	; 0
	memcpy(memp, ptr, fp1->sz);
	free(ptr);
	return memp;
}
 188:	c8 01       	movw	r24, r16
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	1f 91       	pop	r17
 190:	0f 91       	pop	r16
 192:	ff 90       	pop	r15
 194:	ef 90       	pop	r14
 196:	df 90       	pop	r13
 198:	cf 90       	pop	r12
 19a:	bf 90       	pop	r11
 19c:	af 90       	pop	r10
 19e:	9f 90       	pop	r9
 1a0:	8f 90       	pop	r8
 1a2:	08 95       	ret

new.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000048c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000657  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._Znwj   00000006  00000000  00000000  00000b17  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._Znaj   00000006  00000000  00000000  00000b1d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZdlPv  00000006  00000000  00000000  00000b23  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZdaPv  00000006  00000000  00000000  00000b29  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.__cxa_guard_acquire 00000014  00000000  00000000  00000b2f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.__cxa_guard_release 00000008  00000000  00000000  00000b43  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .text.__cxa_guard_abort 00000002  00000000  00000000  00000b4b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .text.__cxa_pure_virtual 00000002  00000000  00000000  00000b4d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text._Znwj:

00000000 <_Znwj>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 

void __cxa_pure_virtual(void) {};
   0:	0e 94 00 00 	call	0	; 0x0 <_Znwj>
   4:	08 95       	ret

Disassembly of section .text._Znaj:

00000000 <_Znaj>:
   0:	0e 94 00 00 	call	0	; 0x0 <_Znaj>
   4:	08 95       	ret

Disassembly of section .text._ZdlPv:

00000000 <_ZdlPv>:
   0:	0e 94 00 00 	call	0	; 0x0 <_ZdlPv>
   4:	08 95       	ret

Disassembly of section .text._ZdaPv:

00000000 <_ZdaPv>:
   0:	0e 94 00 00 	call	0	; 0x0 <_ZdaPv>
   4:	08 95       	ret

Disassembly of section .text.__cxa_guard_acquire:

00000000 <__cxa_guard_acquire>:
   0:	21 e0       	ldi	r18, 0x01	; 1
   2:	30 e0       	ldi	r19, 0x00	; 0
   4:	fc 01       	movw	r30, r24
   6:	80 81       	ld	r24, Z
   8:	88 23       	and	r24, r24
   a:	01 f0       	breq	.+0      	; 0xc <__cxa_guard_acquire+0xc>
   c:	20 e0       	ldi	r18, 0x00	; 0
   e:	30 e0       	ldi	r19, 0x00	; 0
  10:	c9 01       	movw	r24, r18
  12:	08 95       	ret

Disassembly of section .text.__cxa_guard_release:

00000000 <__cxa_guard_release>:
   0:	21 e0       	ldi	r18, 0x01	; 1
   2:	fc 01       	movw	r30, r24
   4:	20 83       	st	Z, r18
   6:	08 95       	ret

Disassembly of section .text.__cxa_guard_abort:

00000000 <__cxa_guard_abort>:
   0:	08 95       	ret

Disassembly of section .text.__cxa_pure_virtual:

00000000 <__cxa_pure_virtual>:
   0:	08 95       	ret

wiring.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000b10  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000ee6  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.__vector_23 00000090  00000000  00000000  00001a2a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.millis  0000001c  00000000  00000000  00001aba  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.micros  0000004c  00000000  00000000  00001ad6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.delay   0000004e  00000000  00000000  00001b22  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.delayMicroseconds 00000014  00000000  00000000  00001b70  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.init    000000c4  00000000  00000000  00001b84  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .bss.timer0_overflow_count 00000004  00000000  00000000  00001c48  2**0
                  ALLOC
 12 .bss.timer0_millis 00000004  00000000  00000000  00001c48  2**0
                  ALLOC
 13 .bss.timer0_fract 00000001  00000000  00000000  00001c48  2**0
                  ALLOC

Disassembly of section .text.__vector_23:

00000000 <__vector_23>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
   0:	1f 92       	push	r1
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
	sbi(TCCR0A, WGM00);
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
   e:	8f 93       	push	r24
  10:	9f 93       	push	r25
  12:	af 93       	push	r26
	sbi(TCCR0B, CS00);
  14:	bf 93       	push	r27
  16:	80 91 00 00 	lds	r24, 0x0000

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
  1a:	90 91 00 00 	lds	r25, 0x0000
  1e:	a0 91 00 00 	lds	r26, 0x0000
  22:	b0 91 00 00 	lds	r27, 0x0000
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
  26:	30 91 00 00 	lds	r19, 0x0000

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
  2a:	01 96       	adiw	r24, 0x01	; 1
  2c:	a1 1d       	adc	r26, r1
  2e:	b1 1d       	adc	r27, r1
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
  30:	23 2f       	mov	r18, r19
  32:	2d 5f       	subi	r18, 0xFD	; 253
  34:	2d 37       	cpi	r18, 0x7D	; 125
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
  36:	00 f0       	brcs	.+0      	; 0x38 <__vector_23+0x38>
  38:	2d 57       	subi	r18, 0x7D	; 125
  3a:	01 96       	adiw	r24, 0x01	; 1
  3c:	a1 1d       	adc	r26, r1
  3e:	b1 1d       	adc	r27, r1

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
  40:	20 93 00 00 	sts	0x0000, r18
  44:	80 93 00 00 	sts	0x0000, r24
  48:	90 93 00 00 	sts	0x0000, r25

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
  4c:	a0 93 00 00 	sts	0x0000, r26
  50:	b0 93 00 00 	sts	0x0000, r27
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
  54:	80 91 00 00 	lds	r24, 0x0000
  58:	90 91 00 00 	lds	r25, 0x0000
  5c:	a0 91 00 00 	lds	r26, 0x0000
	sbi(TCCR3B, CS30);
  60:	b0 91 00 00 	lds	r27, 0x0000
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
  64:	01 96       	adiw	r24, 0x01	; 1
  66:	a1 1d       	adc	r26, r1
  68:	b1 1d       	adc	r27, r1
  6a:	80 93 00 00 	sts	0x0000, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
  6e:	90 93 00 00 	sts	0x0000, r25
  72:	a0 93 00 00 	sts	0x0000, r26
  76:	b0 93 00 00 	sts	0x0000, r27
	sbi(TCCR4B, CS40);
  7a:	bf 91       	pop	r27
  7c:	af 91       	pop	r26
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
  7e:	9f 91       	pop	r25
  80:	8f 91       	pop	r24
  82:	3f 91       	pop	r19
  84:	2f 91       	pop	r18
  86:	0f 90       	pop	r0
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
  88:	0f be       	out	0x3f, r0	; 63
  8a:	0f 90       	pop	r0
  8c:	1f 90       	pop	r1
  8e:	18 95       	reti

Disassembly of section .text.millis:

00000000 <millis>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
   0:	8f b7       	in	r24, 0x3f	; 63
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
   2:	f8 94       	cli
   4:	20 91 00 00 	lds	r18, 0x0000
	sbi(TCCR0A, WGM00);
   8:	30 91 00 00 	lds	r19, 0x0000
   c:	40 91 00 00 	lds	r20, 0x0000
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
  10:	50 91 00 00 	lds	r21, 0x0000
	sbi(TCCR0B, CS00);
  14:	8f bf       	out	0x3f, r24	; 63
  16:	b9 01       	movw	r22, r18
  18:	ca 01       	movw	r24, r20

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
  1a:	08 95       	ret

Disassembly of section .text.micros:

00000000 <micros>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
   0:	9f b7       	in	r25, 0x3f	; 63
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
   2:	f8 94       	cli
   4:	20 91 00 00 	lds	r18, 0x0000
	sbi(TCCR0A, WGM00);
   8:	30 91 00 00 	lds	r19, 0x0000
   c:	40 91 00 00 	lds	r20, 0x0000
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
  10:	50 91 00 00 	lds	r21, 0x0000
	sbi(TCCR0B, CS00);
  14:	86 b5       	in	r24, 0x26	; 38
  16:	a8 9b       	sbis	0x15, 0	; 21
  18:	00 c0       	rjmp	.+0      	; 0x1a <micros+0x1a>

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
  1a:	8f 3f       	cpi	r24, 0xFF	; 255
  1c:	01 f0       	breq	.+0      	; 0x1e <micros+0x1e>
  1e:	2f 5f       	subi	r18, 0xFF	; 255
  20:	3f 4f       	sbci	r19, 0xFF	; 255
  22:	4f 4f       	sbci	r20, 0xFF	; 255
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
  24:	5f 4f       	sbci	r21, 0xFF	; 255
  26:	9f bf       	out	0x3f, r25	; 63
  28:	54 2f       	mov	r21, r20

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
  2a:	43 2f       	mov	r20, r19
  2c:	32 2f       	mov	r19, r18
  2e:	22 27       	eor	r18, r18
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
  30:	28 0f       	add	r18, r24
  32:	31 1d       	adc	r19, r1
  34:	41 1d       	adc	r20, r1
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
  36:	51 1d       	adc	r21, r1
  38:	82 e0       	ldi	r24, 0x02	; 2
  3a:	22 0f       	add	r18, r18
  3c:	33 1f       	adc	r19, r19
  3e:	44 1f       	adc	r20, r20

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
  40:	55 1f       	adc	r21, r21
  42:	8a 95       	dec	r24
  44:	01 f4       	brne	.+0      	; 0x46 <micros+0x46>
  46:	b9 01       	movw	r22, r18
  48:	ca 01       	movw	r24, r20

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
  4a:	08 95       	ret

Disassembly of section .text.delay:

00000000 <delay>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
   0:	ef 92       	push	r14
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
	sbi(TCCR0A, WGM00);
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	7b 01       	movw	r14, r22
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
   e:	8c 01       	movw	r16, r24
  10:	0e 94 00 00 	call	0	; 0x0 <delay>
	sbi(TCCR0B, CS00);
  14:	eb 01       	movw	r28, r22
  16:	00 c0       	rjmp	.+0      	; 0x18 <delay+0x18>
  18:	0e 94 00 00 	call	0	; 0x0 <delay>

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
  1c:	6c 1b       	sub	r22, r28
  1e:	7d 0b       	sbc	r23, r29
  20:	83 e0       	ldi	r24, 0x03	; 3
  22:	68 3e       	cpi	r22, 0xE8	; 232
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
  24:	78 07       	cpc	r23, r24
  26:	00 f0       	brcs	.+0      	; 0x28 <delay+0x28>
  28:	08 94       	sec

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
  2a:	e1 08       	sbc	r14, r1
  2c:	f1 08       	sbc	r15, r1
  2e:	01 09       	sbc	r16, r1
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
  30:	11 09       	sbc	r17, r1
  32:	c8 51       	subi	r28, 0x18	; 24
  34:	dc 4f       	sbci	r29, 0xFC	; 252
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
  36:	e1 14       	cp	r14, r1
  38:	f1 04       	cpc	r15, r1
  3a:	01 05       	cpc	r16, r1
  3c:	11 05       	cpc	r17, r1
  3e:	01 f4       	brne	.+0      	; 0x40 <delay+0x40>

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
  40:	df 91       	pop	r29
  42:	cf 91       	pop	r28
  44:	1f 91       	pop	r17
  46:	0f 91       	pop	r16
  48:	ff 90       	pop	r15

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
  4a:	ef 90       	pop	r14
  4c:	08 95       	ret

Disassembly of section .text.delayMicroseconds:

00000000 <delayMicroseconds>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
   0:	01 97       	sbiw	r24, 0x01	; 1
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
   2:	01 f0       	breq	.+0      	; 0x4 <delayMicroseconds+0x4>
   4:	88 0f       	add	r24, r24
   6:	99 1f       	adc	r25, r25
	sbi(TCCR0A, WGM00);
   8:	88 0f       	add	r24, r24
   a:	99 1f       	adc	r25, r25
   c:	02 97       	sbiw	r24, 0x02	; 2
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
   e:	01 97       	sbiw	r24, 0x01	; 1
  10:	01 f4       	brne	.+0      	; 0x12 <delayMicroseconds+0x12>
  12:	08 95       	ret

Disassembly of section .text.init:

00000000 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
   0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
   2:	84 b5       	in	r24, 0x24	; 36
   4:	82 60       	ori	r24, 0x02	; 2
   6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
   8:	84 b5       	in	r24, 0x24	; 36
   a:	81 60       	ori	r24, 0x01	; 1
   c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
   e:	85 b5       	in	r24, 0x25	; 37
  10:	82 60       	ori	r24, 0x02	; 2
  12:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
  14:	85 b5       	in	r24, 0x25	; 37
  16:	81 60       	ori	r24, 0x01	; 1
  18:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
  1a:	ee e6       	ldi	r30, 0x6E	; 110
  1c:	f0 e0       	ldi	r31, 0x00	; 0
  1e:	80 81       	ld	r24, Z
  20:	81 60       	ori	r24, 0x01	; 1
  22:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
  24:	e1 e8       	ldi	r30, 0x81	; 129
  26:	f0 e0       	ldi	r31, 0x00	; 0
  28:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
  2a:	80 81       	ld	r24, Z
  2c:	82 60       	ori	r24, 0x02	; 2
  2e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
  30:	80 81       	ld	r24, Z
  32:	81 60       	ori	r24, 0x01	; 1
  34:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
  36:	e0 e8       	ldi	r30, 0x80	; 128
  38:	f0 e0       	ldi	r31, 0x00	; 0
  3a:	80 81       	ld	r24, Z
  3c:	81 60       	ori	r24, 0x01	; 1
  3e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
  40:	e1 eb       	ldi	r30, 0xB1	; 177
  42:	f0 e0       	ldi	r31, 0x00	; 0
  44:	80 81       	ld	r24, Z
  46:	84 60       	ori	r24, 0x04	; 4
  48:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
  4a:	e0 eb       	ldi	r30, 0xB0	; 176
  4c:	f0 e0       	ldi	r31, 0x00	; 0
  4e:	80 81       	ld	r24, Z
  50:	81 60       	ori	r24, 0x01	; 1
  52:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
  54:	e1 e9       	ldi	r30, 0x91	; 145
  56:	f0 e0       	ldi	r31, 0x00	; 0
  58:	80 81       	ld	r24, Z
  5a:	82 60       	ori	r24, 0x02	; 2
  5c:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
  5e:	80 81       	ld	r24, Z
  60:	81 60       	ori	r24, 0x01	; 1
  62:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
  64:	e0 e9       	ldi	r30, 0x90	; 144
  66:	f0 e0       	ldi	r31, 0x00	; 0
  68:	80 81       	ld	r24, Z
  6a:	81 60       	ori	r24, 0x01	; 1
  6c:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
  6e:	e1 ea       	ldi	r30, 0xA1	; 161
  70:	f0 e0       	ldi	r31, 0x00	; 0
  72:	80 81       	ld	r24, Z
  74:	82 60       	ori	r24, 0x02	; 2
  76:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
  78:	80 81       	ld	r24, Z
  7a:	81 60       	ori	r24, 0x01	; 1
  7c:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
  7e:	e0 ea       	ldi	r30, 0xA0	; 160
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	80 81       	ld	r24, Z
  84:	81 60       	ori	r24, 0x01	; 1
  86:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
  88:	e1 e2       	ldi	r30, 0x21	; 33
  8a:	f1 e0       	ldi	r31, 0x01	; 1
  8c:	80 81       	ld	r24, Z
  8e:	82 60       	ori	r24, 0x02	; 2
  90:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
  92:	80 81       	ld	r24, Z
  94:	81 60       	ori	r24, 0x01	; 1
  96:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
  98:	e0 e2       	ldi	r30, 0x20	; 32
  9a:	f1 e0       	ldi	r31, 0x01	; 1
  9c:	80 81       	ld	r24, Z
  9e:	81 60       	ori	r24, 0x01	; 1
  a0:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
  a2:	ea e7       	ldi	r30, 0x7A	; 122
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
  ac:	80 81       	ld	r24, Z
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
  b2:	80 81       	ld	r24, Z
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
  b8:	80 81       	ld	r24, Z
  ba:	80 68       	ori	r24, 0x80	; 128
  bc:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
  be:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
  c2:	08 95       	ret

wiring_analog.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000a14  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000e7f  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.analogReference 00000006  00000000  00000000  000018c7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.analogRead 00000066  00000000  00000000  000018cd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.analogWrite 000001c0  00000000  00000000  00001933  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .data.analog_reference 00000001  00000000  00000000  00001af3  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text.analogReference:

00000000 <analogReference>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
   0:	80 93 00 00 	sts	0x0000, r24
   4:	08 95       	ret

Disassembly of section .text.analogRead:

00000000 <analogRead>:
   0:	86 33       	cpi	r24, 0x36	; 54
   2:	00 f0       	brcs	.+0      	; 0x4 <analogRead+0x4>
   4:	86 53       	subi	r24, 0x36	; 54
   6:	90 91 7b 00 	lds	r25, 0x007B
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
   a:	28 2f       	mov	r18, r24
   c:	26 95       	lsr	r18
   e:	26 95       	lsr	r18
	if (val == 0)
  10:	26 95       	lsr	r18
  12:	30 e0       	ldi	r19, 0x00	; 0
  14:	21 70       	andi	r18, 0x01	; 1
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
  16:	30 70       	andi	r19, 0x00	; 0
  18:	43 e0       	ldi	r20, 0x03	; 3
  1a:	22 0f       	add	r18, r18
  1c:	33 1f       	adc	r19, r19
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
  1e:	4a 95       	dec	r20
  20:	01 f4       	brne	.+0      	; 0x22 <analogRead+0x22>
  22:	97 7f       	andi	r25, 0xF7	; 247
  24:	92 2b       	or	r25, r18
  26:	90 93 7b 00 	sts	0x007B, r25
  2a:	87 70       	andi	r24, 0x07	; 7
  2c:	90 91 00 00 	lds	r25, 0x0000
  30:	92 95       	swap	r25
  32:	99 0f       	add	r25, r25
  34:	99 0f       	add	r25, r25
  36:	90 7c       	andi	r25, 0xC0	; 192
  38:	98 2b       	or	r25, r24
  3a:	90 93 7c 00 	sts	0x007C, r25
  3e:	80 91 7a 00 	lds	r24, 0x007A
  42:	80 64       	ori	r24, 0x40	; 64
  44:	80 93 7a 00 	sts	0x007A, r24
  48:	80 91 7a 00 	lds	r24, 0x007A
  4c:	86 fd       	sbrc	r24, 6
  4e:	00 c0       	rjmp	.+0      	; 0x50 <analogRead+0x50>
  50:	20 91 78 00 	lds	r18, 0x0078
  54:	30 91 79 00 	lds	r19, 0x0079
  58:	93 2f       	mov	r25, r19
  5a:	80 e0       	ldi	r24, 0x00	; 0
  5c:	30 e0       	ldi	r19, 0x00	; 0
  5e:	28 2b       	or	r18, r24
  60:	39 2b       	or	r19, r25
  62:	c9 01       	movw	r24, r18
  64:	08 95       	ret

Disassembly of section .text.analogWrite:

00000000 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
   0:	1f 93       	push	r17
   2:	cf 93       	push	r28
   4:	df 93       	push	r29
   6:	18 2f       	mov	r17, r24
   8:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
   a:	61 e0       	ldi	r22, 0x01	; 1
   c:	0e 94 00 00 	call	0	; 0x0 <analogWrite>
	if (val == 0)
  10:	20 97       	sbiw	r28, 0x00	; 0
  12:	01 f4       	brne	.+0      	; 0x14 <analogWrite+0x14>
  14:	00 c0       	rjmp	.+0      	; 0x16 <analogWrite+0x16>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
  16:	cf 3f       	cpi	r28, 0xFF	; 255
  18:	d1 05       	cpc	r29, r1
  1a:	01 f4       	brne	.+0      	; 0x1c <analogWrite+0x1c>
  1c:	00 c0       	rjmp	.+0      	; 0x1e <analogWrite+0x1e>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
  1e:	e1 2f       	mov	r30, r17
  20:	f0 e0       	ldi	r31, 0x00	; 0
  22:	e0 50       	subi	r30, 0x00	; 0
  24:	f0 40       	sbci	r31, 0x00	; 0
  26:	e4 91       	lpm	r30, Z+
  28:	e9 30       	cpi	r30, 0x09	; 9
  2a:	01 f4       	brne	.+0      	; 0x2c <analogWrite+0x2c>
  2c:	00 c0       	rjmp	.+0      	; 0x2e <analogWrite+0x2e>
  2e:	ea 30       	cpi	r30, 0x0A	; 10
  30:	00 f4       	brcc	.+0      	; 0x32 <analogWrite+0x32>
  32:	e4 30       	cpi	r30, 0x04	; 4
  34:	01 f0       	breq	.+0      	; 0x36 <analogWrite+0x36>
  36:	e5 30       	cpi	r30, 0x05	; 5
  38:	00 f4       	brcc	.+0      	; 0x3a <analogWrite+0x3a>
  3a:	e2 30       	cpi	r30, 0x02	; 2
  3c:	01 f0       	breq	.+0      	; 0x3e <analogWrite+0x3e>
  3e:	e3 30       	cpi	r30, 0x03	; 3
  40:	00 f4       	brcc	.+0      	; 0x42 <analogWrite+0x42>
  42:	e1 30       	cpi	r30, 0x01	; 1
  44:	01 f0       	breq	.+0      	; 0x46 <analogWrite+0x46>
  46:	00 c0       	rjmp	.+0      	; 0x48 <analogWrite+0x48>
  48:	00 c0       	rjmp	.+0      	; 0x4a <analogWrite+0x4a>
  4a:	e7 30       	cpi	r30, 0x07	; 7
  4c:	01 f4       	brne	.+0      	; 0x4e <analogWrite+0x4e>
  4e:	00 c0       	rjmp	.+0      	; 0x50 <analogWrite+0x50>
  50:	e8 30       	cpi	r30, 0x08	; 8
  52:	00 f0       	brcs	.+0      	; 0x54 <analogWrite+0x54>
  54:	00 c0       	rjmp	.+0      	; 0x56 <analogWrite+0x56>
  56:	e6 30       	cpi	r30, 0x06	; 6
  58:	01 f0       	breq	.+0      	; 0x5a <analogWrite+0x5a>
  5a:	00 c0       	rjmp	.+0      	; 0x5c <analogWrite+0x5c>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <analogWrite+0x5e>
  5e:	ed 30       	cpi	r30, 0x0D	; 13
  60:	01 f4       	brne	.+0      	; 0x62 <analogWrite+0x62>
  62:	00 c0       	rjmp	.+0      	; 0x64 <analogWrite+0x64>
  64:	ee 30       	cpi	r30, 0x0E	; 14
  66:	00 f4       	brcc	.+0      	; 0x68 <analogWrite+0x68>
  68:	eb 30       	cpi	r30, 0x0B	; 11
  6a:	01 f4       	brne	.+0      	; 0x6c <analogWrite+0x6c>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <analogWrite+0x6e>
  6e:	ec 30       	cpi	r30, 0x0C	; 12
  70:	00 f0       	brcs	.+0      	; 0x72 <analogWrite+0x72>
  72:	00 c0       	rjmp	.+0      	; 0x74 <analogWrite+0x74>
  74:	00 c0       	rjmp	.+0      	; 0x76 <analogWrite+0x76>
  76:	e0 31       	cpi	r30, 0x10	; 16
  78:	01 f4       	brne	.+0      	; 0x7a <analogWrite+0x7a>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <analogWrite+0x7c>
  7c:	e1 31       	cpi	r30, 0x11	; 17
  7e:	01 f4       	brne	.+0      	; 0x80 <analogWrite+0x80>
  80:	00 c0       	rjmp	.+0      	; 0x82 <analogWrite+0x82>
  82:	ef 30       	cpi	r30, 0x0F	; 15
  84:	01 f0       	breq	.+0      	; 0x86 <analogWrite+0x86>
  86:	00 c0       	rjmp	.+0      	; 0x88 <analogWrite+0x88>
  88:	00 c0       	rjmp	.+0      	; 0x8a <analogWrite+0x8a>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
  8a:	84 b5       	in	r24, 0x24	; 36
  8c:	80 68       	ori	r24, 0x80	; 128
  8e:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
  90:	c7 bd       	out	0x27, r28	; 39
				break;
  92:	00 c0       	rjmp	.+0      	; 0x94 <analogWrite+0x94>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
  94:	84 b5       	in	r24, 0x24	; 36
  96:	80 62       	ori	r24, 0x20	; 32
  98:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
  9a:	c8 bd       	out	0x28, r28	; 40
				break;
  9c:	00 c0       	rjmp	.+0      	; 0x9e <analogWrite+0x9e>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
  9e:	80 91 80 00 	lds	r24, 0x0080
  a2:	80 68       	ori	r24, 0x80	; 128
  a4:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
  a8:	d0 93 89 00 	sts	0x0089, r29
  ac:	c0 93 88 00 	sts	0x0088, r28
				break;
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <analogWrite+0xb2>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
  b2:	80 91 80 00 	lds	r24, 0x0080
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
  bc:	d0 93 8b 00 	sts	0x008B, r29
  c0:	c0 93 8a 00 	sts	0x008A, r28
				break;
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <analogWrite+0xc6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
  c6:	80 91 b0 00 	lds	r24, 0x00B0
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
  d0:	c0 93 b3 00 	sts	0x00B3, r28
				break;
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <analogWrite+0xd6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
  d6:	80 91 b0 00 	lds	r24, 0x00B0
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
  e0:	c0 93 b4 00 	sts	0x00B4, r28
				break;
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <analogWrite+0xe6>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
  e6:	80 91 90 00 	lds	r24, 0x0090
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	80 93 90 00 	sts	0x0090, r24
				OCR3A = val; // set pwm duty
  f0:	d0 93 99 00 	sts	0x0099, r29
  f4:	c0 93 98 00 	sts	0x0098, r28
				break;
  f8:	00 c0       	rjmp	.+0      	; 0xfa <analogWrite+0xfa>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
  fa:	80 91 90 00 	lds	r24, 0x0090
  fe:	80 62       	ori	r24, 0x20	; 32
 100:	80 93 90 00 	sts	0x0090, r24
				OCR3B = val; // set pwm duty
 104:	d0 93 9b 00 	sts	0x009B, r29
 108:	c0 93 9a 00 	sts	0x009A, r28
				break;
 10c:	00 c0       	rjmp	.+0      	; 0x10e <analogWrite+0x10e>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
 10e:	80 91 90 00 	lds	r24, 0x0090
 112:	88 60       	ori	r24, 0x08	; 8
 114:	80 93 90 00 	sts	0x0090, r24
				OCR3C = val; // set pwm duty
 118:	d0 93 9d 00 	sts	0x009D, r29
 11c:	c0 93 9c 00 	sts	0x009C, r28
				break;
 120:	00 c0       	rjmp	.+0      	; 0x122 <analogWrite+0x122>
			#endif

			#if defined(TCCR4A)
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
 122:	80 91 a0 00 	lds	r24, 0x00A0
 126:	80 68       	ori	r24, 0x80	; 128
 128:	80 93 a0 00 	sts	0x00A0, r24
				#if defined(COM4A0)		// only used on 32U4
				cbi(TCCR4A, COM4A0);
 12c:	80 91 a0 00 	lds	r24, 0x00A0
 130:	8f 7b       	andi	r24, 0xBF	; 191
 132:	80 93 a0 00 	sts	0x00A0, r24
				#endif
				OCR4A = val;	// set pwm duty
 136:	d0 93 a9 00 	sts	0x00A9, r29
 13a:	c0 93 a8 00 	sts	0x00A8, r28
				break;
 13e:	00 c0       	rjmp	.+0      	; 0x140 <analogWrite+0x140>
			#endif
			
			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
 140:	80 91 a0 00 	lds	r24, 0x00A0
 144:	80 62       	ori	r24, 0x20	; 32
 146:	80 93 a0 00 	sts	0x00A0, r24
				OCR4B = val; // set pwm duty
 14a:	d0 93 ab 00 	sts	0x00AB, r29
 14e:	c0 93 aa 00 	sts	0x00AA, r28
				break;
 152:	00 c0       	rjmp	.+0      	; 0x154 <analogWrite+0x154>
			#endif

			#if defined(TCCR4A) && defined(COM4C1)
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				sbi(TCCR4A, COM4C1);
 154:	80 91 a0 00 	lds	r24, 0x00A0
 158:	88 60       	ori	r24, 0x08	; 8
 15a:	80 93 a0 00 	sts	0x00A0, r24
				OCR4C = val; // set pwm duty
 15e:	d0 93 ad 00 	sts	0x00AD, r29
 162:	c0 93 ac 00 	sts	0x00AC, r28
				break;
 166:	00 c0       	rjmp	.+0      	; 0x168 <analogWrite+0x168>

							
			#if defined(TCCR5A) && defined(COM5A1)
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				sbi(TCCR5A, COM5A1);
 168:	80 91 20 01 	lds	r24, 0x0120
 16c:	80 68       	ori	r24, 0x80	; 128
 16e:	80 93 20 01 	sts	0x0120, r24
				OCR5A = val; // set pwm duty
 172:	d0 93 29 01 	sts	0x0129, r29
 176:	c0 93 28 01 	sts	0x0128, r28
				break;
 17a:	00 c0       	rjmp	.+0      	; 0x17c <analogWrite+0x17c>
			#endif

			#if defined(TCCR5A) && defined(COM5B1)
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				sbi(TCCR5A, COM5B1);
 17c:	80 91 20 01 	lds	r24, 0x0120
 180:	80 62       	ori	r24, 0x20	; 32
 182:	80 93 20 01 	sts	0x0120, r24
				OCR5B = val; // set pwm duty
 186:	d0 93 2b 01 	sts	0x012B, r29
 18a:	c0 93 2a 01 	sts	0x012A, r28
				break;
 18e:	00 c0       	rjmp	.+0      	; 0x190 <analogWrite+0x190>
			#endif

			#if defined(TCCR5A) && defined(COM5C1)
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				sbi(TCCR5A, COM5C1);
 190:	80 91 20 01 	lds	r24, 0x0120
 194:	88 60       	ori	r24, 0x08	; 8
 196:	80 93 20 01 	sts	0x0120, r24
				OCR5C = val; // set pwm duty
 19a:	d0 93 2d 01 	sts	0x012D, r29
 19e:	c0 93 2c 01 	sts	0x012C, r28
				break;
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <analogWrite+0x1a4>
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
 1a4:	c0 38       	cpi	r28, 0x80	; 128
 1a6:	d1 05       	cpc	r29, r1
 1a8:	04 f4       	brge	.+0      	; 0x1aa <analogWrite+0x1aa>
					digitalWrite(pin, LOW);
 1aa:	81 2f       	mov	r24, r17
 1ac:	60 e0       	ldi	r22, 0x00	; 0
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <analogWrite+0x1b0>
				} else {
					digitalWrite(pin, HIGH);
 1b0:	81 2f       	mov	r24, r17
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	0e 94 00 00 	call	0	; 0x0 <analogWrite>
				}
		}
	}
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	08 95       	ret

wiring_digital.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000bd0  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001031  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.turnOffPWM 000000e8  00000000  00000000  00001c35  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.pinMode 0000008a  00000000  00000000  00001d1d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.digitalWrite 00000070  00000000  00000000  00001da7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.digitalRead 00000054  00000000  00000000  00001e17  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .progmem.data 00000120  00000000  00000000  00001e6b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text.turnOffPWM:

00000000 <turnOffPWM>:

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
   0:	89 30       	cpi	r24, 0x09	; 9
   2:	01 f4       	brne	.+0      	; 0x4 <turnOffPWM+0x4>
	uint8_t timer = digitalPinToTimer(pin);
   4:	00 c0       	rjmp	.+0      	; 0x6 <turnOffPWM+0x6>
   6:	8a 30       	cpi	r24, 0x0A	; 10
   8:	00 f4       	brcc	.+0      	; 0xa <turnOffPWM+0xa>
   a:	84 30       	cpi	r24, 0x04	; 4
   c:	01 f0       	breq	.+0      	; 0xe <turnOffPWM+0xe>
   e:	85 30       	cpi	r24, 0x05	; 5
	uint8_t bit = digitalPinToBitMask(pin);
  10:	00 f4       	brcc	.+0      	; 0x12 <turnOffPWM+0x12>
  12:	82 30       	cpi	r24, 0x02	; 2
  14:	01 f0       	breq	.+0      	; 0x16 <turnOffPWM+0x16>
  16:	83 30       	cpi	r24, 0x03	; 3
	uint8_t port = digitalPinToPort(pin);
  18:	00 f4       	brcc	.+0      	; 0x1a <turnOffPWM+0x1a>
  1a:	81 30       	cpi	r24, 0x01	; 1
  1c:	01 f0       	breq	.+0      	; 0x1e <turnOffPWM+0x1e>
  1e:	00 c0       	rjmp	.+0      	; 0x20 <turnOffPWM+0x20>

	if (port == NOT_A_PIN) return LOW;
  20:	00 c0       	rjmp	.+0      	; 0x22 <turnOffPWM+0x22>
  22:	87 30       	cpi	r24, 0x07	; 7

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
  24:	01 f0       	breq	.+0      	; 0x26 <turnOffPWM+0x26>
  26:	88 30       	cpi	r24, 0x08	; 8
  28:	00 f4       	brcc	.+0      	; 0x2a <turnOffPWM+0x2a>
  2a:	86 30       	cpi	r24, 0x06	; 6

	if (*portInputRegister(port) & bit) return HIGH;
  2c:	01 f0       	breq	.+0      	; 0x2e <turnOffPWM+0x2e>
  2e:	00 c0       	rjmp	.+0      	; 0x30 <turnOffPWM+0x30>
  30:	00 c0       	rjmp	.+0      	; 0x32 <turnOffPWM+0x32>
  32:	8d 30       	cpi	r24, 0x0D	; 13
  34:	01 f4       	brne	.+0      	; 0x36 <turnOffPWM+0x36>
  36:	00 c0       	rjmp	.+0      	; 0x38 <turnOffPWM+0x38>
  38:	8e 30       	cpi	r24, 0x0E	; 14
  3a:	00 f4       	brcc	.+0      	; 0x3c <turnOffPWM+0x3c>
  3c:	8b 30       	cpi	r24, 0x0B	; 11
  3e:	01 f0       	breq	.+0      	; 0x40 <turnOffPWM+0x40>
  40:	8c 30       	cpi	r24, 0x0C	; 12
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
  42:	00 f4       	brcc	.+0      	; 0x44 <turnOffPWM+0x44>
  44:	00 c0       	rjmp	.+0      	; 0x46 <turnOffPWM+0x46>
  46:	80 31       	cpi	r24, 0x10	; 16
  48:	01 f4       	brne	.+0      	; 0x4a <turnOffPWM+0x4a>
  4a:	00 c0       	rjmp	.+0      	; 0x4c <turnOffPWM+0x4c>
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
  4c:	81 31       	cpi	r24, 0x11	; 17
  4e:	01 f4       	brne	.+0      	; 0x50 <turnOffPWM+0x50>
  50:	00 c0       	rjmp	.+0      	; 0x52 <turnOffPWM+0x52>
  52:	8f 30       	cpi	r24, 0x0F	; 15
  54:	01 f0       	breq	.+0      	; 0x56 <turnOffPWM+0x56>
  56:	00 c0       	rjmp	.+0      	; 0x58 <turnOffPWM+0x58>
  58:	00 c0       	rjmp	.+0      	; 0x5a <turnOffPWM+0x5a>
  5a:	80 91 80 00 	lds	r24, 0x0080
  5e:	8f 77       	andi	r24, 0x7F	; 127
  60:	00 c0       	rjmp	.+0      	; 0x62 <turnOffPWM+0x62>
  62:	80 91 80 00 	lds	r24, 0x0080
  66:	8f 7d       	andi	r24, 0xDF	; 223
  68:	80 93 80 00 	sts	0x0080, r24
  6c:	08 95       	ret
  6e:	84 b5       	in	r24, 0x24	; 36
  70:	8f 77       	andi	r24, 0x7F	; 127
  72:	00 c0       	rjmp	.+0      	; 0x74 <turnOffPWM+0x74>
  74:	84 b5       	in	r24, 0x24	; 36
  76:	8f 7d       	andi	r24, 0xDF	; 223
  78:	84 bd       	out	0x24, r24	; 36
  7a:	08 95       	ret
  7c:	80 91 b0 00 	lds	r24, 0x00B0
  80:	8f 77       	andi	r24, 0x7F	; 127
  82:	00 c0       	rjmp	.+0      	; 0x84 <turnOffPWM+0x84>
  84:	80 91 b0 00 	lds	r24, 0x00B0
  88:	8f 7d       	andi	r24, 0xDF	; 223
  8a:	80 93 b0 00 	sts	0x00B0, r24
  8e:	08 95       	ret
  90:	80 91 90 00 	lds	r24, 0x0090
  94:	8f 77       	andi	r24, 0x7F	; 127
  96:	00 c0       	rjmp	.+0      	; 0x98 <turnOffPWM+0x98>
  98:	80 91 90 00 	lds	r24, 0x0090
  9c:	8f 7d       	andi	r24, 0xDF	; 223
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <turnOffPWM+0xa0>
  a0:	80 91 90 00 	lds	r24, 0x0090
  a4:	87 7f       	andi	r24, 0xF7	; 247
  a6:	80 93 90 00 	sts	0x0090, r24
  aa:	08 95       	ret
  ac:	80 91 a0 00 	lds	r24, 0x00A0
  b0:	8f 77       	andi	r24, 0x7F	; 127
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <turnOffPWM+0xb4>
  b4:	80 91 a0 00 	lds	r24, 0x00A0
  b8:	8f 7d       	andi	r24, 0xDF	; 223
  ba:	00 c0       	rjmp	.+0      	; 0xbc <turnOffPWM+0xbc>
  bc:	80 91 a0 00 	lds	r24, 0x00A0
  c0:	87 7f       	andi	r24, 0xF7	; 247
  c2:	80 93 a0 00 	sts	0x00A0, r24
  c6:	08 95       	ret
  c8:	80 91 20 01 	lds	r24, 0x0120
  cc:	8f 77       	andi	r24, 0x7F	; 127
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <turnOffPWM+0xd0>
  d0:	80 91 20 01 	lds	r24, 0x0120
  d4:	8f 7d       	andi	r24, 0xDF	; 223
  d6:	80 93 20 01 	sts	0x0120, r24
  da:	08 95       	ret
  dc:	80 91 20 01 	lds	r24, 0x0120
  e0:	87 7f       	andi	r24, 0xF7	; 247
  e2:	80 93 20 01 	sts	0x0120, r24
  e6:	08 95       	ret

Disassembly of section .text.pinMode:

00000000 <pinMode>:

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
	uint8_t timer = digitalPinToTimer(pin);
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	fc 01       	movw	r30, r24
   c:	e0 50       	subi	r30, 0x00	; 0
   e:	f0 40       	sbci	r31, 0x00	; 0
	uint8_t bit = digitalPinToBitMask(pin);
  10:	44 91       	lpm	r20, Z+
  12:	80 50       	subi	r24, 0x00	; 0
  14:	90 40       	sbci	r25, 0x00	; 0
  16:	fc 01       	movw	r30, r24
	uint8_t port = digitalPinToPort(pin);
  18:	84 91       	lpm	r24, Z+
  1a:	88 23       	and	r24, r24
  1c:	01 f0       	breq	.+0      	; 0x1e <pinMode+0x1e>
  1e:	90 e0       	ldi	r25, 0x00	; 0

	if (port == NOT_A_PIN) return LOW;
  20:	88 0f       	add	r24, r24
  22:	99 1f       	adc	r25, r25

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
  24:	fc 01       	movw	r30, r24
  26:	e0 50       	subi	r30, 0x00	; 0
  28:	f0 40       	sbci	r31, 0x00	; 0
  2a:	25 91       	lpm	r18, Z+

	if (*portInputRegister(port) & bit) return HIGH;
  2c:	34 91       	lpm	r19, Z+
  2e:	d9 01       	movw	r26, r18
  30:	80 50       	subi	r24, 0x00	; 0
  32:	90 40       	sbci	r25, 0x00	; 0
  34:	fc 01       	movw	r30, r24
  36:	25 91       	lpm	r18, Z+
  38:	34 91       	lpm	r19, Z+
  3a:	e2 2e       	mov	r14, r18
  3c:	e7 01       	movw	r28, r14
  3e:	7e 01       	movw	r14, r28
  40:	f3 2e       	mov	r15, r19
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
  42:	e7 01       	movw	r28, r14
  44:	66 23       	and	r22, r22
  46:	01 f4       	brne	.+0      	; 0x48 <pinMode+0x48>
  48:	9f b7       	in	r25, 0x3f	; 63
  4a:	f8 94       	cli
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
  4c:	8c 91       	ld	r24, X
  4e:	40 95       	com	r20
  50:	84 23       	and	r24, r20
  52:	8c 93       	st	X, r24
  54:	88 81       	ld	r24, Y
  56:	84 23       	and	r24, r20
  58:	00 c0       	rjmp	.+0      	; 0x5a <pinMode+0x5a>
  5a:	62 30       	cpi	r22, 0x02	; 2
  5c:	01 f4       	brne	.+0      	; 0x5e <pinMode+0x5e>
  5e:	9f b7       	in	r25, 0x3f	; 63
  60:	f8 94       	cli
  62:	8c 91       	ld	r24, X
  64:	24 2f       	mov	r18, r20
  66:	20 95       	com	r18
  68:	82 23       	and	r24, r18
  6a:	8c 93       	st	X, r24
  6c:	88 81       	ld	r24, Y
  6e:	84 2b       	or	r24, r20
  70:	88 83       	st	Y, r24
  72:	00 c0       	rjmp	.+0      	; 0x74 <pinMode+0x74>
  74:	9f b7       	in	r25, 0x3f	; 63
  76:	f8 94       	cli
  78:	8c 91       	ld	r24, X
  7a:	84 2b       	or	r24, r20
  7c:	8c 93       	st	X, r24
  7e:	9f bf       	out	0x3f, r25	; 63
  80:	df 91       	pop	r29
  82:	cf 91       	pop	r28
  84:	ff 90       	pop	r15
  86:	ef 90       	pop	r14
  88:	08 95       	ret

Disassembly of section .text.digitalWrite:

00000000 <digitalWrite>:

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
	uint8_t timer = digitalPinToTimer(pin);
   4:	df 93       	push	r29
   6:	cf 93       	push	r28
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	28 2f       	mov	r18, r24
	uint8_t bit = digitalPinToBitMask(pin);
  10:	30 e0       	ldi	r19, 0x00	; 0
  12:	f9 01       	movw	r30, r18
  14:	e0 50       	subi	r30, 0x00	; 0
  16:	f0 40       	sbci	r31, 0x00	; 0
	uint8_t port = digitalPinToPort(pin);
  18:	84 91       	lpm	r24, Z+
  1a:	f9 01       	movw	r30, r18
  1c:	e0 50       	subi	r30, 0x00	; 0
  1e:	f0 40       	sbci	r31, 0x00	; 0

	if (port == NOT_A_PIN) return LOW;
  20:	14 91       	lpm	r17, Z+
  22:	20 50       	subi	r18, 0x00	; 0

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
  24:	30 40       	sbci	r19, 0x00	; 0
  26:	f9 01       	movw	r30, r18
  28:	04 91       	lpm	r16, Z+
  2a:	00 23       	and	r16, r16

	if (*portInputRegister(port) & bit) return HIGH;
  2c:	01 f0       	breq	.+0      	; 0x2e <digitalWrite+0x2e>
  2e:	88 23       	and	r24, r24
  30:	01 f0       	breq	.+0      	; 0x32 <digitalWrite+0x32>
  32:	69 83       	std	Y+1, r22	; 0x01
  34:	0e 94 00 00 	call	0	; 0x0 <digitalWrite>
  38:	69 81       	ldd	r22, Y+1	; 0x01
  3a:	e0 2f       	mov	r30, r16
  3c:	f0 e0       	ldi	r31, 0x00	; 0
  3e:	ee 0f       	add	r30, r30
  40:	ff 1f       	adc	r31, r31
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
  42:	e0 50       	subi	r30, 0x00	; 0
  44:	f0 40       	sbci	r31, 0x00	; 0
  46:	85 91       	lpm	r24, Z+
  48:	94 91       	lpm	r25, Z+
  4a:	dc 01       	movw	r26, r24
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
  4c:	9f b7       	in	r25, 0x3f	; 63
  4e:	f8 94       	cli
  50:	66 23       	and	r22, r22
  52:	01 f4       	brne	.+0      	; 0x54 <digitalWrite+0x54>
  54:	8c 91       	ld	r24, X
  56:	10 95       	com	r17
  58:	81 23       	and	r24, r17
  5a:	00 c0       	rjmp	.+0      	; 0x5c <digitalWrite+0x5c>
  5c:	8c 91       	ld	r24, X
  5e:	81 2b       	or	r24, r17
  60:	8c 93       	st	X, r24
  62:	9f bf       	out	0x3f, r25	; 63
  64:	0f 90       	pop	r0
  66:	cf 91       	pop	r28
  68:	df 91       	pop	r29
  6a:	1f 91       	pop	r17
  6c:	0f 91       	pop	r16
  6e:	08 95       	ret

Disassembly of section .text.digitalRead:

00000000 <digitalRead>:

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
	uint8_t timer = digitalPinToTimer(pin);
   4:	28 2f       	mov	r18, r24
   6:	30 e0       	ldi	r19, 0x00	; 0
   8:	f9 01       	movw	r30, r18
   a:	e0 50       	subi	r30, 0x00	; 0
   c:	f0 40       	sbci	r31, 0x00	; 0
   e:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
  10:	f9 01       	movw	r30, r18
  12:	e0 50       	subi	r30, 0x00	; 0
  14:	f0 40       	sbci	r31, 0x00	; 0
  16:	04 91       	lpm	r16, Z+
	uint8_t port = digitalPinToPort(pin);
  18:	20 50       	subi	r18, 0x00	; 0
  1a:	30 40       	sbci	r19, 0x00	; 0
  1c:	f9 01       	movw	r30, r18
  1e:	14 91       	lpm	r17, Z+

	if (port == NOT_A_PIN) return LOW;
  20:	11 23       	and	r17, r17
  22:	01 f0       	breq	.+0      	; 0x24 <digitalRead+0x24>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
  24:	88 23       	and	r24, r24
  26:	01 f0       	breq	.+0      	; 0x28 <digitalRead+0x28>
  28:	0e 94 00 00 	call	0	; 0x0 <digitalRead>

	if (*portInputRegister(port) & bit) return HIGH;
  2c:	e1 2f       	mov	r30, r17
  2e:	f0 e0       	ldi	r31, 0x00	; 0
  30:	ee 0f       	add	r30, r30
  32:	ff 1f       	adc	r31, r31
  34:	e0 50       	subi	r30, 0x00	; 0
  36:	f0 40       	sbci	r31, 0x00	; 0
  38:	85 91       	lpm	r24, Z+
  3a:	94 91       	lpm	r25, Z+
  3c:	dc 01       	movw	r26, r24
  3e:	8c 91       	ld	r24, X
  40:	80 23       	and	r24, r16
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
  42:	21 e0       	ldi	r18, 0x01	; 1
  44:	30 e0       	ldi	r19, 0x00	; 0
  46:	01 f4       	brne	.+0      	; 0x48 <digitalRead+0x48>
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	30 e0       	ldi	r19, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
  4c:	c9 01       	movw	r24, r18
  4e:	1f 91       	pop	r17
  50:	0f 91       	pop	r16
  52:	08 95       	ret

wiring_pulse.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000798  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000e67  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.pulseIn 00000138  00000000  00000000  00001633  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.pulseIn:

00000000 <pulseIn>:
/* Measures the length (in microseconds) of a pulse on the pin; state is HIGH
 * or LOW, the type of pulse to measure.  Works on pulses from 2-3 microseconds
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse. */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	cf 93       	push	r28
  16:	df 93       	push	r29
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
  18:	90 e0       	ldi	r25, 0x00	; 0
  1a:	fc 01       	movw	r30, r24
  1c:	e0 50       	subi	r30, 0x00	; 0
  1e:	f0 40       	sbci	r31, 0x00	; 0
  20:	84 90       	lpm	r8, Z+
	uint8_t port = digitalPinToPort(pin);
  22:	80 50       	subi	r24, 0x00	; 0
  24:	90 40       	sbci	r25, 0x00	; 0
  26:	fc 01       	movw	r30, r24
  28:	a4 91       	lpm	r26, Z+
	uint8_t stateMask = (state ? bit : 0);
  2a:	66 23       	and	r22, r22
  2c:	01 f4       	brne	.+0      	; 0x2e <pulseIn+0x2e>
  2e:	99 24       	eor	r9, r9
  30:	00 c0       	rjmp	.+0      	; 0x32 <pulseIn+0x32>
  32:	98 2c       	mov	r9, r8
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
  34:	7f ef       	ldi	r23, 0xFF	; 255
  36:	a7 2e       	mov	r10, r23
  38:	7f ef       	ldi	r23, 0xFF	; 255
  3a:	b7 2e       	mov	r11, r23
  3c:	7f ef       	ldi	r23, 0xFF	; 255
  3e:	c7 2e       	mov	r12, r23
  40:	7f e0       	ldi	r23, 0x0F	; 15
  42:	d7 2e       	mov	r13, r23
  44:	a2 22       	and	r10, r18
  46:	b3 22       	and	r11, r19
  48:	c4 22       	and	r12, r20
  4a:	d5 22       	and	r13, r21
	uint8_t stateMask = (state ? bit : 0);
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
  4c:	20 e0       	ldi	r18, 0x00	; 0
  4e:	30 e0       	ldi	r19, 0x00	; 0
  50:	a9 01       	movw	r20, r18
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
  52:	b0 e0       	ldi	r27, 0x00	; 0
  54:	fd 01       	movw	r30, r26
  56:	ee 0f       	add	r30, r30
  58:	ff 1f       	adc	r31, r31
  5a:	e0 50       	subi	r30, 0x00	; 0
  5c:	f0 40       	sbci	r31, 0x00	; 0
  5e:	85 91       	lpm	r24, Z+
  60:	94 91       	lpm	r25, Z+
  62:	00 c0       	rjmp	.+0      	; 0x64 <pulseIn+0x64>
		if (numloops++ == maxloops)
  64:	2a 15       	cp	r18, r10
  66:	3b 05       	cpc	r19, r11
  68:	4c 05       	cpc	r20, r12
  6a:	5d 05       	cpc	r21, r13
  6c:	01 f4       	brne	.+0      	; 0x6e <pulseIn+0x6e>
  6e:	00 c0       	rjmp	.+0      	; 0x70 <pulseIn+0x70>
  70:	2f 5f       	subi	r18, 0xFF	; 255
  72:	3f 4f       	sbci	r19, 0xFF	; 255
  74:	4f 4f       	sbci	r20, 0xFF	; 255
  76:	5f 4f       	sbci	r21, 0xFF	; 255
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
  78:	fc 01       	movw	r30, r24
  7a:	60 81       	ld	r22, Z
  7c:	68 21       	and	r22, r8
  7e:	69 15       	cp	r22, r9
  80:	01 f0       	breq	.+0      	; 0x82 <pulseIn+0x82>
  82:	00 c0       	rjmp	.+0      	; 0x84 <pulseIn+0x84>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
  84:	2a 15       	cp	r18, r10
  86:	3b 05       	cpc	r19, r11
  88:	4c 05       	cpc	r20, r12
  8a:	5d 05       	cpc	r21, r13
  8c:	01 f4       	brne	.+0      	; 0x8e <pulseIn+0x8e>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <pulseIn+0x90>
  90:	2f 5f       	subi	r18, 0xFF	; 255
  92:	3f 4f       	sbci	r19, 0xFF	; 255
  94:	4f 4f       	sbci	r20, 0xFF	; 255
  96:	5f 4f       	sbci	r21, 0xFF	; 255
  98:	00 c0       	rjmp	.+0      	; 0x9a <pulseIn+0x9a>
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
  9a:	aa 0f       	add	r26, r26
  9c:	bb 1f       	adc	r27, r27
  9e:	a0 50       	subi	r26, 0x00	; 0
  a0:	b0 40       	sbci	r27, 0x00	; 0
  a2:	fd 01       	movw	r30, r26
  a4:	85 91       	lpm	r24, Z+
  a6:	94 91       	lpm	r25, Z+
  a8:	fc 01       	movw	r30, r24
  aa:	60 81       	ld	r22, Z
  ac:	68 21       	and	r22, r8
  ae:	69 15       	cp	r22, r9
  b0:	01 f4       	brne	.+0      	; 0xb2 <pulseIn+0xb2>
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	70 e0       	ldi	r23, 0x00	; 0
  b6:	cb 01       	movw	r24, r22
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
  b8:	fd 01       	movw	r30, r26
  ba:	c5 91       	lpm	r28, Z+
  bc:	d4 91       	lpm	r29, Z+
  be:	00 c0       	rjmp	.+0      	; 0xc0 <pulseIn+0xc0>
		if (numloops++ == maxloops)
  c0:	7b 01       	movw	r14, r22
  c2:	8c 01       	movw	r16, r24
  c4:	e2 0e       	add	r14, r18
  c6:	f3 1e       	adc	r15, r19
  c8:	04 1f       	adc	r16, r20
  ca:	15 1f       	adc	r17, r21
  cc:	ea 14       	cp	r14, r10
  ce:	fb 04       	cpc	r15, r11
  d0:	0c 05       	cpc	r16, r12
  d2:	1d 05       	cpc	r17, r13
  d4:	01 f0       	breq	.+0      	; 0xd6 <pulseIn+0xd6>
			return 0;
		width++;
  d6:	6f 5f       	subi	r22, 0xFF	; 255
  d8:	7f 4f       	sbci	r23, 0xFF	; 255
  da:	8f 4f       	sbci	r24, 0xFF	; 255
  dc:	9f 4f       	sbci	r25, 0xFF	; 255
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
  de:	7e 01       	movw	r14, r28
  e0:	ac 2f       	mov	r26, r28
  e2:	bf 2d       	mov	r27, r15
  e4:	ec 91       	ld	r30, X
  e6:	e8 21       	and	r30, r8
  e8:	e9 15       	cp	r30, r9
  ea:	01 f0       	breq	.+0      	; 0xec <pulseIn+0xec>

	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
  ec:	25 e1       	ldi	r18, 0x15	; 21
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	50 e0       	ldi	r21, 0x00	; 0
  f4:	0e 94 00 00 	call	0	; 0x0 <pulseIn>
  f8:	9b 01       	movw	r18, r22
  fa:	ac 01       	movw	r20, r24
  fc:	20 5f       	subi	r18, 0xF0	; 240
  fe:	3f 4f       	sbci	r19, 0xFF	; 255
 100:	4f 4f       	sbci	r20, 0xFF	; 255
 102:	5f 4f       	sbci	r21, 0xFF	; 255
 104:	84 e0       	ldi	r24, 0x04	; 4
 106:	56 95       	lsr	r21
 108:	47 95       	ror	r20
 10a:	37 95       	ror	r19
 10c:	27 95       	ror	r18
 10e:	8a 95       	dec	r24
 110:	01 f4       	brne	.+0      	; 0x112 <pulseIn+0x112>
 112:	00 c0       	rjmp	.+0      	; 0x114 <pulseIn+0x114>
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
		if (numloops++ == maxloops)
			return 0;
 114:	20 e0       	ldi	r18, 0x00	; 0
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	a9 01       	movw	r20, r18
	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
}
 11a:	b9 01       	movw	r22, r18
 11c:	ca 01       	movw	r24, r20
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	ff 90       	pop	r15
 128:	ef 90       	pop	r14
 12a:	df 90       	pop	r13
 12c:	cf 90       	pop	r12
 12e:	bf 90       	pop	r11
 130:	af 90       	pop	r10
 132:	9f 90       	pop	r9
 134:	8f 90       	pop	r8
 136:	08 95       	ret

wiring_shift.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000007d4  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000e79  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.shiftIn 00000084  00000000  00000000  00001681  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.shiftOut 00000086  00000000  00000000  00001705  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.shiftIn:

00000000 <shiftIn>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	e8 2e       	mov	r14, r24
  12:	f6 2e       	mov	r15, r22
  14:	c4 2e       	mov	r12, r20
  16:	c7 e0       	ldi	r28, 0x07	; 7
  18:	d0 e0       	ldi	r29, 0x00	; 0
  1a:	dd 24       	eor	r13, r13
  1c:	07 e0       	ldi	r16, 0x07	; 7
  1e:	10 e0       	ldi	r17, 0x00	; 0
		digitalWrite(clockPin, LOW);
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
  20:	8f 2d       	mov	r24, r15
  22:	61 e0       	ldi	r22, 0x01	; 1
  24:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
  28:	cc 20       	and	r12, r12
		digitalWrite(clockPin, LOW);
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
  2a:	01 f4       	brne	.+0      	; 0x2c <shiftIn+0x2c>
  2c:	8e 2d       	mov	r24, r14
  2e:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
  32:	98 01       	movw	r18, r16
  34:	2c 1b       	sub	r18, r28
  36:	3d 0b       	sbc	r19, r29
  38:	ac 01       	movw	r20, r24
  3a:	00 c0       	rjmp	.+0      	; 0x3c <shiftIn+0x3c>
  3c:	44 0f       	add	r20, r20
  3e:	55 1f       	adc	r21, r21
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
  40:	2a 95       	dec	r18
  42:	02 f4       	brpl	.+0      	; 0x44 <shiftIn+0x44>
  44:	9a 01       	movw	r18, r20
  46:	00 c0       	rjmp	.+0      	; 0x48 <shiftIn+0x48>
  48:	8e 2d       	mov	r24, r14
  4a:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  4e:	9c 01       	movw	r18, r24
  50:	0c 2e       	mov	r0, r28
  52:	00 c0       	rjmp	.+0      	; 0x54 <shiftIn+0x54>
  54:	22 0f       	add	r18, r18
  56:	33 1f       	adc	r19, r19
			
		digitalWrite(clockPin, HIGH);
  58:	0a 94       	dec	r0
  5a:	02 f4       	brpl	.+0      	; 0x5c <shiftIn+0x5c>
  5c:	d2 2a       	or	r13, r18
  5e:	8f 2d       	mov	r24, r15
		digitalWrite(clockPin, LOW);		
  60:	60 e0       	ldi	r22, 0x00	; 0
  62:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  66:	21 97       	sbiw	r28, 0x01	; 1
  68:	5f ef       	ldi	r21, 0xFF	; 255

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
  6a:	cf 3f       	cpi	r28, 0xFF	; 255
  6c:	d5 07       	cpc	r29, r21
  6e:	01 f4       	brne	.+0      	; 0x70 <shiftIn+0x70>
  70:	8d 2d       	mov	r24, r13
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
			
		digitalWrite(clockPin, HIGH);
		digitalWrite(clockPin, LOW);		
	}
}
  72:	df 91       	pop	r29
  74:	cf 91       	pop	r28
  76:	1f 91       	pop	r17
  78:	0f 91       	pop	r16
  7a:	ff 90       	pop	r15
  7c:	ef 90       	pop	r14
  7e:	df 90       	pop	r13
  80:	cf 90       	pop	r12
  82:	08 95       	ret

Disassembly of section .text.shiftOut:

00000000 <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	c8 2e       	mov	r12, r24
  14:	d6 2e       	mov	r13, r22
  16:	b4 2e       	mov	r11, r20
  18:	c7 e0       	ldi	r28, 0x07	; 7
  1a:	d0 e0       	ldi	r29, 0x00	; 0
  1c:	02 2f       	mov	r16, r18
  1e:	10 e0       	ldi	r17, 0x00	; 0
		digitalWrite(clockPin, LOW);
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
  20:	87 e0       	ldi	r24, 0x07	; 7
  22:	e8 2e       	mov	r14, r24
  24:	f1 2c       	mov	r15, r1
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
  26:	bb 20       	and	r11, r11
  28:	01 f4       	brne	.+0      	; 0x2a <shiftOut+0x2a>
		digitalWrite(clockPin, LOW);
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
  2a:	97 01       	movw	r18, r14
  2c:	2c 1b       	sub	r18, r28
  2e:	3d 0b       	sbc	r19, r29
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
  30:	c8 01       	movw	r24, r16
  32:	00 c0       	rjmp	.+0      	; 0x34 <shiftOut+0x34>
  34:	95 95       	asr	r25
  36:	87 95       	ror	r24
  38:	2a 95       	dec	r18
  3a:	02 f4       	brpl	.+0      	; 0x3c <shiftOut+0x3c>
  3c:	9c 01       	movw	r18, r24
  3e:	00 c0       	rjmp	.+0      	; 0x40 <shiftOut+0x40>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
  40:	98 01       	movw	r18, r16
  42:	0c 2e       	mov	r0, r28
  44:	00 c0       	rjmp	.+0      	; 0x46 <shiftOut+0x46>
  46:	35 95       	asr	r19
  48:	27 95       	ror	r18
  4a:	0a 94       	dec	r0
  4c:	02 f4       	brpl	.+0      	; 0x4e <shiftOut+0x4e>
  4e:	62 2f       	mov	r22, r18
  50:	61 70       	andi	r22, 0x01	; 1
  52:	8c 2d       	mov	r24, r12
  54:	0e 94 00 00 	call	0	; 0x0 <shiftOut>
			
		digitalWrite(clockPin, HIGH);
  58:	8d 2d       	mov	r24, r13
  5a:	61 e0       	ldi	r22, 0x01	; 1
  5c:	0e 94 00 00 	call	0	; 0x0 <shiftOut>
		digitalWrite(clockPin, LOW);		
  60:	8d 2d       	mov	r24, r13
  62:	60 e0       	ldi	r22, 0x00	; 0
  64:	0e 94 00 00 	call	0	; 0x0 <shiftOut>
  68:	21 97       	sbiw	r28, 0x01	; 1

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
  6a:	9f ef       	ldi	r25, 0xFF	; 255
  6c:	cf 3f       	cpi	r28, 0xFF	; 255
  6e:	d9 07       	cpc	r29, r25
  70:	01 f4       	brne	.+0      	; 0x72 <shiftOut+0x72>
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
			
		digitalWrite(clockPin, HIGH);
		digitalWrite(clockPin, LOW);		
	}
}
  72:	df 91       	pop	r29
  74:	cf 91       	pop	r28
  76:	1f 91       	pop	r17
  78:	0f 91       	pop	r16
  7a:	ff 90       	pop	r15
  7c:	ef 90       	pop	r14
  7e:	df 90       	pop	r13
  80:	cf 90       	pop	r12
  82:	bf 90       	pop	r11
  84:	08 95       	ret
