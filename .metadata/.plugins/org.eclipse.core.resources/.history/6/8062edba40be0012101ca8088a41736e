//==================================================================================
// Project Logger by Tom Vocke, 02-05-2013
//==================================================================================

/*
This project is intented to provide logging capabilities on the internal dataflash
of the ArduPilot Mega. It provides functions for storing, and retreiving sensor logs
via a serial interface, and makes use of the standard ArduPilot libraries.
*/

//guard
#ifndef _H_LOGGER
#define _H_LOGGER
//==================================================================================
// Includes
//==================================================================================

// Common dependencies
#include <AP_Common.h>


//==================================================================================
//Definitions
//==================================================================================

//  Choose the logs to enable (1) = enable, (0) = disable
#define EN_IMU_LOG 		(1)
#define EN_COMPASS_LOG	(1)
#define EN_THROTTLE_LOG	(1)
#define EN_GPS_LOG		(1)

//log packet header ("head" in hex)
#define LOG_PACKET_HEADER (0x64616568)

//return value definitions
#define LOG_INIT_OK (0)
#define LOG_INIT_ERR (1)

//enable log system
#define LOGGING_ENABLED (1)

//dataflash handling delay when erasing
#define LOG_DF_DELAY_US (1)

//==================================================================================
// Type Definitions
//==================================================================================

typedef struct logEntry {
    uint32_t header;
#if EN_IMU_LOG == (1)
    //TODO : put IMU log variables here
#endif
#if EN_COMPASS_LOG == (1)
    //TODO : put COMPASS log variables here
#endif
#if EN_THROTTLE_LOG == (1)
    //TODO : put THROTTLE log variables here
#endif
#if EN_GPS_LOG == (1)
    //TODO : put GPS log variables here
#endif
    //TODO : remove filler
    uint8_t filler[64];

} logEntry;



//==================================================================================
// Class Definition
//==================================================================================

/// Class defining and handling one menu tree
class logSystem {
public:

	//constructor
	logSystem(const char *prompt, const struct command *commands, uint8_t entries, preprompt ppfunc = 0);

	//==================================================================================
	// Menu Function Prototypes
	//==================================================================================
	//dummy, remainder of re-use of library AP_Menu
	static bool     logPrintMenu(void){return true;};
	//writes a number of logs to the dataflash, and reads them back
	static int8_t   logTestCmd(uint8_t argc, const logMenu::arg *argv);
	//erase the dataflash entirely
	static int8_t   logEraseCmd(uint8_t argc, const logMenu::arg *argv);
	//dump contents of log Nr X, if X <= 0, dump all
	static int8_t   logDumpCmd(uint8_t argc, const logMenu::arg *argv);
	//print an overview of the available logs on the dataflash
	static int8_t   logLogsCmd(uint8_t argc, const logMenu::arg *argv);

	//Instantiate serial menu
	// Creates a constant array of structs representing menu options
	// and stores them in Flash memory, not RAM.
	// User enters the string in the console to call the functions on the right.
	// See class Menu in AP_Common for implementation details
	const struct logMenu::command logMenuCommands[] PROGMEM = {
	    {"erase", logEraseCmd},
	    {"dump", logDumpCmd},
	    {"logs", logLogsCmd},
	    {"test", logTestCmd},
	};


	//initialize necessary interface for dataflash logging
	int8_t logInit(void);
	//test the dataflash
	void logPrintDFVendor(void);
	//write a block of data to the dataflash
	void logWriteBlock(const void *pBuffer, uint16_t size);
	//keep the menu alive by calling this function periodically
	void logMenuPeriodicCall(void);
	// Write a log packet
	void logWriteEntry(logEntry *entry);
	// Read a log packet
	logEntry logReadEntry();
	// Print a log packet over the serial connection
	void logPrintEntry(logEntry entry);
	// Dumps a log on given pages over the serial port
	void logDumpLogNr(int16_t startPage,int16_t endPage);
	//provide delay function for LOG_DF_DELAY_US * us
	void logUsDelay(unsigned long us);
	//end of logger.h
	void logUsDelay(unsigned long us);


private:

	//==================================================================================
	// Menu and Dataflash Instance
	//==================================================================================

	// A Macro to create the Log System Menu
	MENU2(logMenu, "Log", logMenuCommands, logPrintMenu);

	//Instantiation of dataflash object
	static DataFlash_APM2 DataFlash;


	/// Implements the default 'help' command.
    ///
    void        _help(void);                                                            ///< implements the 'help' command

    /// calls the function for the n'th menu item
    ///
    /// @param n			Index for the menu item to call
    /// @param argc			Number of arguments prepared for the menu item
    ///
    int8_t                  _call(uint8_t n, uint8_t argc);

    const char *            _prompt;                                                    ///< prompt to display
    const command *         _commands;                                                  ///< array of commands
    const uint8_t           _entries;                                                   ///< size of the menu
    const preprompt         _ppfunc;                                                    ///< optional pre-prompt action

    static char             _inbuf[MENU_COMMANDLINE_MAX];       ///< input buffer
    static arg              _argv[MENU_ARGS_MAX + 1];                   ///< arguments

	// port to run on
	static FastSerial       *_port;
	static uint8_t           _curLength;                                                    ///< current amount of characters stored in buffer
};

//==================================================================================
// Function prototypes
//==================================================================================



#endif
