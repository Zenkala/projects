//==================================================================================
// Project Logger by Tom Vocke, 02-05-2013
//==================================================================================

/*
This project is intented to provide logging capabilities on the internal dataflash
of the ArduPilot Mega. It provides functions for storing, and retreiving sensor logs
via a serial interface, and makes use of the standard ArduPilot libraries.
*/

#include "logger.h"
#include <DataFlash.h>

#if LOGGING_ENABLED == (1)
// Code to Write and Read packets from DataFlash log memory
// Code to interact with the user to dump or erase logs

// These are function definitions so the Menu can be constructed before the functions
// are defined below. Order matters to the compiler.
static bool     logPrintMenu(void){};
//writes a number of logs to the dataflash, and reads them back
static int8_t   logTest(uint8_t argc, const Menu::arg *argv);
//erase the dataflash
static int8_t   logErase(uint8_t argc, const Menu::arg *argv);
//dump contents of log Nr X, if X = 0, dump all
static int8_t   logDecodeDumpCmd(uint8_t argc, const Menu::arg *argv);
//print an overview of the available logs on the dataflash
static int8_t   logPrintLogs(uint8_t argc, const Menu::arg *argv);

//Instantiate serial menu
// Creates a constant array of structs representing menu options
// and stores them in Flash memory, not RAM.
// User enters the string in the console to call the functions on the right.
// See class Menu in AP_Common for implementation details
const struct Menu::command logMenuCommands[] PROGMEM = {
    {"erase", logErase},
    {"dump", logDecodeDumpCmd},
    {"logs", logPrintLogs},
    {"test", logTest},
};

// A Macro to create the Menu
MENU2(logMenu, "Log", logMenuCommands, logPrintMenu);

//Instantiate dataflash object
DataFlash_G2C DataFlash;

//===================================================================
//	Log Menu Function Implementations
//===================================================================

//attempt to write a few logs to the dataflash, and read them back
//show progress in terminal
static int8_t   logTest(uint8_t argc, const Menu::arg *argv){

	uint8_t i,j;
	logEntry entry;
	entry.header = LOG_PACKET_HEADER;

	Serial.print_P(PSTR("logTest :: size of one packet = "));
	Serial.printf("%d \n",sizeof(entry));
	Serial.print_P(PSTR("logTest :: writing logs."));
	//generate random logs and write them to the dataflash

	for (j = 0; j < 10; j++){
		for (i = 0; i < 32; i++){
			//write one entry
			logWriteEntry(&entry);
		}
		//Start New Log
		DataFlash.start_new_log();
		//indicate log written
		Serial.print_P(PSTR("."));
	}

	Serial.println();

	//print log overview
	logPrintLogs(0,(const Menu::arg *)NULL);


	return 0;
}


static int8_t   logErase(uint8_t argc, const Menu::arg *argv){
	Serial.print_P(PSTR("logErase :: erasing dataflash... "));
	DataFlash.EraseAll(&delay);
    Serial.print_P(PSTR("complete \n"));
	return 0;
}

static int8_t   logDecodeDumpCmd(uint8_t argc, const Menu::arg *argv){

	uint16_t dump_log;
    int16_t dump_log_start;
    int16_t dump_log_end;
    uint16_t last_log_num;
    uint32_t nrReads,i;



     // check that the requested log number can be read
    dump_log = argv[1].i;
    last_log_num = DataFlash.find_last_log();

    if (dump_log <= 0) {
        Serial.printf_P(PSTR("logDumpLogNr :: dumping all\n"));
        //TODO: implement dump all function
        //Log_Read(0, 1, 0);
    } else if ((argc != 2) || (dump_log <= (last_log_num - DataFlash.get_num_logs())) || (dump_log > last_log_num)) {
        Serial.printf_P(PSTR("logDumpLogNr :: bad log number\n"));
    } else { //dump log

    	//get fisrt and last page of
		DataFlash.get_log_boundaries(dump_log, dump_log_start, dump_log_end);



		if(dump_log_end >= dump_log_start){
			nrReads = 1 + ((dump_log_end - dump_log_start) * (DataFlash.df_PageSize - 4)) / sizeof(logEntry);
		} else { //if pages wrap around
			nrReads = 1 + ((dump_log_end + DataFlash.df_NumPages - dump_log_start) * (DataFlash.df_PageSize - 4)) / sizeof(logEntry);
		}

		Serial.printf_P(PSTR("logDumpLogNr :: dumping log %d with %d entries\n"),dump_log,nrReads);

		//initiate reading
		DataFlash.StartRead(dump_log_start);
		//read all the packets
		for(i=0;i<32;i++){
			logPrintEntry(logReadEntry());
		}



		//TODO: build custom read function
		//Log_Read((uint8_t)dump_log, dump_log_start, dump_log_end);

		Serial.printf_P(PSTR("\n Done\n"));
    }

    //TODO : build actual return value
    return (0);

}

static int8_t   logPrintLogs(uint8_t argc, const Menu::arg *argv){

	int16_t log_start;
	int16_t log_end;
	uint16_t temp;
	uint16_t last_log_num = DataFlash.find_last_log();

	uint16_t num_logs = DataFlash.get_num_logs();

	Serial.printf("logPrintLogs :: printing log list... \n");

	if (num_logs == 0) {
		Serial.printf_P(PSTR("\nNo logs\n\n"));
	}else{
		Serial.printf_P(PSTR("\n%u logs\n"), (unsigned)num_logs);

		for(int16_t i=num_logs; i>=1; i--) {
			uint16_t last_log_start = log_start, last_log_end = log_end;
			temp = last_log_num-i+1;
			DataFlash.get_log_boundaries(temp, log_start, log_end);
			Serial.printf_P(PSTR("Log %04d [start %04d || end %04d] \n"), (int)temp, (int)log_start, (int)log_end);
			if (last_log_start == log_start && last_log_end == log_end) {
				// we are printing bogus logs
				break;
			}
		}
		Serial.println();
	}

	return 0;
}



//===================================================================
//	Public LOG system function implementations
//===================================================================


void logMenuPeriodicCall(){
	logMenu.runOnce();
}

void logUsDelay(unsigned long us){
	//provide a few us delay for
	delayMicroseconds(us*LOG_DF_DELAY_US);
}

int8_t logInit(){

	uint8_t result = LOG_INIT_ERR;

	//initialize dataflash
	Serial.print_P(PSTR("logInit :: initializing flash... "));
    DataFlash.Init();
    Serial.print_P(PSTR("done \n"));

    if (DataFlash.CardInserted()) {
    	//if dataflash is unformatted erase all
    	if (DataFlash.NeedErase()) {
    		Serial.print_P(PSTR("logInit :: erase needed, erasing dataflash... "));
    		DataFlash.EraseAll(&logUsDelay);
    	    Serial.print_P(PSTR("complete \n"));
    	}
    	//start new log
    	DataFlash.start_new_log();
    	Serial.print_P(PSTR("logInit :: New log started \n"));
    }

    //Print Dataflash Vendor
    logPrintDFVendor();

	//initialize serial interface
	Serial.print_P(PSTR("logInit :: initializing terminal... "));
    Menu::set_port(&Serial);
    Serial.set_blocking_writes(true);
    Serial.print_P(PSTR("done \n"));

    //Print initial log terminal indicator
    Serial.println();
    Serial.printf_P(PSTR("Log >> "));

    //return OK
    result = LOG_INIT_OK;
    return result;
}


void logPrintDFVendor(){

    // get dataFlash manufacturer info
	DataFlash.ReadManufacturerID();
	//wait for read to finish
    delay(10);
    //print result
    Serial.print_P(PSTR("logPrintDFVendor -> Manufacturer:"));
    Serial.print(int(DataFlash.df_manufacturer));
    Serial.print_P(PSTR(","));
    Serial.print(DataFlash.df_device);
    Serial.println();

}

// Write a log packet.
void logWriteEntry(logEntry *entry)
{
	//TODO :  error check / protect?
	uint8_t i;
	byte *bytePtr = (byte *)entry;

	for(i=0; i<sizeof(logEntry); i++){
		DataFlash.WriteByte(bytePtr[i]);
	}

}

// Read a log packet
logEntry logReadEntry()
{

	//TODO : error check / protect?
	uint8_t i;
	logEntry entry;
	byte *bytePtr = (byte *)&entry;

	for(i=0; i<sizeof(logEntry); i++){
		bytePtr[i] = DataFlash.ReadByte();
	}

    return entry;
}

void logPrintEntry(logEntry entry){

	//TODO :  error check / protect?
	int16_t i;
	byte *bytePtr = (byte *)&entry;

	for(i=0; i<4; i++){
		Serial.printf("%c",(char)bytePtr[i]);
	}
	for(i=0; i<sizeof(logEntry)-4; i++){
		Serial.print(".");
	}
	Serial.println();

}

void logDumpLogNr(int16_t startPage,int16_t endPage){

	int16_t nrPages = endPage - startPage;



}


#else // LOGGING_ENABLED

//TODO : create empty functions

#endif // LOGGING_DISABLED
