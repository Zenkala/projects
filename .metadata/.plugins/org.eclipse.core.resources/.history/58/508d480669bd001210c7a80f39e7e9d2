//==================================================================================
// Project Logger by Tom Vocke, 02-05-2013
//==================================================================================

/*
This project is intented to provide logging capabilities on the internal dataflash
of the ArduPilot Mega. It provides functions for storing, and retreiving sensor logs
via a serial interface, and makes use of the standard ArduPilot libraries.
*/

#include "logger.h"
#include <DataFlash.h>

#if LOGGING_ENABLED == (1)
// Code to Write and Read packets from DataFlash log memory
// Code to interact with the user to dump or erase logs

// These are function definitions so the Menu can be constructed before the functions
// are defined below. Order matters to the compiler.
static bool     logPrintMenu(void);
static int8_t   logErase(uint8_t argc, const Menu::arg *argv);
static int8_t   logDumpLogNr(uint8_t argc, const Menu::arg *argv);
static int8_t   logPrintLogs(uint8_t argc, const Menu::arg *argv);

//Instantiate serial menu
// Creates a constant array of structs representing menu options
// and stores them in Flash memory, not RAM.
// User enters the string in the console to call the functions on the right.
// See class Menu in AP_Common for implementation details
const struct Menu::command logMenuCommands[] PROGMEM = {
    {"erase", logErase},
    {"dump", logDumpLogNr},
    {"logs", logPrintLogs}
};

// A Macro to create the Menu
MENU2(logMenu, "Log", logMenuCommands, logPrintMenu);

//Instantiate dataflash object
DataFlash_G2C DataFlash;



//prints the state of the dataflash and the log menu
static bool logPrintMenu(void)
{
    uint16_t log_start;
    uint16_t log_end;
    uint16_t temp;
    uint16_t last_log_num = DataFlash.find_last_log();

    uint16_t num_logs = DataFlash.get_num_logs();

    Serial.print_P(PSTR("Logging Menu :: Format [GPS, COMPASS, ..] \n"));

    return(true);
}


static int8_t   logErase(uint8_t argc, const Menu::arg *argv){
	Serial.printf("logErase :: command received \n");
	return 0;
}

static int8_t   logDumpLogNr(uint8_t argc, const Menu::arg *argv){
	Serial.printf("logDumpLogNr :: command received \n");
	return 0;
}

static int8_t   logPrintLogs(uint8_t argc, const Menu::arg *argv){
	Serial.printf("logPrintLogs :: command received \n");
	return 0;
}



void logMenuPeriodicCall(){
	logMenu.runOnce();
}



int8_t logInit(){

	uint8_t result = LOG_INIT_ERR;
	//initialize serial interface

	//initialize dataflash
	Serial.print_P(PSTR("logInit :: initializing flash... "));
    DataFlash.Init();
    Serial.print_P(PSTR("complete \n"));

    if (DataFlash.CardInserted()) {
    	//if dataflash is unformatted erase all
    	if (DataFlash.NeedErase()) {
    		Serial.print_P(PSTR("logInit :: erase needed, erasing dataflash... "));
    		DataFlash.EraseAll(&delay);
    	    Serial.print_P(PSTR("complete \n"));
    	}
    	//start new log
    	DataFlash.start_new_log();
    	Serial.print_P(PSTR("logInit :: New log started \n"));
    }

    //Print Dataflash Vendor
    logPrintDFVendor();

    //Print initial log terminal indicator
    Serial.println();
    Serial.printf_P(PSTR("Log >> "));

    //return OK
    return LOG_INIT_OK;
}


void logPrintDFVendor(){

    // get dataFlash manufacturer info
	DataFlash.ReadManufacturerID();
	//wait for read to finish
    delay(10);
    //print result
    Serial.print_P(PSTR("logPrintDFVendor -> Manufacturer:"));
    Serial.print(int(DataFlash.df_manufacturer));
    Serial.print_P(PSTR(","));
    Serial.print(DataFlash.df_device);
    Serial.println();

}

// Write an GPS packet. Total length : 31 bytes
void logWriteEntry()
{
    //logEntry entry;
    //entry.head1 =
	//TODO: replace with actual writing
    //DataFlash.WriteBlock(&entry, sizeof(entry));
}

// Read a GPS packet
logEntry logReadEntry()
{
    logEntry entry;
    //TODO : replace with actual reading
    //DataFlash.ReadPacket(&entry, sizeof(entry));
    return entry;
}


#else // LOGGING_ENABLED

//TODO : create empty functions

#endif // LOGGING_DISABLED
