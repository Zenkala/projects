//==================================================================================
// Project Logger by Tom Vocke, 02-05-2013
//==================================================================================

/*
This project is intented to provide logging capabilities on the internal dataflash
of the ArduPilot Mega. It provides functions for storing, and retreiving sensor logs
via a serial interface, and makes use of the standard ArduPilot libraries.
*/

//guard
#ifndef _H_LOGGER
#define _H_LOGGER
//==================================================================================
// Includes
//==================================================================================

// Common dependencies
#include <AP_Common.h>


//==================================================================================
//Definitions
//==================================================================================

//  Choose the logs to enable (1) = enable, (0) = disable
#define EN_IMU_LOG 		(1)
#define EN_COMPASS_LOG	(1)
#define EN_THROTTLE_LOG	(1)
#define EN_GPS_LOG		(1)

//log packet header ("head" in hex)
#define LOG_PACKET_HEADER (0x64616568)

//return value definitions
#define LOG_INIT_OK (0)
#define LOG_INIT_ERR (1)

//enable log system
#define LOGGING_ENABLED (1)

//dataflash handling delay when erasing
#define LOG_DF_DELAY_US (1)

//==================================================================================
// Type Definitions
//==================================================================================

typedef struct logEntry {
    uint32_t header;
#if EN_IMU_LOG == (1)
    //TODO : put IMU log variables here
#endif
#if EN_COMPASS_LOG == (1)
    //TODO : put COMPASS log variables here
#endif
#if EN_THROTTLE_LOG == (1)
    //TODO : put THROTTLE log variables here
#endif
#if EN_GPS_LOG == (1)
    //TODO : put GPS log variables here
#endif
    //TODO : remove filler
    uint8_t filler[64];

} logEntry;



//==================================================================================
// Class Definition
//==================================================================================

/// Class defining and handling one menu tree
class logSystem {
public:
    /// argument passed to a menu function
    ///
    /// Space-delimited arguments are parsed from the commandline and
    /// separated into these structures.
    ///
    /// If the argument cannot be parsed as a float or a long, the value
    /// of f or i respectively is undefined.  You should range-check
    /// the inputs to your function.
    ///
    struct arg {
        const char *str;                        ///< string form of the argument
        long i;                                         ///< integer form of the argument (if a number)
        float f;                                        ///< floating point form of the argument (if a number)
    };

    /// menu command function
    ///
    /// Functions called by menu array entries are expected to be of this
    /// type.
    ///
    /// @param	argc		The number of valid arguments, including the
    ///						name of the command in argv[0].  Will never be
    ///						more than MENU_ARGS_MAX.
    /// @param	argv		Pointer to an array of Menu::arg structures
    ///						detailing any optional arguments given to the
    ///						command.  argv[0] is always the name of the
    ///						command, so that the same function can be used
    ///						to handle more than one command.
    ///
    typedef int8_t (*func)(uint8_t argc, const struct arg *argv);

	static void set_port(FastSerial *port) {
		_port = port;
	}

    /// menu pre-prompt function
    ///
    /// Called immediately before waiting for the user to type a command; can be
    /// used to display help text or status, for example.
    ///
    /// If this function returns false, the menu exits.
    ///
    typedef bool (*preprompt)(void);

    /// menu command description
    ///
    struct command {
        /// Name of the command, as typed or received.
        /// Command names are limited in size to keep this structure compact.
        ///
        const char command[MENU_COMMAND_MAX];

        /// The function to call when the command is received.
        ///
        /// The argc argument will be at least 1, and no more than
        /// MENU_ARGS_MAX.  The argv array will be populated with
        /// arguments typed/received up to MENU_ARGS_MAX.  The command
        /// name will always be in argv[0].
        ///
        /// Commands may return -2 to cause the menu itself to exit.
        /// The "?", "help" and "exit" commands are always defined, but
        /// can be overridden by explicit entries in the command array.
        ///
        int8_t (*func)(uint8_t argc, const struct arg *argv);                   ///< callback function
    };

    /// constructor
    ///
    /// Note that you should normally not call the constructor directly.  Use
    /// the MENU and MENU2 macros defined below.
    ///
    /// @param prompt		The prompt to be displayed with this menu.
    /// @param commands		An array of ::command structures in program memory (PROGMEM).
    /// @param entries		The number of entries in the menu.
    ///
    logMenu(const char *prompt, const struct command *commands, uint8_t entries, preprompt ppfunc = 0);

    /// menu runner
    void        runOnce(void);

private:
    /// Implements the default 'help' command.
    ///
    void        _help(void);                                                            ///< implements the 'help' command

    /// calls the function for the n'th menu item
    ///
    /// @param n			Index for the menu item to call
    /// @param argc			Number of arguments prepared for the menu item
    ///
    int8_t                  _call(uint8_t n, uint8_t argc);

    const char *            _prompt;                                                    ///< prompt to display
    const command *         _commands;                                                  ///< array of commands
    const uint8_t           _entries;                                                   ///< size of the menu
    const preprompt         _ppfunc;                                                    ///< optional pre-prompt action

    static char             _inbuf[MENU_COMMANDLINE_MAX];       ///< input buffer
    static arg              _argv[MENU_ARGS_MAX + 1];                   ///< arguments

	// port to run on
	static FastSerial       *_port;
	static uint8_t           _curLength;                                                    ///< current amount of characters stored in buffer
};

//==================================================================================
// Function prototypes
//==================================================================================

//initialize necessary interface for dataflash logging
int8_t logInit(void);
//test the dataflash
void logPrintDFVendor(void);
//write a block of data to the dataflash
void logWriteBlock(const void *pBuffer, uint16_t size);
//keep the menu alive by calling this function periodically
void logMenuPeriodicCall(void);
// Write a log packet
void logWriteEntry(logEntry *entry);
// Read a log packet
logEntry logReadEntry();
// Print a log packet over the serial connection
void logPrintEntry(logEntry entry);
// Dumps a log on given pages over the serial port
void logDumpLogNr(int16_t startPage,int16_t endPage);
//provide delay function for LOG_DF_DELAY_US * us
void logUsDelay(unsigned long us);
//end of logger.h
void logUsDelay(unsigned long us);

#endif
